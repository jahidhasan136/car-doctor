 limitations under the License.\n */\n\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\nimport { SERVICE, SERVICE_NAME } from './constants';\n\nexport const enum ErrorCode {\n  MISSING_APP_CONFIG_VALUES = 'missing-app-config-values',\n  NOT_REGISTERED = 'not-registered',\n  INSTALLATION_NOT_FOUND = 'installation-not-found',\n  REQUEST_FAILED = 'request-failed',\n  APP_OFFLINE = 'app-offline',\n  DELETE_PENDING_REGISTRATION = 'delete-pending-registration'\n}\n\nconst ERROR_DESCRIPTION_MAP: { readonly [key in ErrorCode]: string } = {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]:\n    'Missing App configuration value: \"{$valueName}\"',\n  [ErrorCode.NOT_REGISTERED]: 'Firebase Installation is not registered.',\n  [ErrorCode.INSTALLATION_NOT_FOUND]: 'Firebase Installation not found.',\n  [ErrorCode.REQUEST_FAILED]:\n    '{$requestName} request failed with error \"{$serverCode} {$serverStatus}: {$serverMessage}\"',\n  [ErrorCode.APP_OFFLINE]: 'Could not process request. Application offline.',\n  [ErrorCode.DELETE_PENDING_REGISTRATION]:\n    \"Can't delete installation while there is a pending registration request.\"\n};\n\ninterface ErrorParams {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]: {\n    valueName: string;\n  };\n  [ErrorCode.REQUEST_FAILED]: {\n    requestName: string;\n    [index: string]: string | number; // to make Typescript 3.8 happy\n  } & ServerErrorData;\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  SERVICE,\n  SERVICE_NAME,\n  ERROR_DESCRIPTION_MAP\n);\n\nexport interface ServerErrorData {\n  serverCode: number;\n  serverMessage: string;\n  serverStatus: string;\n}\n\nexport type ServerError = FirebaseError & { customData: ServerErrorData };\n\n/** Returns true if error is a FirebaseError that is based on an error from the server. */\nexport function isServerError(error: unknown): error is ServerError {\n  return (\n    error instanceof FirebaseError &&\n    error.code.includes(ErrorCode.REQUEST_FAILED)\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { version } from '../../package.json';\n\nexport const PENDING_TIMEOUT_MS = 10000;\n\nexport const PACKAGE_VERSION = `w:${version}`;\nexport const INTERNAL_AUTH_VERSION = 'FIS_v2';\n\nexport const INSTALLATIONS_API_URL =\n  'https://firebaseinstallations.googleapis.com/v1';\n\nexport const TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour\n\nexport const SERVICE = 'installations';\nexport const SERVICE_NAME = 'Installations';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { GenerateAuthTokenResponse } from '../interfaces/api-response';\nimport {\n  CompletedAuthToken,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport {\n  INSTALLATIONS_API_URL,\n  INTERNAL_AUTH_VERSION\n} from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { AppConfig } from '../interfaces/installation-impl';\n\nexport function getInstallationsEndpoint({ projectId }: AppConfig): string {\n  return `${INSTALLATIONS_API_URL}/projects/${projectId}/installations`;\n}\n\nexport function extractAuthTokenInfoFromResponse(\n  response: GenerateAuthTokenResponse\n): CompletedAuthToken {\n  return {\n    token: response.token,\n    requestStatus: RequestStatus.COMPLETED,\n    expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),\n    creationTime: Date.now()\n  };\n}\n\nexport async function getErrorFromResponse(\n  requestName: string,\n  response: Response\n): Promise<FirebaseError> {\n  const responseJson: ErrorResponse = await response.json();\n  const errorData = responseJson.error;\n  return ERROR_FACTORY.create(ErrorCode.REQUEST_FAILED, {\n    requestName,\n    serverCode: errorData.code,\n    serverMessage: errorData.message,\n    serverStatus: errorData.status\n  });\n}\n\nexport function getHeaders({ apiKey }: AppConfig): Headers {\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n\nexport function getHeadersWithAuth(\n  appConfig: AppConfig,\n  { refreshToken }: RegisteredInstallationEntry\n): Headers {\n  const headers = getHeaders(appConfig);\n  headers.append('Authorization', getAuthorizationHeader(refreshToken));\n  return headers;\n}\n\nexport interface ErrorResponse {\n  error: {\n    code: number;\n    message: string;\n    status: string;\n  };\n}\n\n/**\n * Calls the passed in fetch wrapper and returns the response.\n * If the returned response has a status of 5xx, re-runs the function once and\n * returns the response.\n */\nexport async function retryIfServerError(\n  fn: () => Promise<Response>\n): Promise<Response> {\n  const result = await fn();\n\n  if (result.status >= 500 && result.status < 600) {\n    // Internal Server Error. Retry request.\n    return fn();\n  }\n\n  return result;\n}\n\nfunction getExpiresInFromResponseExpiresIn(responseExpiresIn: string): number {\n  // This works because the server will never respond with fractions of a second.\n  return Number(responseExpiresIn.replace('s', '000'));\n}\n\nfunction getAuthorizationHeader(refreshToken: string): string {\n  return `${INTERNAL_AUTH_VERSION} ${refreshToken}`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Returns a promise that resolves after given time passes. */\nexport function sleep(ms: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bufferToBase64UrlSafe } from './buffer-to-base64-url-safe';\n\nexport const VALID_FID_PATTERN = /^[cdef][\\w-]{21}$/;\nexport const INVALID_FID = '';\n\n/**\n * Generates a new FID using random values from Web Crypto API.\n * Returns an empty string if FID generation fails for any reason.\n */\nexport function generateFid(): string {\n  try {\n    // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5\n    // bytes. our implementation generates a 17 byte array instead.\n    const fidByteArray = new Uint8Array(17);\n    const crypto =\n      self.crypto || (self as unknown as { msCrypto: Crypto }).msCrypto;\n    crypto.getRandomValues(fidByteArray);\n\n    // Replace the first 4 random bits with the constant FID header of 0b0111.\n    fidByteArray[0] = 0b01110000 + (fidByteArray[0] % 0b00010000);\n\n    const fid = encode(fidByteArray);\n\n    return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;\n  } catch {\n    // FID generation errored\n    return INVALID_FID;\n  }\n}\n\n/** Converts a FID Uint8Array to a base64 string representation. */\nfunction encode(fidByteArray: Uint8Array): string {\n  const b64String = bufferToBase64UrlSafe(fidByteArray);\n\n  // Remove the 23rd character that was added because of the extra 4 bits at the\n  // end of our 17 byte array, and the '=' padding.\n  return b64String.substr(0, 22);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function bufferToBase64UrlSafe(array: Uint8Array): string {\n  const b64 = btoa(String.fromCharCode(...array));\n  return b64.replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppConfig } from '../interfaces/installation-impl';\n\n/** Returns a string key that can be used to identify the app. */\nexport function getKey(appConfig: AppConfig): string {\n  return `${appConfig.appName}!${appConfig.appId}`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getKey } from '../util/get-key';\nimport { AppConfig } from '../interfaces/installation-impl';\nimport { IdChangeCallbackFn } from '../api';\n\nconst fidChangeCallbacks: Map<string, Set<IdChangeCallbackFn>> = new Map();\n\n/**\n * Calls the onIdChange callbacks with the new FID value, and broadcasts the\n * change to other tabs.\n */\nexport function fidChanged(appConfig: AppConfig, fid: string): void {\n  const key = getKey(appConfig);\n\n  callFidChangeCallbacks(key, fid);\n  broadcastFidChange(key, fid);\n}\n\nexport function addCallback(\n  appConfig: AppConfig,\n  callback: IdChangeCallbackFn\n): void {\n  // Open the broadcast channel if it's not already open,\n  // to be able to listen to change events from other tabs.\n  getBroadcastChannel();\n\n  const key = getKey(appConfig);\n\n  let callbackSet = fidChangeCallbacks.get(key);\n  if (!callbackSet) {\n    callbackSet = new Set();\n    fidChangeCallbacks.set(key, callbackSet);\n  }\n  callbackSet.add(callback);\n}\n\nexport function removeCallback(\n  appConfig: AppConfig,\n  callback: IdChangeCallbackFn\n): void {\n  const key = getKey(appConfig);\n\n  const callbackSet = fidChangeCallbacks.get(key);\n\n  if (!callbackSet) {\n    return;\n  }\n\n  callbackSet.delete(callback);\n  if (callbackSet.size === 0) {\n    fidChangeCallbacks.delete(key);\n  }\n\n  // Close broadcast channel if there are no more callbacks.\n  closeBroadcastChannel();\n}\n\nfunction callFidChangeCallbacks(key: string, fid: string): void {\n  const callbacks = fidChangeCallbacks.get(key);\n  if (!callbacks) {\n    return;\n  }\n\n  for (const callback of callbacks) {\n    callback(fid);\n  }\n}\n\nfunction broadcastFidChange(key: string, fid: string): void {\n  const channel = getBroadcastChannel();\n  if (channel) {\n    channel.postMessage({ key, fid });\n  }\n  closeBroadcastChannel();\n}\n\nlet broadcastChannel: BroadcastChannel | null = null;\n/** Opens and returns a BroadcastChannel if it is supported by the browser. */\nfunction getBroadcastChannel(): BroadcastChannel | null {\n  if (!broadcastChannel && 'BroadcastChannel' in self) {\n    broadcastChannel = new BroadcastChannel('[Firebase] FID Change');\n    broadcastChannel.onmessage = e => {\n      callFidChangeCallbacks(e.data.key, e.data.fid);\n    };\n  }\n  return broadcastChannel;\n}\n\nfunction closeBroadcastChannel(): void {\n  if (fidChangeCallbacks.size === 0 && broadcastChannel) {\n    broadcastChannel.close();\n    broadcastChannel = null;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DBSchema, IDBPDatabase, openDB } from 'idb';\nimport { AppConfig } from '../interfaces/installation-impl';\nimport { InstallationEntry } from '../interfaces/installation-entry';\nimport { getKey } from '../util/get-key';\nimport { fidChanged } from './fid-changed';\n\nconst DATABASE_NAME = 'firebase-installations-database';\nconst DATABASE_VERSION = 1;\nconst OBJECT_STORE_NAME = 'firebase-installations-store';\n\ninterface InstallationsDB extends DBSchema {\n  'firebase-installations-store': {\n    key: string;\n    value: InstallationEntry | undefined;\n  };\n}\n\nlet dbPromise: Promise<IDBPDatabase<InstallationsDB>> | null = null;\nfunction getDbPromise(): Promise<IDBPDatabase<InstallationsDB>> {\n  if (!dbPromise) {\n    dbPromise = openDB(DATABASE_NAME, DATABASE_VERSION, {\n      upgrade: (db, oldVersion) => {\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            db.createObjectStore(OBJECT_STORE_NAME);\n        }\n      }\n    });\n  }\n  return dbPromise;\n}\n\n/** Gets record(s) from the objectStore that match the given key. */\nexport async function get(\n  appConfig: AppConfig\n): Promise<InstallationEntry | undefined> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  return db\n    .transaction(OBJECT_STORE_NAME)\n/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Auth } from '../../model/public_types';
export interface CreateAuthUriRequest {
    identifier: string;
    continueUri: string;
    tenantId?: string;
}
export interface CreateAuthUriResponse {
    signinMethods: string[];
}
export declare function createAuthUri(auth: Auth, request: CreateAuthUriRequest): Promise<CreateAuthUriResponse>;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            'use strict';

var GetIntrinsic = require('get-intrinsic');

var $TypeError = GetIntrinsic('%TypeError%');

var $byteLength = require('array-buffer-byte-length');

var isArrayBuffer = require('is-array-buffer');

var availableTypedArrays = require('available-typed-arrays')();

// https://262.ecma-international.org/6.0/#sec-isdetachedbuffer

module.exports = function IsDetachedBuffer(arrayBuffer) {
	if (!isArrayBuffer(arrayBuffer)) {
		throw new $TypeError('Assertion failed: `arrayBuffer` must be an Object with an [[ArrayBufferData]] internal slot');
	}
	if ($byteLength(arrayBuffer) === 0) {
		try {
			new global[availableTypedArrays[0]](arrayBuffer); // eslint-disable-line no-new
		} catch (error) {
			return !!error && error.name === 'TypeError';
		}
	}
	return false;
};
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 "use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _createSvgIcon = _interopRequireDefault(require("../../utils/createSvgIcon"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/**
 * @ignore - internal component.
 */
var _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)("path", {
  d: "M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
}), 'ErrorOutline');
exports.default = _default;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         .6-13.4 3.2-21.2 6.8-15.5 7.4-32.5 18.9-50.3 24.8-.1 0-3.4 3.2-4.7 6.8-.7 1.9-.9 3.8-.8 4.7 0 .4.1.5.1.6 21.4 17.9 53.7 20.8 76.4 10.9v-.1c16.4-7.1 26-17.2 28.6-25.7 2.7-8.4.6-16.2-12.1-25.1-3.8-2.6-7.5-3.7-11.7-3.9zM355 258.8v-.1l-.2.1h.2zm-45.3-22c-9.2 6.6-16 17.4-18.1 30.7-2.7 17.6 3.7 34.1 15 43.9 1.1-1.7 2.4-3.2 3.9-4.6 2.8-2.6 6.6-4.7 11.1-4.9h1.1c.3-1.8.8-3.7 1.6-5.6 1.9-4.8 6.4-10 12.7-12.5-3.6-3.3-5.1-7.9-5.4-11.9-.4-4.3.3-8.3 1.6-12.1.2-.7.5-1.4.8-2-3.9-4.4-7-9.9-8.8-16.5-4.3.7-8.7.4-12.4-2-1.2-.8-2.2-1.6-3.1-2.5zm-92 18.3c-1.9 8.1-3.5 16.2-4.8 24.2l.2-.2c7.7 7.5 20.5 9.4 32.2 8.6 1.7-9.1 3.4-18.3 5-27.6-5.3-1.4-12.1-2.9-18.5-3.9-5.1-.8-10.4-1-14.1-1.1zm-49.3 19c-16.9 4.1-36.7 11.6-55.3 22.6-33.97 20.1-64.37 50.9-73.4 91.6 22.34 13.4 55.5 9.6 86.6-10.9 28.9-19 55-51.9 66.9-96.1-8.6-1.9-16.8-4.3-24.8-7.2zm41.5 24.8c-1.1 7.9-2 15.7-2.8 23.6 9 5.1 20.6 7.7 28.9 6.8 2-7.7 3.9-15.5 5.6-23.4-10.3.2-21.7-1.3-31.7-7zm152 .1c-5.7.6-11.5 1.2-17.5 1.4-2.6.1-2.6.6-3.4 2.7-.4 1-.6 2.3-.7 3.1 0 .3.1.6.2.7 1.4 2.4 2.8 4.8 4.1 7.3 14.8 11.5 26.6 23.6 36.8 37.2 6 1.4 13.3 1.8 22.5.7 13.2-1.7 28-11.1 33.5-20.8 2.7-4.9 3.4-9.2 2-13.8-1.5-4.6-5.5-10.2-14.8-15.9 0 0-.1 0-.1-.1-19.7 6.1-42.3 5.6-62.6-2.5zm-39.3 21.3c-.8.9-2.3 3.9-2.4 6.5-1.5 30.9 3.8 55.6 17.9 83.8 3.2 6.5 5.7 7.2 10 7.1 4.3-.1 10.7-2.9 16.5-7.7 5.8-4.9 10.8-11.6 13.4-17.6 2.5-6 2.3-10.5.7-13.1-14.6-23.5-29.9-40.8-55.4-58.5l-.4-.2-.3-.3zm-204.5 4.4c2.3 0 4.3.2 6 .7-4.7 43.9-38.86 63-56.07 46.2 3.91-31.5 33.77-46.4 50.07-46.9zm179.2 2c-8.2 21.7-16.3 41.7-12.1 62.5 1.8 8.7 4.3 13.8 6.3 16.2 2 2.3 2.6 2.2 3.3 2.1 1.4-.1 6.6-4 8.1-10.9 2.1-9.8 2.4-19.6 1.7-29.4-1-5.5-1.7-11-2.1-16.6-1.3-7.7-2.9-15.5-4.5-23.4-.2-.2-.4-.4-.7-.5zm-92.1 15.1c-.2 1.7-.3 3.5-.5 5.3-.5 13.5 1.3 22.1 3.2 26.2 1.9 4.2 2.4 3.7 3.3 3.7 1 0 4.1-1.1 7.4-4.3 3.2-3.1 6.3-8 8.2-13.2v-.1c1.4-3.9 2.7-7.9 4-11.8-8.6-.2-17.4-2.2-25.6-5.8zm233.3 14.9c-4.8 3.7-10.1 6.6-15.7 8.9 32.3 42.2 45.6 91.6 48.1 129.3l18-1.2c-2.7-40.2-16.9-92.2-50.4-137z"}}]})(props);
};
module.exports.GiButterflyKnife = function GiButterflyKnife (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M492.997 22.277c-26.511 13.835-46.459 23.883-80.37 29.6l-149.47 169c.284.262.566.525.841.8 5.444 5.444 8.24 12.592 8.403 19.791 7.199.164 14.347 2.959 19.79 8.403.092.091.177.187.266.28 75.387-70.48 208.445-166.137 200.54-227.874zM221.707 207.58l-12.728 12.728 7.262 7.262 7.199-6.238a28.54 28.54 0 0 1 7.03-4.989zm21.83 23.566c-2.78 0-5.56 1.085-7.734 3.258-4.346 4.346-4.346 11.122 0 15.469 4.346 4.346 11.12 4.344 15.467-.002 4.346-4.347 4.346-11.119 0-15.465-2.173-2.173-4.952-3.26-7.733-3.26zm-27.359 20.297L45.68 399.21l46.877 9.375 139.79-139.79a28.577 28.577 0 0 1-16.168-17.352zm55.553 7.897c-2.78 0-5.56 1.086-7.733 3.26-4.345 4.346-4.348 11.12-.002 15.466 4.347 4.346 11.123 4.346 15.47 0 4.346-4.346 4.344-11.12-.003-15.467-2.173-2.173-4.953-3.26-7.732-3.26zm-26.656 22.183l-139.79 139.79 9.376 46.876 147.765-170.498a28.577 28.577 0 0 1-17.351-16.168zm52.45 1.877a28.538 28.538 0 0 1-4.987 7.03l-6.239 7.199 7.262 7.261 12.728-12.726zM31.396 369.7l-12.729 12.726 8.774 8.774 13.637-11.818zm-2.924 44.424l-4.137 3.586c-.14.124-.137-.033-.181.638-.048.712.14 2.267.908 4.264 1.536 3.995 5.278 9.47 9.857 14.049 4.58 4.58 10.054 8.32 14.05 9.857 1.997.769 3.553.956 4.265.908.712-.047.504-.022.676-.193l23.351-23.351zm61.518 22.486l-23.352 23.352c-.171.17-.144-.035-.191.677-.048.712.138 2.268.906 4.266 1.536 3.995 5.28 9.468 9.86 14.047 4.579 4.58 10.051 8.323 14.046 9.86 1.998.768 3.554.953 4.266.906.669-.045.514-.04.637-.18l3.585-4.137z"}}]})(props);
};
module.exports.GiButterflyWarning = function GiButterflyWarning (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M257.656 19.78c-30.5.17-59.177 22.708-80.125 62.97-.06.12-.124.224-.186.344L46.656 311.814l-.25.405c-24.31 38.264-29.428 74.37-14.343 100.874 15.08 26.497 48.628 40.094 93.5 37.875v.03h265.093v-.03c44.888 2.226 78.446-11.373 93.53-37.876 15.09-26.51 9.927-62.627-14.405-100.906l-.217-.375L337.219 81.938h-.033c-20.512-40.02-49.058-62.324-79.53-62.157zm-.062 18.876c13.575-.13 26.545 6.444 38.187 17.75 11.565 11.23 22.36 27.28 33.064 48.22.073.142.145.26.22.405L445.56 307.22l.063.092.156.282c12.062 18.924 20.543 35.996 24.876 51.53 4.362 15.64 4.54 30.2-1.5 42.438-6.04 12.24-17.97 20.882-33.75 25.72-15.668 4.803-35.544 6.348-60.375 5.093v.03H141.22v-.03c-22.915 1.16-41.99-.127-57.44-4.47-15.558-4.372-27.84-12.177-34.75-23.936-6.906-11.76-7.785-26.4-3.874-42.408 3.884-15.898 12.374-33.677 25.282-53.937l.25-.406 115.218-201.533c.063-.12.125-.222.188-.343C196.946 84.452 207.864 68.346 219.47 57c11.672-11.412 24.55-18.212 38.124-18.344zm.187 18.688c-7.502.073-15.764 3.727-25.25 13-9.484 9.273-19.69 23.974-30.03 43.937l-.094.157-.094.188-87.343 152.78c13.76-5.03 27.72-7.523 41.56-7.53 34.365-.018 68.02 15.233 96.157 44.688-49.69 27.25-104.785 20.256-148.25-18.72l-17.78 31.063-.094.188-.126.187C74.076 336.63 66.477 353.044 63.314 366c-3.166 12.957-2.053 21.95 1.812 28.53 3.865 6.58 11.153 11.845 23.72 15.376 12.565 3.532 30.023 4.95 51.874 3.813h70.436c-14.237-41.996 3.346-77.317 49.188-95.44 18.38 38.924 9.88 73.377-21.656 95.44H375.5c23.735 1.233 41.894-.468 54.438-4.314 12.543-3.845 19.11-9.29 22.468-16.094 3.358-6.803 3.848-16.257.25-29.156-3.598-12.898-11.28-28.78-22.844-46.875l-.125-.155-.125-.188-69.968-121.5c-8.44 48.982-40.586 85.365-88.97 99.438-1.364-58.31 26.12-103.905 74.563-124.438l-32.53-56.5-.126-.187-.124-.22c-10.195-20.008-20.282-34.614-29.656-43.718-9.374-9.103-17.465-12.54-24.97-12.468zm-2.655 105.875l17.72 5.968c-10.588 31.498-15.707 64.94-14.158 101.062l.875 20.47-16.03-12.75c-28.31-22.513-49.124-51.743-61.376-87.564l17.688-6.062c8.81 25.758 22.248 47.273 40.094 65.25.81-30.364 6.037-59.15 15.187-86.375zm54.063 140.28c31.794-.467 57.084 18.255 70.656 53.594-48.42 19.4-89.145 2.506-107.47-45.438 12.96-5.31 25.313-7.987 36.813-8.156z"}}]})(props);
};
module.exports.GiButterfly = function GiButterfly (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M222.97 43.094l-17.72 5.937c18.246 54.362 27.075 112.164 24.406 174.47l-.875 20.5 16.032-12.78c47.213-37.597 81.827-86.216 102.282-146.095l-17.688-6.063c-17.04 49.88-44.08 90.906-80.656 124.22.156-56.652-8.915-109.937-25.78-160.188zM53.812 51.22C51.09 160.79 110.03 244.245 208.75 273c2.573-110.1-55.144-193.608-154.938-221.78zm335.156 150.374c-58.436-.03-115.656 25.943-163.5 76.094 90.775 49.848 192.148 32.407 268.217-47.563-34.172-19.135-69.658-28.513-104.718-28.53zM136.936 277.03c-52.45.582-94.1 32.36-116.687 91.25 82.336 33.03 151.56 4.26 182.72-77.374-23.333-9.574-45.51-14.102-66.032-13.875zm81.97 19.47c-37.76 80.056-8.793 149.03 75.343 183.094 37.786-80.46 9.994-149.316-75.344-183.094z"}}]})(props);
};
module.exports.GiButtonFinger = function GiButtonFinger (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M169 18v206c0 25.43 10.438 43.384 26.525 55.896C211.613 292.41 233.75 299 256 299s44.387-6.59 60.475-19.104C332.562 267.384 343 249.43 343 224V18H169zM80 32L28.027 93.102l116.586 125.015L80 32zm352 0l-64.613 186.117L483.973 93.102 432 32zm-240 7h128v18H192V39zm16 32h96v18h-96V71zm48 68.178c21.138 0 42.276 4.093 66.846 12.283l6.154 2.054V224c0 16-11.186 28.156-24.975 35.05-13.788 6.895-30.9 9.95-48.025 9.95s-34.237-3.055-48.025-9.95C194.185 252.157 183 240 183 224v-70.486l6.154-2.053c24.57-8.19 45.708-12.282 66.846-12.282zm0 17.644c-17.133 0-34.442 3.394-55 9.838V224c0 8 4.814 13.844 15.025 18.95 10.212 5.105 25.1 8.05 39.975 8.05s29.763-2.945 39.975-8.05C306.185 237.843 311 232 311 224v-57.34c-20.558-6.444-37.867-9.838-55-9.838zm-237.104 24.07l2.81 36.522 99.028 14.75-101.838-51.27zm474.208 0l-101.838 51.272 99.03-14.75 2.808-36.52zm-340.317 61.762a168.22 168.22 0 0 0-10.807 4.983C113.406 262.11 98 280.863 98 299.417c0 18.556 15.406 37.308 43.98 51.78C170.555 365.67 211.116 375 256 375s85.445-9.33 114.02-23.803c28.574-14.472 43.98-33.224 43.98-51.78 0-18.554-15.406-37.308-43.98-51.78a168.22 168.22 0 0 0-10.807-4.983c-4.294 21.785-16.024 39.266-31.688 51.45C307.613 309.59 281.75 317 256 317c-25.75 0-51.613-7.41-71.525-22.896-15.664-12.184-27.394-29.665-31.688-51.45zm279.176 67.657v53.108c0 18.27-9.684 35.238-25.434 49.057-15.75 13.818-37.74 24.997-64.526 32.832-53.573 15.668-118.452 15.668-172.025 0-26.788-7.835-48.777-19.014-64.527-32.832-15.586-13.676-25.227-30.438-25.426-48.49h-.18v-53.58C40.076 330.146 18 355.583 18 381.006c0 26.53 24.032 53.084 67.143 73.155C128.253 474.23 188.925 487 256 487s127.747-12.77 170.857-32.84C469.967 434.09 494 407.535 494 381.004c0-25.463-22.147-50.94-62.037-70.693zm-334.117 30.8v22.308h.172c0 11.95 6.228 24.05 19.306 35.525 13.078 11.475 32.832 21.81 57.707 29.086 49.75 14.55 112.17 14.55 161.92 0 24.876-7.276 44.63-17.612 57.708-29.087 13.078-11.475 19.305-23.575 19.305-35.525V341.32c-9.224 9.965-21.516 18.697-35.81 25.936C346.288 383.396 303.35 393 256 393s-90.287-9.604-122.154-25.744c-14.393-7.29-26.756-16.093-36-26.145z"}}]})(props);
};
module.exports.GiBuyCard = function GiBuyCard (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M128 32l-80 96h48v80h64v-80h48l-80-96zm216 0c-40 0-40 0-40 39.945V232c0 40 0 40 40 40h80c40 0 40 0 40-40V72c0-40 0-40-40-40h-80zM176.096 236.904c-5.28.12-10.212 2.417-16.94 9.596l-6.562 6.969-6.813-6.72c-7.387-7.28-13.216-9.29-19.125-9.03-5.908.26-12.855 3.365-20.625 9.654l-6.219 5.031-5.906-5.375c-8.9-8.052-16.485-10.437-23.75-10.062-5.288.274-10.775 2.266-16.25 5.75l40.969 73.687c15.454 9.452 47.033 13.009 68.75 2.065l39.594-73.346c-7.51-3.062-14.26-6.2-20.094-7.404-2.112-.437-4.073-.758-5.97-.815-.355-.01-.71-.008-1.06 0zM352 304v80h-48l80 96 80-96h-48v-80h-64zM86.125 333.094v.002C68.09 345.838 53.609 367.813 48 400c-5.435 31.196 3.127 52.264 18.281 66.623 15.155 14.36 37.902 21.738 61 21.438 23.1-.3 46.136-8.31 61.625-22.936 15.49-14.627 24.251-35.425 19.283-65.188-5.137-30.757-18.4-52.147-35.19-65.093-28.483 15.056-64.094 11.856-86.874-1.75z"}}]})(props);
};
module.exports.GiByzantinTemple = function GiByzantinTemple (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M247 23.82v18.71c-50.7 3.94-87.9 40.63-93.2 77.67h204.5C353 83.16 315.7 46.46 265 42.53V23.82zM153.1 138.2v16.3c3.2 1.7 5.9 4.2 7.7 6.8 3.3 4.9 5 10.5 6.1 16.1 2.1 11.4 2.2 20.5 2.2 31.8v71H183v-78l.8-18c2.6-14.8 11.6-26.7 23.2-34.5 8.5-5.7 18.3-9.4 28.6-11.5zm123.3 0c10.3 2.1 20.1 5.8 28.6 11.5 11.6 7.8 20.6 19.7 23.2 34.5l.8 18v78h14v-71c0-10.7.3-22.5 2.2-31.8 1.1-5.6 2.8-11.2 6.1-16.1 1.8-2.6 4.5-5.1 7.7-6.8v-16.3zm-20.4 16c-14.5 0-28.9 3.8-39 10.5-7.6 5-12.8 11.2-14.9 19.5h107.8c-2.1-8.3-7.3-14.5-14.9-19.5-10.1-6.7-24.5-10.5-39-10.5zm-111.3 16.1c-11.9 1.7-26.8 8.9-38 17.5-5.3 4.1-9.79 8.5-12.9 12.4h57.1c-.1-6.5-.5-13.4-1.6-19.2-1.1-3.6-1.7-8.4-4.6-10.7zm222.7 0c-2.6 2.3-4 7.7-4.6 10.7-1.1 5.8-1.5 12.7-1.6 19.2h57c-3.1-3.9-7.5-8.3-12.9-12.4-11.2-8.6-26-15.8-37.9-17.5zM201 202.2v78h9c.8-.7 1.6-1.4 2.4-2 3-2.4 6.2-4.5 9.6-6.3v-34.7c0-8 6-12 12-12s12 4 12 12v27.6c3.2-.4 6.5-.6 10-.6s6.8.2 10 .6v-27.6c0-8 6-12 12-12s12 4 12 12v34.7c3.4 1.8 6.6 3.9 9.6 6.3.8.6 1.6 1.3 2.4 2h9v-78zm-112 16v62h62.1v-62zm272 0v62h62v-62zm-237 7c6 0 12 4 12 12v32h-24v-32c0-8 6-12 12-12zm264 0c6 0 12 4 12 12v32h-24v-32c0-8 6-12 12-12zm-132 57c-14.5 0-24 3.3-32.4 10-8.4 6.7-15.8 17.6-23.5 33l-2.5 5H137v30h238v-30h-60.7l-2.5-5c-7.7-15.4-15.1-26.3-23.5-33-8.4-6.7-17.8-10-32.3-10zm-176 16c-13 0-22.25 6.2-28.97 14.6-3.88 4.9-6.49 10.5-8.12 15.4H119v-16h67.6c2.7-5 5.4-9.7 8.2-14zm237.1 0c2.8 4.3 5.5 9 8.2 14H393v16h76.1c-1.6-4.9-4.2-10.5-8.1-15.4-6.7-8.4-16-14.6-29-14.6zM41 346.2v46h31.89c1.36-3.2 3.34-6.1 5.56-8.6 4.13-4.8 9.31-8.8 14.92-12.1 8.23-4.9 17.13-8.7 25.63-10.4v-14.9zm352 0v14.9c8.5 1.7 17.4 5.5 25.6 10.4 5.6 3.3 10.8 7.3 15 12.1 2.2 2.5 4.2 5.4 5.5 8.6H471v-46zm-265 32c-5 0-16.6 3.4-25.4 8.7-2.74 1.7-5.11 3.5-7.2 5.3h321.2c-2.1-1.8-4.5-3.6-7.2-5.3-8.8-5.3-20.4-8.7-25.4-8.7zm-89.51 32l-10 30H87v-30H71zm66.51 0v78h94.1c.7-28.4 4.6-50.6 12.8-67 2-4 4.4-7.7 7.1-11zm151 0c-13 0-21 5.2-27.9 19-6.3 12.5-10 32.5-10.8 59h77.5c-.6-26.7-3.4-47-9.1-59.2-6.3-13.7-13.8-18.8-29.7-18.8zm39.1 0c2.7 3.3 5 7.1 6.9 11.2 7.7 16.7 10.5 38.7 10.9 66.8H407v-78zm129.9 0v30h58.5l-10-30H441zm-293 11c6 0 12 4 12 12v32h-24v-32c0-8 6-12 12-12zm40 0c6 0 12 4 12 12v32h-24v-32c0-8 6-12 12-12zm168 0c6 0 12 4 12 12v32h-24v-32c0-8 6-12 12-12zm40 0c6 0 12 4 12 12v32h-24v-32c0-8 6-12 12-12zm-355 37v30h62v-30zm400 0v30h62v-30z"}}]})(props);
};
module.exports.GiC96 = function GiC96 (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M188.644 288.505V397.78h67.373V288.505h-67.373zm-132.32-35.4v-.951c-9.554 24.886-27.426 69.693-27.426 69.693a34.188 34.188 0 1 0 65.397 16.127c1.819-13.702 8.707-65.47 11.205-84.9H56.292zm0 53.67a11.905 11.905 0 1 1 11.904 11.936 11.905 11.905 0 0 1-11.905-11.936zM36.035 147.06a15.134 15.134 0 0 0 21.845 13.588c-5.226 10.054-12.542 40.187 3.982 74.689h55.573v.073c6.542.554 11.068 12.96 14.768 22.367 4.18 10.452 17.611 14.016 23.14 14.016h101.467V130.463l-73.8-.743v-15.5H80.425v20.904H60.567v.073a15.145 15.145 0 0 0-24.53 11.863zm99.47 94.15a25.21 25.21 0 0 1 9.345-19.618 77.125 77.125 0 0 0 1.87 6.637 61.586 61.586 0 0 0 1.903 4.965 43.783 43.783 0 0 0 2.362 4.599c.44.721.857 1.421 1.338 2.09a21.134 21.134 0 0 0 1.432 1.892 18.06 18.06 0 0 0 1.494 1.662 16.138 16.138 0 0 0 1.526 1.41 13.357 13.357 0 0 0 1.516 1.15l.721.492.721.397a16.127 16.127 0 0 0 2.456 1.118 16.723 16.723 0 0 0 1.641.481l.575.146-.49-.334a16.033 16.033 0 0 1-1.35-.962 14.873 14.873 0 0 1-1.818-1.745l-.491-.544-.46-.637a11.142 11.142 0 0 1-.92-1.39 13.305 13.305 0 0 1-.836-1.589 14.695 14.695 0 0 1-.732-1.766 17.1 17.1 0 0 1-.616-1.913c-.21-.648-.335-1.348-.491-2.09a37.627 37.627 0 0 1-.596-4.37c-.094-1.504-.157-3.03-.126-4.577.032-1.547.115-3.083.24-4.589.126-1.505.314-3 .523-4.442l.22-1.41a25.252 25.252 0 1 1-20.956 24.938zM276.41 130.662l39.487 4.463H470.06v-2.247a7.42 7.42 0 0 1 7.42-7.42h1.098a7.42 7.42 0 0 1 7.421 7.42V157.073H315.896l-42.299 26.13V130.63z"}}]})(props);
};
module.exports.GiCabbage = function GiCabbage (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M199.6 20.38c-1.6-.1-2.6.43-4.6 2.33-2.4 2.18-5.3 6.26-8.3 11.03-6 9.54-12.6 23.12-27.5 26.73-13.8 3.34-25.2-3.94-34.4-8.98-9.2-5.04-15.7-7.78-20.4-6.19-4.3 1.52-7.52 6.56-11.4 14.91-3.89 8.35-7.76 19.26-17.94 26.45-8.35 5.9-17.36 5.51-23.93 6.06-3.28.28-6.02.68-7.7 1.24-1.68.56-2.14.94-2.65 1.68-7.34 10.86-7.95 33.66-4.88 56.46l6.03 2.1c5.81 2.1 11.26 4.9 16.33 8.2C85.37 126 129.1 102.5 175.9 91.84c5.8-9.43 13.8-21.64 23.3-33.93 6.5-8.37 13.6-16.73 21.3-24.22-6.9-7.85-14-12.47-20.2-13.25-.3 0-.5-.1-.7-.1zm71.3 5.08c-7.9-.1-17.3 4.07-27.1 11.69-10.5 8.14-21.1 19.83-30.3 31.77-5.2 6.71-9.7 12.94-13.4 18.56 11.8-1.58 23.7-2.39 35.4-2.38 16 0 31.7 1.52 46.6 4.51 41 8.22 83.9 29.09 118.5 58.39 7.5 6.3 14.7 13.1 21.3 20.2 2-1.2 4-2.4 6-3.4 5.2-2.5 11-4.1 16.8-4.4 5.9-.3 11.9.7 17.6 3.3 3.6 1.7 7 3.7 10.2 5.9 1.5-14 2-28.3.5-40.5-1.5-12.8-5.4-22.6-11.1-28-.6-.4-.7-.6-3.1-.3-2.5.3-6.4 1.6-10.7 3.2-4.3 1.6-9.1 3.5-14.5 4.3-5.4.8-12.4.2-17.8-4.3-5.9-4.87-8-12.29-8.2-18.5-.2-6.22.9-12.08 1.8-17.47.9-5.38 1.6-10.29 1.4-13.48-.2-3.19-.6-3.86-1.7-4.7-5.1-3.72-10.1-4.22-17.5-2.72-7.3 1.51-16.3 5.48-25.7 10-9.5 4.53-19.5 9.57-30 12.71-10.5 3.18-22 4.44-33.1 0-6.9-2.79-11.3-8.32-14.3-13.71-3-5.38-4.9-11-6.7-15.99-1.9-4.98-3.7-9.31-5.4-11.73-1.7-2.41-2.3-2.74-3.9-2.88-.5 0-1-.1-1.6-.1zm-35.1 77.84c-61.8.4-129.7 25-163.47 70.4 11.72 11.4 20.27 25.7 25.03 40 3.64 11.1-.6 21.1-3.54 29.8-2.95 8.8-4.68 16.5-3.91 19.4.73 2.7 2.69 5.2 6.49 8.1 3.8 2.9 9.2 5.8 15.1 8.8 11.6 5.9 26.2 11.8 31.8 26.5 2.4 6.2 2.8 12.7 2.4 19.2 2.7-.3 5.5-.6 8.4-.7 1 0 2.1-.1 3.1-.1 13.1 0 28.3 2.5 46.3 8.5-4.8-22.2-7.2-45.4-7-69-12.6-7.6-24.6-12.6-35.6-13.8-12-1.3-22.9 1.4-34.5 10.6l-11.2-14c13-10.4 27.3-15 41.5-14.8 2.1 0 4.1.1 6.1.3 11.7 1.2 23.1 5.4 34.4 11.3 1.3-21 4.6-42.3 9.6-63.5-10.1-7.2-18.2-10.9-25.8-11.7-8.5-.9-17.6 1.5-30.6 9.1l-9.2-15.4c13.1-7.8 25-11.9 36.7-11.8 1.7 0 3.3.1 5 .2 10 1.1 19.3 5.1 28.8 11.2 2.2-7.8 4.7-15.5 7.4-23.2l17 6c-5.3 14.9-9.6 29.9-13 44.9 8.3-2.7 16.6-4 25-4.3 1.3 0 2.6-.1 3.9-.1 19.4.2 38.7 6.1 57.5 14.4l-7.4 16.4c-29.6-13.2-56.7-18.4-83.1-5.3-3.4 20.3-4.9 40.4-4.7 60.1 11.3-5.9 23.3-9 36-9.7 1.7-.1 3.4-.1 5.2-.1h1.7c16.3.2 33.5 4.2 51 11.3l-6.8 16.6c-34.4-14-62.4-14.3-86.1 2.2 2.1 26.7 7.7 52.3 17 76.3 11.7-12.7 25.8-22.4 43.1-27.1 7.6-2.1 15.8-3.3 24.5-3.4h3.8c15.6.4 32.9 3.9 52.3 10.9 4.9-10.1 6.6-22.4 7.2-36.3.8-18.2-.5-38.5 4-57.9v-.1c4.7-19.7 16.7-45.3 32.9-65.1 2.5-3.1 5.2-6 7.9-8.8-5.9-6.2-12.3-12.2-19-17.9-32.3-27.2-72.8-46.9-110.5-54.5-13.5-2.7-28-4-42.7-3.9zM43.49 174.6c-13.38 32.2-21.86 84.2-18.55 135.2 3.58 55.3 20.85 108.9 55.93 136.8 24.03 19 68.23 32.3 107.53 31.1 4.3-.2 8.5-.5 12.7-.9 1.3-2.2 2.6-4.7 3.9-7.4-50.2-2.3-86.5-22.6-111.01-47.2-26.4-26.4-39.47-57.3-44.35-76.8L67.1 341c4.11 16.5 16.13 44.9 39.7 68.5 23 23 56.6 41.9 106.6 42.1 4.2-9.3 8.7-19.1 13.8-28.5l-.1-.1c-12.6-9.6-22.6-19.2-31.8-22.7-8.2-3.1-19.1-.9-31 1.4-5.9 1.2-12 2.4-18.4 2-6.4-.4-13.6-2.9-18.7-8.6l-.1-.1c-5.6-6.4-7-14.6-7-22.4.1-7.7 1.5-15.7 3-23.4 3.1-15.6 5.5-30.9 3.4-36.5-1.9-5.1-11.3-10.9-23.2-16.9-5.95-3-12.2-6.2-17.81-10.4-5.62-4.3-10.85-10.1-12.96-17.9-3.01-11.1 1.3-21 4.22-29.7s4.33-16.1 3.53-18.5c-5.76-17.2-19.36-35.3-36.79-44.7zm402.01 3.6c-3.1.1-6.2 1.1-9.7 2.8-7 3.4-14.7 10.2-21.7 18.8-14.1 17.2-25.6 41.7-29.3 57.9-3.7 15.8-2.8 35.1-3.6 54.6-.9 19.4-3.6 39.7-17.2 56-13.9 16.5-34.6 20.3-53.6 23.4-18.9 3.1-36.5 5.7-47.9 14.6-12.3 9.6-23.8 33.4-33.7 55-2.8 6.1-5.5 11.9-8.3 17.4 57.5-16.5 106.4-40.5 143-74.1 39.9-36.7 65.5-84.8 72.2-149.6l18 1.8c-7.2 68.6-35.1 121.6-78 161.1-36.1 33.2-82.5 56.9-135.8 73.7 81.3 1.1 145.1-28.2 188.3-82.6h.1c24-30.2 47.9-81.6 56.3-128.3 4.2-23.3 4.5-45.5-.3-63-4.7-17.5-13.7-30.2-29.6-37.6-2.8-1.3-5.4-1.9-8-1.9zM158.2 342.7c-5.8 0-11 .6-15.5 1.6h-.1c-.6 2.8-1.3 5.6-1.8 8.4-1.5 7.5-2.7 14.6-2.7 20 0 5.5 1.1 8.7 2.5 10.4 1.7 1.8 3.1 2.4 6.4 2.6 3.3.2 8.2-.5 13.9-1.6 11.3-2.3 25.9-6.2 40.8-.6 10 3.7 18.1 10.2 25.8 16.6-7.7-14.8-13.9-30.3-18.7-46.4l-.2.5c-21.1-8.2-37.5-11.4-50.4-11.5zM300.1 355c-7.3.1-13.9 1-19.9 2.7-16.3 4.5-29 14.1-39.9 27.9 1.8 3.8 3.8 7.5 5.8 11.2 1.7-1.6 3.5-3.2 5.4-4.7 16.6-13 37.6-15.1 56.1-18.1 14.5-2.4 27-5.1 36-11.4-15.3-5-28.7-7.4-40.4-7.6h-3.1z"}}]})(props);
};
module.exports.GiCableStayedBridge = function GiCableStayedBridge (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M113 41v446h30V41h-30zM95 60.35L18 114.9v22l77-54.5V60.35zm66 0V82.4L483.8 311H494v-14.7L161 60.35zM95 98.59L18 170.8v24.7l77-72.2V98.59zm66 0v24.71L361.2 311h26.4L161 98.59zm0 49.81v34.4L239.9 311h21.2L161 148.4zm-66 .1L18 273.6v34.3l77-125.1v-34.3zM18 329v30h77v-30H18zm143 0v30h333v-30H161z"}}]})(props);
};
module.exports.GiCactusPot = function GiCactusPot (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M177.6 21.72c-1.7 0-3.4.13-5.1.3-18.8 1.86-32.9 12.89-43.9 29.34l-12-22.19-15.8 8.56 17.5 32.36c-3.4 7.44-6.4 15.36-8.8 23.45l11.3 4.07-6.2 16.99-9.8-3.6c-2.9 12-4.88 23.8-6.25 34.4-.1.7-.15 1.3-.22 2l-31.25-1-.58 18 31.96 1c.86 9.4 2.74 19.7 5.44 30.4l16-5.9 6.2 16.8-17.5 6.5c4 13.1 8.8 26.3 13.8 38.8l-26.22 35.3 14.42 10.8 19.9-26.8c10.4 23.7 19.2 40.2 21.9 45.2l110.1-2.5c-1.6-4.1-3.3-8.7-5-13.8-5-15-10.1-32.7-7.7-48.1.2-1 .3-2 .5-3l17 9.2c-.1 9.1 3.2 23.9 7.3 36.2 2.9 8.9 5.6 15.4 7.5 19.8h95.4c2.1-3.3 4.7-7.6 7.7-13.2 2-3.7 3.8-7.8 5.5-11.8l26.5 19.2 10.6-14.6-31.8-23v-1.6c-.4-10.2-1.4-21.8-3.3-33.7l-13.5 2.8-3.6-17.6 13.8-2.9c-.8-3.8-1.8-7.6-2.8-11.3l26.3-10-6.4-16.8-25.3 9.6c-.5-1.5-1.1-3-1.7-4.5-5.3-13-12-24.3-19.7-32-1.3-1.3-2.7-2.5-4-3.6l-4.1 14.4-17.4-5 5-17.5c-2-.4-4.1-.6-6.2-.7h-1.7l-5-38.3-17.8 2.4 5.4 41.3c-1.9 1.1-3.6 2.5-5.4 4.1-7.4 6.5-14 16.4-19.6 28.1-3.3 7-6.2 14.5-8.8 22.3l11.3 5.1-7.4 16.4-9-4c-1.9 7.3-3.5 14.6-4.8 21.5l-16.6-8.9c4-19.6 10.1-41.2 19-60.1 4.3-8.9 9.2-17.3 15.1-24.5-.1-2.6-.2-5.2-.4-7.6-.2-3-.5-6-1.1-9.1l11-4-6.2-17-9.4 3.4c-2.1-6-4.8-12.11-7.8-18.14l38.9-33.59L301 46.24l-36.4 31.42c-4.6-6.83-9.7-13.39-15.3-19.43-1.1-1.24-2.3-2.45-3.5-3.64l-5.2 13.84-16.8-6.36 7.6-20.21c-15.1-11.55-31.9-19-48.7-20.03-1.7-.1-3.4-.14-5.1-.11zm-3 34.66l16.6 7.14-16.5 38.18-16.6-7.15zm1.9 86.32l21.2 24.9-13.8 11.6-21.2-24.9zm152.8 35.2l14 11.2-20.4 25.5-14-11.2zm-94 3.3l9.6 15.2-38.1 23.8-9.6-15.2zm-63.6 66.1l10.6 14.4-24.4 18-10.6-14.4zm174.2 24.6l23.3 15.4-10 15-23.3-15.4zM105 332.3v46h302v-46zm34.9 64l26.9 94h178.4l26.9-94z"}}]})(props);
};
module.exports.GiCactusTap = function GiCactusTap (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M164.7 25.21c-3.8 0-7.6.36-11 1.12l8.2 21.01-16.8 6.54-7.4-18.95c-5.2 5.6-9.2 13.25-12.1 22.4-2.7-1.75-5.2-3.36-8.3-5.36-4.9-3.19-10-6.48-13.9-9.14-1.9-1.33-3.62-2.51-4.83-3.39-.92-.67-1.74-1.42-1.75-1.4 0 0 .1.11.28.32l-13.05 12.4c1.61 1.7 2.44 2.15 3.93 3.23 1.48 1.08 3.29 2.34 5.35 3.73 4.11 2.79 9.17 6.13 14.17 9.36 5.4 3.5 10.3 6.63 14 8.98-.1 1.04-.3 2.09-.4 3.15-2.3 20.02-1.1 43.29 1.7 65.29 2.3 18.7 5.8 36.3 9 50.5-5.6 0-10.6-.1-10.6-.1l-.2 18s6.3.1 12.9.1h2.2c2.2 8.7 3.8 13.9 3.8 13.9l3.8 12.5-13-.9c-15.6-1.1-27-8.7-31.85-19.3-4.9-10.6-4.54-22.3-3.66-34 .87-11.7 2.52-23.6 2.52-33.8 0-9.9-1.73-17.6-5.73-22.6-.65-.6-5.91-3-11.95-4.1l-17.3-25.69L47.79 109l14.05 20.9c-6.94 29.7-9.9 56.1-9.14 78.3l6.15-4.3 10.32 14.8-14.5 10.1c1.52 9.2 3.86 17.5 7.01 24.6 3.8 8.6 8.61 15.8 14.6 21.6L65.2 297.9l16.2 7.8 9.85-20.3c12.35 5.8 28.05 8 47.95 6.1l11.6-1-1.9 11.5c-3 17.9-5.1 34.6-6.2 50.5l13.1-6.3 7.8 16.2-22 10.6c-.2 7.2-.3 14.2-.2 21.2h-.6c-7.9-.3-15.5-.6-15.5-.6l-.8 18s7.7.3 15.7.6c.7 0 1.2 0 1.9.1 1.3 24.7 4.5 48.8 8.8 74.5l79.9-.5c7-29.2 10.7-61.1 12.1-94.1h-9.6c-11 0-20.2-6.2-25.1-14.3-5-8-6.7-17.6-6.4-27 .3-9.4 2.6-18.7 7.6-26.5 4.9-7.8 13.5-14.2 23.9-14.2h8.1c-.6-8.9-1.4-17.8-2.3-26.6 9.4 3.5 18.4 7.1 18.4 7.1l6.6-16.8s-9.4-3.7-19.2-7.4c-2.8-1-5.5-2-8.1-2.9-.7-4.9-1.3-9.6-2-14.4l-1.3-8.9 8.9-1.3c15-2.2 26.5-10.4 35.7-23.3 9.2-12.8 15.6-30.2 19.1-48.7 1.3-6.8 2.1-13.7 2.5-20.6l24 .9.8-18-24.5-1c-.2-7.3-.9-14.4-1.9-21l-8.8 4.1-7.6-16.32 12.3-5.77c-2.1-7.25-4.8-13.36-7.9-17.76-4.3-5.13-12.5-9.95-21-11.94-.2-.1-.5-.1-.7-.15-.1-10.58-.3-23.03-.3-27.5h-18c0 5.04.2 17.76.3 28.29-1.1.44-2.1.96-3 1.56-5.8 3.92-9.4 11.99-11 23.86-1.6 11.88-.9 26.63.1 40.93s2.5 28 1.9 39.2c-.4 5.7-1 10.8-3.6 15.7-2.5 4.9-8.9 9.2-15.1 9.1h-.7c-8.1-.9-15.3-4.4-19.8-10s-6.3-12.5-6.8-19.5c-1-14 2.6-29.9 6.3-46.5 3.7-16.56 7.7-33.69 8.5-47.99.8-14.3-1.5-24.68-8-30.77-6.1-5.81-17.3-10.03-28.4-10.57-.7 0-1.4-.1-2.1-.1zm87.8 72.02l18.6 37.47-16.2 8-18.6-37.5zm-98 22.27l14.6 10.4-12.9 18.1-14.6-10.4zm90.3 69.4l13.6 11.8-16.8 19.2-13.6-11.8zm-74.6.5l19 34.5-15.8 8.6-19-34.5zm-53.4 55.1l3.2 17.7c-8.3 1.6-22.45 3.9-32.63 5l-2.02-17.8c9.34-1.1 23.55-3.4 31.45-4.9zm164.5 1.7v18h39v30h18v-30h39v-18zm-116.1 13.6l29.3 12.3-7 16.6-29.3-12.3zm125.1 52.4v78h78v-78zm-57 16c-3.6 0-6.1 1.6-8.8 5.8-2.6 4.2-4.5 10.9-4.7 17.5-.2 6.6 1.3 13 3.7 17 2.5 3.9 4.8 5.7 9.8 5.7h39v-46zm153 1.6v45.9c8.6 1.2 15.8 3.6 21.4 9.1 6.1 6.2 8.4 14.5 9.5 24.4.9 7.8 1 17.6 1.1 29h45.9c-.2-42.4-1.8-70.2-13.9-85.4-6.6-8.1-16.4-14.2-33.2-18.4-8.5-2.1-18.7-3.6-30.8-4.6zm-199.4 91c0-.1 6.5 6.9 12 12.5 5.4 5.7 10.5 10.9 10.5 10.9l-12.8 12.6s-5.2-5.3-10.7-11c-5.4-5.6-10.4-10.6-12.8-13.6z"}}]})(props);
};
module.exports.GiCactus = function GiCactus (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M348.77 14.06l-5.854 17.163C332.126 22.93 318.623 18.01 304 18c-15.35.016-29.457 5.454-40.496 14.512l-15.602-13.567-11.81 13.584 15.228 13.238c-5.303 7.707-8.958 16.64-10.465 26.306h-23.263v18H240V192h-16.023c-24.42 0-31.977-5.767-31.977-31.857v-26.127h9.064v-18h-10.59c-1.455-5.342-3.874-9.798-6.947-13.358l-7.373 13.358h-3.334l-13.203-7.286 8.63-15.636c-9.775-2.624-20.645-.482-28.624 6.412l-13.264-11.53-11.81 13.583 15.31 13.31c-1.187 3.886-1.86 8.254-1.86 13.13v21.71h-19.46v18H128V192c0 31.09 6.727 48.742 24.484 57.33L141.5 267.068l15.303 9.477 13.62-21.99c6.328.98 13.464 1.445 21.522 1.445 21.323-.077 42.648.162 63.97 0l.17 18s-8.49.07-16.085.137v75.052h-25.68v18H240v60.587h-15.488v18H240v49.368h128v-12.057h13.7v-18H368v-26.48h23.572v-18H368V316.62h-25.99v-18H368v-15.71h14.97v-18H368v-28.89h25.504v-18H368V137h16v-18h-16V88.008h-23.488v-18h22.314c-1.662-8.766-5.116-16.88-9.945-23.975l8.927-26.16-17.036-5.812zM309.35 43.093l.875 31.986-17.994.492-.876-31.988 17.994-.49zm-46.627 61.306h32v18h-32v-18zm53.852 69.182h32v18h-32v-18zm-169.717 11.035h32v18h-32v-18zm88.553 30.184h32v18h-32v-18zm230.022 12.733l-9.116 20.48c-.105 0-.21-.013-.314-.013-6.622 0-13.238 2.44-17.844 7.313l-12.76-11.094-11.81 13.583L432 273.813v46.275c0 12.18-7.97 15.912-16.395 15.912H386v48h32.994l.12 19.742 18-.11-.12-19.786C465.712 382.176 480 366.232 480 336v-18.223h16.512v-18H480V272c0-7.636-2.736-13.446-6.898-17.438l8.773-19.71-16.445-7.32zm-19.61 83.985l18 .113-.2 32-18-.112.2-32zm-152.472 19.574l.875 31.986-17.994.492-.876-31.988 17.994-.49zm26.312 49.496h32v18h-32v-18zm-62.574 32.453h32v18h-32v-18z"}}]})(props);
};
module.exports.GiCadillacHelm = function GiCadillacHelm (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M256 105c-117.2 0-173.246 53.452-202.066 107.25-21.827 40.743-27.162 81.332-28.479 98.75h461.09c-1.317-17.418-6.652-58.007-28.479-98.75C429.246 158.452 373.2 105 256 105zm42 151s15.334 15.333 15.334 30.666h-46C298.001 271.333 298 256 298 256zm-83.666.666s0 15.335 30.666 30.668h-46c0-15.333 15.334-30.668 15.334-30.668zM201.115 329c.16 4.592.503 10.464 1.313 16.781 1.73 13.51 6.81 27.767 11.111 31.125 10.54 8.23 26.436 12.864 42.461 12.864s31.921-4.635 42.46-12.864c4.302-3.358 9.381-17.614 11.112-31.125.81-6.317 1.153-12.189 1.313-16.781h-109.77zM256 336c15.085 0 32 32 32 32-16-16-48-16-64 0 0 0 16.915-32 32-32z"}}]})(props);
};
module.exports.GiCaduceus = function GiCaduceus (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M202.412 21.06c-2.189.065-4.715.577-7.795 1.643C149.244 38.411 80.172 79.747 18.965 98.262c10.858 6.727 22.689 12.663 34.941 17.37 13.696-6.286 27.073-12.537 38.414-18.808 13.887-7.678 24.612-15.672 29.078-22.199l13.204 9.035c-7.33 10.712-19.785 19.009-34.54 27.166-7.337 4.057-15.276 8.01-23.468 11.904 7.515 1.809 15.064 3.09 22.533 3.707 3.378.28 6.732.43 10.057.456 15.845-9.826 30.838-22.51 35.67-31.631l14.138 7.488c-3.464 6.54-8.679 12.826-14.933 18.695 15.63-5.498 29.79-15.436 41.54-31.103l7.235-9.647 6.076 10.416c4.704 8.064 11.043 14.811 18.235 20.618 5.332-.816 10.034-1.374 14.855-1.649V79.084c-9.7-7.317-16-18.93-16-31.941a39.612 39.612 0 0 1 3.068-15.305c-2.539-3.553-5.16-6.348-7.793-8.072-2.172-1.423-4.325-2.385-6.941-2.643a15.694 15.694 0 0 0-1.922-.063zm106.258 0c-.342.01-.677.03-1.004.063-2.616.258-4.769 1.22-6.941 2.643-2.634 1.724-5.254 4.52-7.793 8.072A39.612 39.612 0 0 1 296 47.143c0 13.011-6.3 24.624-16 31.941v30.996c5.003.289 10.454.932 14.855 1.649 7.192-5.807 13.531-12.554 18.235-20.618l6.076-10.416 7.234 9.647c11.75 15.667 25.911 25.605 41.541 31.103-6.254-5.869-11.47-12.155-14.933-18.695l14.138-7.488c4.832 9.122 19.825 21.805 35.67 31.63a134.06 134.06 0 0 0 10.057-.454c7.47-.619 15.018-1.9 22.533-3.708-8.192-3.894-16.131-7.847-23.469-11.904-14.754-8.157-27.208-16.454-34.539-27.166l13.204-9.035c4.466 6.527 15.19 14.521 29.078 22.2 11.34 6.27 24.718 12.52 38.414 18.808 12.252-4.708 24.083-10.644 34.941-17.371-61.207-18.515-130.279-59.85-175.652-75.559-3.52-1.219-6.317-1.711-8.713-1.642zM256 24c-13.35 0-24 10.65-24 24s10.65 24 24 24 24-10.65 24-24-10.65-24-24-24zm-8 62.332v24.64c2.793.606 5.759 1.61 8 2.89 2.681-1.483 5.28-2.266 8-2.89v-24.64c-2.587.53-5.263.81-8 .81s-5.413-.28-8-.81zm-12.547 39.654a76.025 76.025 0 0 0-4.674.2c-12.862.942-28.802 5.08-35.353 8.185-14.907 7.066-21.148 13.791-24.215 19.988-3.067 6.198-3.211 12.802-3.211 20.784 0 9.333 4.299 16.218 12.146 22.812 7.848 6.594 19.157 12.141 30.8 16.75 21.493 11.283 44.162 22.942 62.048 35.984 4.915 3.475 11.183 5.658 15.998 8.178 4.717-4.959 7.008-9.53 7.008-13.724 0-2.5-.667-5.262-1.893-8.182-12.214-23.082-35.176-34.215-59.312-47.52l-.057.063c-10.371-4.023-20.014-6.361-26.738-6.361l-3.578-15.157c15.833-7.916 27.435-14.553 34.338-20.877 6.756-6.188 9.266-11.253 9.209-19.312-4.007-1.756-8.557-1.851-12.516-1.81zm41.094 0c-4.174.141-9.299.064-12.516 1.81-.057 8.06 2.453 13.125 9.21 19.313 6.902 6.324 18.504 12.961 34.337 20.877L304 183.143c-7.963 0-20.012 3.269-32.525 8.744 10.05 6.432 19.599 13.926 27.498 23.611.695-.268 1.387-.518 2.082-.793 11.642-4.609 22.95-10.156 30.799-16.75C339.7 191.361 344 184.475 344 175.143c0-7.982-.144-14.586-3.21-20.784-3.068-6.197-9.309-12.922-24.216-19.988-6.55-3.105-22.491-7.243-35.353-8.185a75.995 75.995 0 0 0-4.674-.2zM256 151.77a49.262 49.262 0 0 1-6.434 7.138c-.508.466-1.035.926-1.566 1.383v17.15a160.265 160.265 0 0 1 8.008 3.92 163.653 163.653 0 0 1 7.992-3.92v-17.15a68.078 68.078 0 0 1-1.566-1.383A49.264 49.264 0 0 1 256 151.77zm-37.537 83.896c-1.594 3.4-2.463 6.61-2.463 9.477 0 4.833 3.03 10.165 9.322 16.015 6.292 5.85 15.368 11.666 24.686 17.06 9.318 5.395 18.832 10.38 26.472 15.339 3.82 2.48 7.189 4.92 9.995 7.81 2.806 2.89 5.525 6.609 5.525 11.776 0 4.25-2.151 8.289-4.693 10.804-2.543 2.516-5.357 4.063-8.274 5.467-2.293 1.104-4.71 2.104-7.16 3.098 6.558 4.82 12.595 10.053 17.467 15.232 2.72-1.247 5.468-2.497 8.181-3.807 6.982-3.37 13.564-7.126 17.93-11.242 4.367-4.115 6.549-7.97 6.549-13.552 0-9.945-3.598-17.446-9.586-24.297-5.988-6.852-14.492-12.712-23.363-17.746-8.87-5.035-17.995-9.213-25.438-13.438-3.721-2.112-7.045-4.194-9.908-6.88-.146-.138-.29-.291-.435-.434-10.483-7.04-23.998-15.262-34.807-20.682zm2.406 42.647c-8.107 4.759-15.766 10.22-21.283 16.533-5.988 6.85-9.586 14.352-9.586 24.297 0 5.583 2.182 9.437 6.549 13.552 4.366 4.116 10.948 7.872 17.93 11.243 2.64 1.274 5.3 2.493 7.94 3.708 19.051 9.787 36.7 19.107 53.985 23.813 4.034-1.373 4.848-5.133 3.936-9.729-14.856-14.943-29.808-23.803-47.373-32.316-2.917-1.404-5.731-2.951-8.274-5.467-2.542-2.515-4.693-6.554-4.693-10.804 0-5.167 2.72-8.885 5.525-11.776 2.806-2.89 6.174-5.33 9.995-7.81a158.19 158.19 0 0 1 4.373-2.721c-6.53-3.83-13.092-7.935-19.024-12.524zM256 299.998c-2.85 1.615-5.56 3.17-8 4.64v13.602c.75.346 1.504.714 2.258 1.082 1.845.76 3.75 1.558 5.74 2.461 2.81-1.274 5.521-2.389 8.002-3.388v-13.756a336.594 336.594 0 0 0-8-4.641zm-17.795 73.816c.588 4.245 2.564 8.12 5.824 12.147 3.933 4.857 9.67 9.59 15.723 14.059 6.053 4.469 12.365 8.641 17.643 13.166 5.277 4.524 10.605 9.79 10.605 17.957 0 9.9-5.82 17.934-12.969 27-7.148 9.065-16.35 18.536-25.51 27.273-2.047 1.953-3.986 3.667-6.005 5.53 8.23-4.31 16.77-9.533 24.816-15.385C290.729 459.27 308 437.905 308 423.143c0-4.467-1.67-8.043-4.982-11.957-3.312-3.915-8.27-7.772-13.592-11.48-5.322-3.71-10.947-7.234-15.762-11.368-.558-.48-1.115-.98-1.666-1.494-12.987-3.453-23.893-8.06-33.793-13.03zm-7.873 20.582c-2.574 1.786-5.2 3.527-7.758 5.31-5.321 3.708-10.28 7.565-13.592 11.48-3.311 3.914-4.982 7.49-4.982 11.957 0 7.314 3.964 16.342 11.316 25.61 6.386 8.05 15.135 16.148 24.827 23.481a384.732 384.732 0 0 0 5.076-4.976c-2.796-3.028-5.456-6.053-7.871-9.033C230.003 449.162 224 441.16 224 431.143c0-8.167 5.328-13.433 10.605-17.957 2.485-2.13 5.21-4.181 8.018-6.223-3.918-3.258-7.718-6.846-11.027-10.934-.431-.532-.85-1.079-1.264-1.633zm25.662 22.666c-2.896 2.081-5.66 4.071-7.994 5.872v22.921c.565.76 1.152 1.525 1.777 2.297 1.95 2.407 4.133 4.909 6.467 7.457 2.24-2.519 4.349-4.995 6.225-7.375.536-.68 1.04-1.353 1.531-2.023v-23.277c-2.346-1.81-5.09-3.778-8.006-5.872z"}}]})(props);
};
module.exports.GiCaesar = function GiCaesar (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M264.234 33.64a94.945 94.945 0 0 0-10.957.608C190.895 41.376 131.82 93.06 100.975 152.756c.118-.095.234-.193.353-.287l7.463-5.899 5.477 7.778c1.554 2.208 2.872 4.663 4.033 7.34 7.928-17.487 21.63-34.571 40.363-46.084l7.61-4.676 4.734 7.572c2.502 4.003 4.31 8.702 5.713 14.016 9.889-16.645 25.602-32.252 45.758-41.608l8.101-3.76 3.822 8.073c.153.323.298.652.442.982 9.782-13.132 23.275-24.935 39.728-32.572l8.102-3.762 3.822 8.072c1.356 2.864 2.351 6.017 3.104 9.416 8.43-10.724 19.573-20.548 32.812-27.744-18.601-9.895-38.4-15.936-58.178-15.972zm140.498 19.813c-21.58 4.89-40.88 18.458-50.029 31.264-5.337 7.47-6.704 14.015-5.808 17.388.895 3.374 3.457 6.667 14.306 8.53 3.785.65 8.053-.756 13.291-5.094 5.239-4.338 10.728-11.384 15.358-19.36 4.629-7.974 8.462-16.865 10.949-24.75.915-2.9 1.414-5.45 1.933-7.978zm-71.066 10.74c-19.686 10.104-35.007 28.047-40.684 42.725-1.002 2.592-1.669 5.007-2.07 7.205-.134 1.34-.288 2.68-.46 4.022-.123 3.113.378 5.538 1.23 7.058 1.706 3.045 5.005 5.597 15.976 4.703 3.827-.312 7.612-2.734 11.608-8.238 3.995-5.505 7.56-13.695 10.06-22.57 2.5-8.876 4-18.44 4.45-26.696.164-3.037.016-5.63-.11-8.209zm-61.148 21.221c-15.32 10.048-27.077 25.116-32.995 38.63.178 8.541-.428 17.78-1.966 26.833-.003.02-.008.039-.012.059 2.075 2.643 5.784 4.535 16.084 2.58 3.772-.716 7.28-3.525 10.668-9.422 3.388-5.898 6.065-14.421 7.61-23.512 1.544-9.09 2.021-18.762 1.591-27.018-.158-3.037-.581-5.6-.98-8.15zm-52.096 27.28c-18.503 12.135-31.833 31.6-35.92 46.798-2.384 8.867-1.373 15.474.646 18.32 2.02 2.847 5.57 5.036 16.385 2.983 3.773-.716 7.28-3.527 10.668-9.424 3.389-5.897 6.065-14.419 7.61-23.51 1.544-9.09 2.021-18.761 1.591-27.017-.158-3.038-.581-5.6-.98-8.15zm172.715 1.915a64.957 64.957 0 0 1-5.164 4.795c-7.692 6.37-17.404 10.759-27.819 8.971a53.37 53.37 0 0 1-5.308-1.19c-.211.553-.393 1.083-.545 1.585 9.883 3.882 19.338 8.95 27.293 14.312.488.329.951.657 1.427.986 14.312-1.453 31.422-7.418 45.325-17.963-2.27-1.23-4.543-2.485-7.352-3.652-7.635-3.17-16.909-5.96-25.992-7.549-.624-.109-1.244-.198-1.865-.295zm-233.983 22.87c-16.968 14.203-27.946 35.087-30.238 50.658-1.337 9.083.435 15.528 2.772 18.12 2.336 2.593 6.118 4.353 16.62 1.057 3.664-1.15 6.82-4.348 9.5-10.6 2.68-6.25 4.35-15.025 4.827-24.234.477-9.208-.174-18.869-1.56-27.02-.511-2.998-1.228-5.495-1.92-7.981zm167.551 2.595c-4.894 4.226-10.774 7.219-17.586 7.774-.776.063-1.542.098-2.305.129-4.164 5.764-3.952 9.104-2.789 11.761 1.4 3.198 6.544 7.467 15.371 9.99 15.132 4.326 38.685 2.928 58.618-6.681-1.981-1.656-3.96-3.338-6.483-5.04-6.855-4.62-15.39-9.193-23.978-12.552-7.288-2.85-14.632-4.777-20.848-5.38zm86.656 15.182a106.836 106.836 0 0 1-13.511 4.318c.112.164.23.326.34.49l4.949 7.434-7.397 5.006c-20.412 13.818-44.598 18.985-65.494 17.557 1.179 1.786 2.212 3.592 3.055 5.435l3.713 8.123-8.094 3.776c-18.069 8.427-37.682 10.878-55.32 9.015 3.324 5.162 5.82 10.156 7.115 15.174l2.232 8.648-8.63 2.3c-16.504 4.394-33.356 4.273-48.56 1.052 2.399 4.105 4.226 8.128 5.268 12.166l2.233 8.648-8.631 2.3c-17.359 4.621-35.103 4.246-50.908.525 3.2 5.494 5.503 10.687 6.41 16.017l1.59 9.344-9.414 1.103c-29.326 3.442-58.181-6.708-75.637-21.18-4.087-3.387-7.717-7.113-10.414-11.218 17.989 59.19 62.717 123.576 62.717 123.576l-35.479 68.797c49.496 25.554 105.19 38.708 170.56 32.514-1.767-32.096 16.473-55.814 33.022-74.514-14.59-.975-29.987-2.226-44.846-5.064-16.51-3.155-32.54-8.341-46.003-18.032-13.464-9.69-24.033-24.105-28.956-43.7l17.458-4.387c3.99 15.88 11.622 26 22.011 33.478 10.39 7.478 23.863 12.094 38.87 14.961 25.516 4.875 54.75 4.428 79.554 7.643 26.748-2.02 57.07 2.601 63.441-8.596 15.568-27.36 5.054-63.93-3.44-92.492 18.463-.61 28.178-1.69 38.735-4.967-8.607-34.5-21.86-54.883-43.703-73.5 1.629-20.453 4.194-42.05 1.164-61.75zm-143.705 10.031c-3.632 2.872-7.843 4.998-12.672 5.914-5.147.977-10.06 1.154-14.574.598-2.391 3.278-2.569 5.739-2.08 7.879 3.149 2.201 6.213 4.6 9.176 7.135a140.092 140.092 0 0 1 7.195 6.628c14.405 5.749 36.32 7.451 56.233 1.496-1.694-1.947-3.382-3.92-5.604-5.998-6.039-5.646-13.746-11.51-21.695-16.183-5.387-3.167-10.897-5.746-15.979-7.469zm-165.892 9.828C91.6 189.035 84.35 207.673 83.58 221.33c-.47 8.343 1.653 14.076 3.498 15.916 1.846 1.84 4.091 3.065 12.469-.613 2.48-1.089 4.922-4.003 6.73-9.848 1.808-5.845 2.59-13.96 2.32-22.369-.268-8.409-1.532-17.143-3.308-24.436-.448-1.84-1.006-3.23-1.525-4.865zm117.484 14.098c-4.367 4.56-9.797 8.02-16.357 9.266-4.519.857-8.861 1.105-12.909.779.005.14.01.28.02.418.17 2.194 1.611 5.283 4.533 8.59 1.106.886 2.201 1.789 3.281 2.713a137.466 137.466 0 0 1 3.963 3.544c12.956 8.865 35.325 15.08 57.012 12.59-1.326-2.214-2.642-4.454-4.465-6.888-4.955-6.618-11.512-13.74-18.52-19.735-5.473-4.682-11.249-8.637-16.558-11.277zm-51.684 23.215c-3.888 5.477-9.097 9.938-15.865 12.062-3.643 1.144-7.216 1.857-10.646 2.15 1.39 3.355 4.753 7.65 10.494 11.69 12.87 9.058 35.571 15.474 57.555 12.95-1.327-2.215-2.642-4.455-4.465-6.89-4.956-6.617-11.515-13.74-18.522-19.734-6.165-5.274-12.72-9.645-18.55-12.228zm-48.607 26.136c-2.982 6.2-7.496 11.62-14.174 14.551-.504.222-1.01.415-1.515.615a34.936 34.936 0 0 0 4.89 4.92c10.574 8.766 29.946 16.537 49.654 17.452-.717-1.297-1.208-2.436-2.085-3.8-3.937-6.115-9.315-12.875-15.207-18.734-5.892-5.858-12.349-10.798-18.014-13.533a32.419 32.419 0 0 0-3.549-1.47zm-48.676 9.061l-33.43 21.395 9.704 15.162 38.591-24.698a30.468 30.468 0 0 1-1.767-3.634c-4.235-.94-8.022-2.876-11.012-5.858a26.53 26.53 0 0 1-2.086-2.367z"}}]})(props);
};
module.exports.GiCage = function GiCage (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119 75v64H55v346h402V139h-64V75H128zm18 18h46v46h-46zm64 0h46v46h-46zm64 0h46v46h-46zm64 0h46v46h-46zM73 157h46v18H73zm64 0h46v18h-46zm64 0h46v18h-46zm64 0h46v18h-46zm64 0h46v18h-46zm64 0h46v18h-46zM73 193h46v46H73zm64 0h46v46h-46zm64 0h46v46h-46zm64 0h46v46h-46zm64 0h46v46h-46zm64 0h46v46h-46zM73 257h46v46H73zm64 0h46v46h-46zm64 0h46v46h-46zm70.508 0h96.984l-26.287 46h20.73L375 281.889v156.22L362.937 417h-20.732l26.287 50h-96.984l26.287-50h-20.733L265 438.11V281.888L277.064 303h20.73zM393 257h46v46h-46zM73 321h46v46H73zm64 0h46v46h-46zm64 0h46v46h-46zm88 0v78h62v-78zm104 0h46v46h-46zm-73 10.043c7.732 0 14 6.268 14 14a14 14 0 0 1-5.19 10.87l5.19 31.13h-28l5.19-31.135a14 14 0 0 1-5.19-10.865c0-7.732 6.268-14 14-14zM73 385h46v46H73zm64 0h46v46h-46zm64 0h46v46h-46zm192 0h46v46h-46zM73 449h46v18H73zm64 0h46v18h-46zm64 0h46v18h-46zm192 0h46v18h-46z"}}]})(props);
};
module.exports.GiCagedBall = function GiCagedBall (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M254.9 19.84c-1.3 0-2.7 0-4 .1-80.8 1.83-158.74 44.5-202.05 119.46-66.01 114.4-26.8 260.8 87.55 326.8 113 65.3 257.5 27.6 324.5-83.8 1.1-1.4 2-3.1 2.7-4.5 63.6-111.2 28.1-252.4-79.1-320.59-6.1-4.25-12.4-7.85-18.9-10.81-33.9-17.87-76.6-26.55-110.7-26.66zm25.6 19.97c-14.1 3.2-28.2 8.29-42.1 15.06-10.9 5.33-21.7 11.72-32.2 19.07-5.7-.47-11.3-.76-16.9-.85-6.7-.1-13.4 0-19.9.5-15.8 1.09-30.8 3.87-44.8 8.28 36.8-27.32 81.2-42.37 126.7-43.37 9.9-.13 20.6.37 29.2 1.31zm52.1 16.07c-13.1 7-27 18-41.8 32.31-1.4 1.37-2.8 2.79-4.2 4.22-17.3-6.49-34.6-11.35-51.6-14.57 3.9-2.21 7.8-4.28 11.7-6.18 21.5-10.53 43-16.36 63.3-17.13 7.4 0 15.2.2 22.6 1.35zm31.5 10.96c1.7.49 3.2 1.49 4.2 2.47 3.1 3.07 5.7 9.09 6.4 19.38.8 12.01-1.1 28.51-5.9 48.01-9.7-7-19.9-13.7-30.7-19.9-10.8-6.2-21.7-11.8-32.7-16.7C319.9 86.28 333.2 76.28 344 71c5.6-2.74 10.2-4.12 13.9-4.53 2.1-.23 4.3-.14 6.2.37zm29.4 24.1c17.1 20.86 27.1 49.36 29.4 82.46.3 4.3.5 8.8.5 13.2-11.3-13.1-24.2-25.7-38.5-37.5l1.5-5.7c5-20 7.6-37.6 7.1-52.46zm-210.2.81c-13.1 11.25-25.6 24.05-37.2 38.35-1.9-.5-3.7-1-5.4-1.5-16.2-4.1-30.9-6.5-43.73-7-2.98-.1-5.85-.1-8.63 0 20.86-17.1 49.26-27.06 82.36-29.35 4.4-.26 8.8-.46 12.6-.5zm28.1 1.47c19.8 2.19 40.4 6.88 61.1 13.98-10.1 11.3-20.5 23.9-30.8 37.7-10.8 1.3-21.1 4-30.8 8-15.7-6.7-30.9-12.4-45.2-17 14.7-15.9 30.6-31.4 45.7-42.68zm79.9 21.18c12.6 5.3 25.1 11.5 37.5 18.6 12.3 7.1 23.9 14.8 34.6 23-3.5 11.7-8 24.2-13.2 37.3-19.2-27.1-49.7-45.7-84.6-48.7 8.7-11.1 17.3-21.2 25.7-30.2zm142.2 13.7c33 44.8 48 100.7 41.7 156-3.2-14.3-8.4-28.6-15.3-42.7-5.2-10.8-11.5-21.5-18.7-31.9 1-12.8 1.2-25.3.3-37.4-1-15.4-3.7-30.2-8-44zM96.19 140.3c10.51.4 23.21 2.4 37.51 5.9-7 9.6-13.6 19.8-19.8 30.5-6.2 10.8-11.8 21.7-16.68 32.7C83.48 195 73.57 181.7 68.31 171c-5.04-10.3-5.5-17.2-3.75-21.3.38-.7.78-1.4 1.13-2 2.7-3.5 8.87-6.5 20.28-7.3 3.46-.2 7.07-.3 10.22-.1zM153 151.5c11.5 3.5 23.8 7.9 36.7 12.9-27.3 18.8-46.2 48.8-49.9 83.4-10.3-8.2-19.8-16.4-28.3-24.3 5.3-12.6 11.5-25.1 18.6-37.5 7.1-12.2 14.7-23.7 22.9-34.5zm226.1 17.3c16.6 14.3 30.9 29.8 42.7 45.9-2.2 19.7-6.9 40.2-14.1 60.9-11.1-10.1-23.6-20.3-37.2-30.6-1.5-10.8-4.4-21.2-8.6-30.9 6.8-15.8 12.5-31 17.2-45.3zM53.16 182.3c7 13.1 18.01 27.1 32.34 41.9 1.3 1.4 2.64 2.7 4 4-6.49 17.4-11.34 34.7-14.56 51.7-2.15-3.8-4.17-7.6-6.03-11.4-14.56-29.8-20.15-59.5-15.75-86.2zm-16.28 51.6c3.19 14.3 8.31 28.7 15.21 42.8 5.29 10.8 11.62 21.5 18.91 32-1.03 12.6-1.14 24.9-.31 36.7 1.1 16 3.93 31.3 8.47 45.5-33.52-45-48.68-101.3-42.28-157zm400.32 4.4c2.1 3.7 4.1 7.5 6 11.3 14.5 29.7 20.1 59.3 15.7 85.9-7-13.1-18-27-32.3-41.8-1.3-1.3-2.6-2.7-4-4 6.5-17.3 11.3-34.5 14.6-51.4zm-332.9 4c10.7 9.6 22.5 19.3 35.4 29.1 1.2 12.4 4.3 24.3 9.1 35.3-6.2 14.8-11.5 29.1-15.9 42.6-16.5-14.3-30.8-29.8-42.59-45.7 2.19-19.9 6.85-40.5 13.99-61.3zm266.8 26.9c10.8 8.5 20.7 17 29.5 25.2-5.2 12.4-11.4 24.9-18.5 37.1-7.1 12.4-14.9 24.1-23.2 34.9-11-3.4-22.8-7.5-35.1-12.3 26.7-19.5 44.7-50.1 47.3-84.9zm43.8 39.2c13.7 14.4 23.6 27.8 28.9 38.6 5.1 10.4 5.5 17.3 3.6 21.4-.2.6-.5 1.1-.8 1.6-2.7 3.6-8.8 6.8-20.5 7.6-11.9.8-28.4-1.1-47.8-5.9 7.1-9.7 13.8-20 20-30.8 6.2-10.7 11.7-21.6 16.6-32.5zm-254.3 19.1c19 26.8 49.1 45.1 83.6 48.4-8.1 10-16.1 19.3-23.8 27.6-12.4-5.2-24.9-11.4-37.1-18.4-12.3-7.2-24-14.9-34.8-23.1 3.3-10.9 7.4-22.4 12.1-34.5zm-71.73 4.2c11.23 13 24.03 25.5 38.23 37.2-.5 1.8-.9 3.5-1.4 5.3-5 19.9-7.5 37.5-7 52.3-17.1-20.9-27.07-49.3-29.36-82.3-.28-4.1-.42-8.3-.47-12.5zM303.5 366c14.9 6.3 29.2 11.6 42.8 16-14.4 16.6-30 31-46 42.8-19.8-2.2-40.4-6.9-61.1-14.1 9.5-10.5 19.1-22.2 28.8-35 12.5-1.3 24.5-4.7 35.5-9.7zm-160.3 15.3c9.7 7.1 20 13.7 30.7 20 10.7 6.1 21.5 11.6 32.4 16.5-14.3 13.6-27.6 23.5-38.2 28.7-10.4 5.1-17.3 5.5-21.4 3.7-.6-.3-1.4-.7-1.8-1-3.6-2.7-6.7-8.8-7.5-20.4-.8-11.8 1.1-28.2 5.8-47.5zm222.6 6.5c18.2 4.9 40.2 9.1 58.1 8.6-20.9 17.1-49.4 27.1-82.5 29.4-4.3.3-8.6.5-13 .5 13.1-11.3 25.7-24.2 37.4-38.5zm-140.7 37.7c17.3 6.5 34.5 11.4 51.5 14.6-3.7 2.1-7.4 4-11 5.8-29.8 14.6-59.5 20.1-86.2 15.8 13.1-7 27.1-18.1 41.9-32.4 1.3-1.2 2.5-2.5 3.8-3.8zm162.3 10.8c-45.1 33.4-101.6 48.4-157.3 41.8 14.6-3.1 29.3-8.4 43.7-15.4 10.7-5.2 21.2-11.5 31.6-18.6 12.7 1.1 25.2 1.2 37.3.4 15.7-1.7 31.8-4.3 44.7-8.2z"}}]})(props);
};
module.exports.GiCakeSlice = function GiCakeSlice (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M224.375 19.5c-.627.005-1.25.035-1.875.063-22.916 1.004-39.905 16.736-45.063 35.093-4.796 17.07-.468 35.99 21.688 49.907-24.784 5.082-44.582 24.197-50.625 48.624L28.22 266.125l344.75-48.688c-4.686-11.665-7.433-24.554-7.72-37.875-12.373 3.495-25.437 1.82-35.688-4.843-12.483-8.115-19.316-24.395-15.156-42.97-11-3.865-20.314-11.138-28.937-20.156-2.67 1.933-5.597 3.722-8.876 5.47-4.904 2.61-10.448 4.996-16.406 7.03-5.415-5.783-11.86-10.583-19.032-14.125 2.016-.402 4.02-.877 6-1.407 7.72-2.07 14.993-4.985 20.656-8 5.664-3.016 9.72-6.49 10.657-7.75l7.03-9.438 7.625 9c11.86 14.042 21.687 21.77 34.406 23.53l12.22 1.69-4.938 11.31c-7.348 16.822-2.72 25.15 4.938 30.126 7.657 4.978 20.167 5.28 29.938-2.03l17.718-13.28-2.844 21.968c-4.23 32.48 11.383 64.938 31.844 77.875 10.23 6.468 21.06 8.458 32.78 4.53 11.724-3.927 24.924-14.41 37.533-35.405 21.685-36.113-15.126-77.975-47.376-66.625l-12.75 4.5.312-13.532c.912-37.316-34.334-67.822-74.344-59.03l-8.437 1.844-2.53-8.25c-3.99-13.03-12.2-21.695-21.19-25.25-8.988-3.556-18.85-2.703-29.155 5.625l-7.97 6.436-5.686-8.53C264.252 29.87 243.812 19.34 224.374 19.5zM212.28 121.906c1.566 0 3.102.072 4.626.22-8.18 3.796-13.844 12.073-13.844 21.686 0 13.204 10.703 23.907 23.907 23.907 13.203 0 23.905-10.704 23.905-23.907 0-.646-.044-1.274-.094-1.907 5.35 7.632 8.5 16.92 8.5 27 0 6.146-1.19 12.007-3.31 17.375-26.588 19.077-53.165 20.028-79.75 12.845-6.835-8.157-10.94-18.68-10.94-30.22 0-26.063 20.937-47 47-47zm169.845 113.156L19.97 286.156v16.594l374.436-52.844c-4.555-4.38-8.67-9.372-12.28-14.844zm97.156 16.375c-6.23 5.497-12.678 9.638-19.28 12.5l-.75 169.125 11.625-1.187 8.406-.844V251.44zm-60.56 13.907L19.97 321.656v52.75l30.843-17.156 4.593-2.563 4.563 2.625c16.475 9.383 28.455 10.95 40.155 7.813 11.7-3.138 23.93-11.893 37.875-25.875l3.875-3.875 5.28 1.5c24.013 6.806 38.055 9.512 49.064 7.625 11.008-1.887 21.244-8.403 38.218-23.78l6.28-5.69 6.25 5.69c7.754 7.03 11.293 7.7 12.47 7.655 1.176-.045 3.25-1.242 7.937-4.344 4.688-3.1 11.853-7.25 21.53-7.655 8.286-.346 18.054 2.04 29.97 7.688 8.374-7.562 15.014-12.59 23.75-13.594 8.592-.99 15.815 2.258 24.906 7.092 6.724-5.367 13.502-8.383 20.033-9.156 8.26-.978 15.21 1.12 21 2.75 5.79 1.63 10.514 2.88 15.312 2.563 4.656-.31 9.9-1.895 17.25-7.5l.156-37.658c-7.78.51-15.41-.668-22.56-3.218zm-27.533 61.53c-.486.013-.968.04-1.437.095-3.75.443-7.92 2.043-14.313 8.467l-4.906 4.938-6.155-3.313c-11.897-6.416-17.156-8.315-19.625-8.03-2.47.283-7.388 3.3-17.906 13.03l-4.906 4.532-5.875-3.156c-13.036-7.02-21.216-8.59-26.375-8.375-5.16.215-8 1.883-12 4.53-4.002 2.648-9.25 7.153-17.532 7.47-6.335.24-12.545-2.27-19.312-7.25-14.828 12.75-27.21 20.65-41.47 23.093-14.998 2.57-30.607-.71-52.186-6.687-13.58 13.024-26.973 22.878-42.22 26.967-15.368 4.123-31.947 1.747-49.5-7.156l-35.5 19.75v17.69c31.86-14.53 63.46-14.035 95.844-5.5 10.952-15 24.617-25.098 41.813-27.783 17.11-2.67 36.716 1.77 60.53 11.688 4.384-9.426 9.76-15.932 16.532-19.656 8.8-4.84 18.007-4.127 25.844-3.033 15.676 2.19 27.35 6.595 43.19-6.437l4.25-3.5 5.124 2.03c23.357 9.21 50.61 11.247 73.625-7.5l5.81-4.717 5.876 4.625c15.268 11.986 29.62 11.267 42.5 1.906l.125-27.5c-5.555 2.605-10.908 3.948-15.936 4.28-8.64.573-15.835-1.597-21.594-3.218-5.04-1.418-8.91-2.363-12.313-2.28zm1.72 45.626c-26.39 18.067-56.995 16.428-81.844 7.813-20.187 13.676-40.456 9.14-53.094 7.375-6.793-.95-11.016-.873-14.25.906-3.237 1.78-7.39 6.21-11.532 18.47l-3.313 9.81-9.438-4.28c-26.59-12.11-45.507-16.066-58.937-13.97-13.43 2.098-22.934 9.533-32.813 25.032l-3.78 5.938-6.75-2c-35.05-10.37-64.65-11.103-97.188 6.75v43.375l10.28-1.033 410.313-41.718.25-58.44c-15.042 6.07-32.325 5.435-47.907-4.03z"}}]})(props);
};
module.exports.GiCalavera = function GiCalavera (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M256 32c-35.999 0-82.121 10.125-115.59 33.22C152.646 88.628 172.317 108.318 192 128c-35.39 0-60.98-14.69-79.506-35.928C102.204 106.462 96 123.68 96 144c0 24.317.004 76.342 14.045 99.928C101.867 255.122 96 268.628 96 288c0 10.91 14.886 36.693 34.5 51.996L144 448c0 12.836 41.19 35.954 82.266 44.602L256 448l29.734 44.602C326.81 483.954 368 460.836 368 448l13.691-109.527C402.07 323.033 416 298.555 416 288c0-19.372-5.867-32.878-14.045-44.072C415.996 220.342 416 168.317 416 144c0-20.321-6.204-37.539-16.494-51.928C380.98 113.31 355.39 128 320 128c19.683-19.683 39.354-39.373 51.59-62.78C338.12 42.126 291.999 32 256 32zm0 16a24 48 0 0 1 24 48 24 48 0 0 1-24 48 24 48 0 0 1-24-48 24 48 0 0 1 24-48zm-71.787 104.72c.787.001 1.577.013 2.367.038 22.134.682 45.34 10.898 60.908 34.25l-14.976 9.984c-14.208-21.312-34.44-27.78-53.698-26.03-19.257 1.752-36.643 12.82-42.765 25.063l-16.098-8.05c9.878-19.757 32.492-32.689 57.235-34.938a77.206 77.206 0 0 1 7.027-.316zm143.574 0a77.253 77.253 0 0 1 7.027.317c24.743 2.25 47.357 15.181 57.235 34.938l-16.098 8.05c-6.122-12.243-23.508-23.311-42.765-25.062-19.258-1.75-39.49 4.717-53.698 26.03l-14.976-9.985c15.568-23.352 38.774-33.568 60.908-34.25a77.99 77.99 0 0 1 2.367-.037zM184 192a56 48 0 0 1 56 48 56 48 0 0 1-56 48 56 48 0 0 1-56-48 56 48 0 0 1 56-48zm144 0a56 48 0 0 1 56 48 56 48 0 0 1-56 48 56 48 0 0 1-56-48 56 48 0 0 1 56-48zm-144.688 9.654c-5.775 11.55-8.207 16.432-7.312 22.346-3.549-4.815-8.722-6.545-20.973-10.629 4.084 12.251 5.816 17.422 10.631 20.97-5.914-.894-10.795 1.538-22.345 7.313 11.55 5.775 16.431 8.206 22.345 7.31-4.815 3.55-6.547 8.722-10.63 20.974 12.25-4.084 17.423-5.814 20.972-10.63-.895 5.914 1.537 10.796 7.313 22.346 5.775-11.55 8.205-16.432 7.31-22.345 3.549 4.815 8.722 6.545 20.973 10.628-4.084-12.25-5.816-17.423-10.631-20.972 5.914.895 10.797-1.536 22.347-7.31-11.55-5.776-16.433-8.208-22.347-7.313 4.815-3.549 6.547-8.72 10.63-20.97-12.25 4.083-17.423 5.813-20.972 10.628.895-5.914-1.535-10.795-7.31-22.346zm145.375 0c-5.775 11.55-8.205 16.432-7.31 22.346-3.549-4.815-8.722-6.545-20.973-10.629 4.084 12.251 5.816 17.422 10.631 20.97-5.914-.894-10.797 1.538-22.348 7.313 11.55 5.775 16.434 8.206 22.348 7.31-4.815 3.55-6.547 8.722-10.63 20.974 12.25-4.084 17.423-5.814 20.972-10.63-.895 5.914 1.535 10.796 7.31 22.346 5.776-11.55 8.208-16.432 7.313-22.345 3.549 4.815 8.722 6.545 20.973 10.628-4.084-12.25-5.816-17.423-10.631-20.972 5.914.895 10.795-1.536 22.346-7.31-11.55-5.776-16.432-8.208-22.346-7.313 4.815-3.549 6.547-8.72 10.63-20.97-12.25 4.083-17.423 5.813-20.972 10.628.895-5.914-1.537-10.795-7.313-22.346zM248 262v64h-32l32-64zm16 0l32 64h-32v-64zm-8 75c13.505 0 25.069 5.325 35.455 9.57 10.386 4.246 19.411 7.38 27.563 6.485 2.823-.31 10.763-3.706 16.863-7.297 6.1-3.591 10.814-7.028 10.814-7.028l10.61 14.54s-5.357 3.914-12.293 7.998c-6.937 4.083-14.999 8.686-24.03 9.677-13.707 1.505-25.686-3.36-36.337-7.715-10.652-4.354-20.16-8.23-28.645-8.23s-17.993 3.876-28.645 8.23c-10.651 4.355-22.63 9.22-36.337 7.715-9.031-.991-17.094-5.594-24.03-9.677-6.936-4.084-12.293-7.998-12.293-7.998l10.61-14.54s4.714 3.437 10.814 7.028c6.1 3.591 14.04 6.987 16.863 7.297 8.152.894 17.177-2.239 27.563-6.485C230.93 342.325 242.495 337 256 337zm-73 43h18v13h14v-13h18v13h14v-13h18v13h14v-13h18v13h14v-13h18v13h13v18h-13v17h-18v-17h-14v17h-18v-17h-14v17h-18v-17h-14v17h-18v-17h-14v17h-18v-17h-13v-18h13v-13z"}}]})(props);
};
module.exports.GiCalculator = function GiCalculator (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M95 25v462h322V25H95zm193 18h80v18h-80V43zM114 83h284v84H114V83zm22 46v18h88v-18h-88zm-22 54h58v58h-58v-58zm76 0h58v58h-58v-58zm74 0h58v58h-58v-58zm76 0h58v58h-58v-58zm-208 18v22h22v-22h-22zm76 0v22h22v-22h-22zm74 0v22h22v-22h-22zm76 0v22h22v-22h-22zm-244 56h58v58h-58v-58zm76 0h58v58h-58v-58zm74 0h58v58h-58v-58zm76 0h58v58h-58v-58zm-208 18v22h22v-22h-22zm76 0v22h22v-22h-22zm74 0v22h22v-22h-22zm76 0v22h22v-22h-22zm-244 56h58v58h-58v-58zm76 0h58v58h-58v-58zm74 0h58v58h-58v-58zm76 0h58v132h-58V331zm-208 18v22h22v-22h-22zm76 0v22h22v-22h-22zm74 0v22h22v-22h-22zm76 0v96h22v-96h-22zm-244 56h58v58h-58v-58zm76 0h58v58h-58v-58zm74 0h58v58h-58v-58zm-132 18v22h22v-22h-22zm76 0v22h22v-22h-22zm74 0v22h22v-22h-22z"}}]})(props);
};
module.exports.GiCaldera = function GiCaldera (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M322.906 60.906l-7.72 1.47-63.592 12.093-3.22.624-2.124 2.47c-7.074 8.218-17.59 13.896-28.97 14.655-11.38.758-23.822-3.012-36.093-15.19l-5.718-5.655-6.47 4.78-55.5 41.407-2.53 1.876-.876 3C98.38 162.385 64.634 244.3 17.97 312.688v32.03C73.347 271.667 112.546 178.6 127.03 130.75l47.032-35.03c14.115 11.464 29.877 16.128 44.47 15.155 15.478-1.033 29.394-8.116 39.5-18.594l52.937-10.093 11.374 30.032 1.812 4.78 5 1.03c25.286 5.29 57.767 17.538 83.47 41.564 7.697 82.853 28.944 142.817 80.624 194.28v-27.312c-39.61-45.515-55.92-97.534-62.438-172.375l-.28-3.437-2.5-2.438c-27.842-27.25-62.216-40.858-89.97-47.343l-12.375-32.72-2.78-7.344zm-59.562 70.156c-38.16 0-72.7 6.43-96.844 16.282-12.072 4.926-21.48 10.752-27.438 16.5-3.952 3.813-6.323 7.357-7.468 10.75-.042.123-.087.252-.125.375-12.766 37.944-29.76 75.897-49.126 113.843 24.3-23.393 44.42-49.902 56.75-77.813l-13.656 59.375-44.626 122-1.718 4.688 2.937 4.03 26.126 36.063-25.25 57.813h20.406l24.094-55.25 2.156-4.908-3.125-4.312-26.374-36.375 7.687-20.97 70.72-156.905c22.04 7.065 50.196 11.578 80.905 11.938l9.03 114.75 28.564 125.968-5.126-131.687 14.72-73.876 26.498 37.812-1.03-80.437c10.397-2.448 19.878-5.417 28.124-8.782 5.128-2.093 9.762-4.352 13.875-6.688 7.416 37.274 29.225 72.748 60.064 108.25-17.907-42.653-36.687-88.07-38.656-130.063.32-1.282.468-2.536.468-3.78 0-4.904-2.323-10.065-8.28-15.813-5.96-5.748-15.398-11.574-27.47-16.5-24.143-9.853-58.652-16.28-96.812-16.28z"}}]})(props);
};
module.exports.GiCalendarHalfYear = function GiCalendarHalfYear (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M25 57v30h62V57H25zm160 0v62h62V57h-62zm80 0v14h62V57h-62zm80 0v39h62V57h-62zm80 0v78h62V57h-62zM105 73v78h62V73h-62zm160 16v78h62V89h-62zM25 105v78h62v-78H25zm320 9v78h62v-78h-62zm-160 23v78h62v-78h-62zm240 16v78h62v-78h-62zm-320 16v78h62v-78h-62zm160 16v78h62v-78h-62zM25 201v78h62v-78H25zm320 9v78h62v-78h-62zm-160 23v78h62v-78h-62zm240 16v78h62v-78h-62zm-320 16v78h62v-78h-62zm160 16v78h62v-78h-62zM25 297v78h62v-78H25zm320 9v78h62v-78h-62zm-160 23v78h62v-78h-62zm240 16v78h62v-78h-62zm-320 16v94h62v-94h-62zm160 16v78h62v-78h-62zM25 393v78h62v-78H25zm320 9v69h62v-69h-62zm-160 23v46h62v-46h-62zm240 16v14h62v-14h-62z"}}]})(props);
};
module.exports.GiCalendar = function GiCalendar (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119 31v66h18V31h-18zm256 0v66h18V31h-18zM73 89v30h366V89h-28v26h-54V89H155v26h-54V89H73zm0 48v302h366V137H73zm110 14h18v32h46v-32h18v32h46v-32h18v32h46v-32h18v32h32v18h-32v46h32v18h-32v46h32v18h-32v46h32v18H265v32h-18v-32h-46v32h-18v-32h-46v32h-18v-32H87v-18h32v-46H87v-18h32v-46H87v-18h32v-46H87v-18h96v-32zm-46 50v46h46v-46h-46zm64 0v46h46v-46h-46zm64 0v46h46v-46h-46zm64 0v46h46v-46h-46zm-192 64v46h46v-46h-46zm64 0v46h46v-46h-46zm64 0v13.27c2.545-5.936 7.334-10.725 13.27-13.27H265zm32.73 0c5.936 2.545 10.725 7.334 13.27 13.27V265h-13.27zm31.27 0v46h46v-46h-46zm-41 16c-3.973 0-7 3.027-7 7s3.027 7 7 7 7-3.027 7-7-3.027-7-7-7zm-23 16.73V311h13.27c-5.936-2.545-10.725-7.334-13.27-13.27zm46 0c-2.545 5.936-7.334 10.725-13.27 13.27H311v-13.27zM137 329v46h46v-46h-46zm64 0v46h46v-46h-46zm64 0v46h46v-46h-46zm64 0v46h46v-46h-46z"}}]})(props);
};
module.exports.GiCaltrops = function GiCaltrops (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119.244 19.566l-8.69 4.383-8.265 95.438-42.533 18.619.504 10.965 32.906-7.02-64.55 96.463 15.677-3.02 75.582-91.835 71.578 22.966 12.79-8.94-80.325-37.44-4.674-100.579zm262.844 73.059l-1.326 133.818L264.54 280.49l5.178 9.428 124.004-27.285 69.574 111.066 12.47-1.574L419.2 253.283l63.684-4.54.982-9.554-72.344-16.646L391.55 94.219l-9.461-1.594zm-177.994 99.326l-19.065 2.504-14.972 134.44-102.29 18.001 14.393 16.79 74.115-4.155L85.844 488.25l17.611 1.525 82.639-120.525 132.7 34.564 18.151-9.138-137.863-62.242 5.012-140.483z"}}]})(props);
};
module.exports.GiCamargueCross = function GiCamargueCross (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M230.363 32.256l-12.726 12.726L247 74.348v51.271h-67.271l-29.366-29.363-12.726 12.726 25.636 25.637-25.636 25.637 12.726 12.726 29.366-29.363H247v79.213c-17.269-16.404-34.965-23.523-50.857-22.102-2.99.268-5.916.838-8.762 1.704C164.608 209.36 151 233.76 151 262.619c0 29 22.182 53.882 44.365 78.082 21.702 23.675 44.225 47.136 51.617 67.416-.184 13.99-2.919 22.791-6.336 28.186-3.538 5.586-7.751 8.128-13.119 9.662-5.367 1.533-11.853 1.643-18.113 1.18-4.385-.325-8.464-.929-12.41-1.27-12.532-5.06-22.06-10.59-29.479-16.36-26.256-24.219-36.388-52.882-52.545-85.812l-9.482 61.985 16.225-7.522c7.592 15.066 16.568 31.414 34.752 45.557 28.045 21.169 65.905 30.32 98.045 35.773l1.48.248 1.48-.248c35.531-6.743 69.787-14.072 98.045-35.773 18.184-14.143 27.16-30.491 34.752-45.557l16.225 7.522-9.482-61.985c-14.464 29.13-30.782 68.45-52.545 85.813-7.42 5.77-16.947 11.3-29.479 16.359-3.946.341-8.025.945-12.41 1.27-6.26.463-12.746.353-18.113-1.18-5.368-1.534-9.581-4.076-13.12-9.662-3.416-5.395-6.15-14.195-6.335-28.186 7.392-20.28 29.915-43.741 51.617-67.416C338.818 316.501 361 291.62 361 262.62c0-28.859-13.608-53.259-36.38-60.185a43.324 43.324 0 0 0-8.763-1.704c-15.892-1.421-33.588 5.698-50.857 22.102v-79.213h67.271l29.366 29.363 12.726-12.726-25.636-25.637 25.636-25.637-12.726-12.726-29.366 29.363H265V74.348l29.363-29.366-12.726-12.726L256 57.893zm-29.597 186.29c12.329.199 28.452 8.274 46.234 31.126v122.402c-11.226-15.039-25.343-29.33-38.365-43.537C186.818 304.737 169 281.62 169 262.62c0-23.342 10.392-38.941 23.62-42.965 2.48-.754 5.205-1.154 8.146-1.107zm110.468 0c2.941-.046 5.667.354 8.147 1.108C332.608 223.678 343 239.277 343 262.62c0 19-17.818 42.118-39.635 65.918-13.022 14.207-27.139 28.498-38.365 43.537V249.672c17.782-22.852 33.905-30.927 46.234-31.125z"}}]})(props);
};
module.exports.GiCambodia = function GiCambodia (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M19.823 176.292c52.634-142.707 221.115-88.048 332.738-44.2l-13.409-41.716c41.185-20.775 48.6-23.357 81.943 3.973l59.098-35.757-15.892 52.642c44.039 50.132 22.324 108.155 23.838 163.39l-155.167 71.975 37.964 75.522c-21.918 3.053-62.448-14.29-101.311-8.443l-11.905 37.608-119.7 2.122C50.901 387.048 33.051 278.67 19.822 176.292z"}}]})(props);
};
module.exports.GiCamelHead = function GiCamelHead (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M34.26 54.05c-3.674-.052-7.343.22-11.016.766.984 18.973 2.226 39.808 8.106 56.516 6.682 18.99 17.358 32.218 42.87 35.504l3.964.51 19.552 28.15c-11.674 19.768-24.757 40.383-27.453 64.24C66.53 277.26 94.98 310.503 94.39 350.273 93.877 384.61 55.533 408.33 18 419.865V494h191.1c5.815-59.63 3.997-142.295 46.45-193.568-.098-.082-.193-.158-.292-.24-36.887 13.005-67.608 15.536-91.19 5.884-7.885-3.227-14.73-7.882-20.49-13.763-9.234-16.563-10.896-32.02-1.967-42.104 4.063 20.628 13.888 32.91 29.277 39.208 35.125 6.58 61.317.294 87.974-9.633 37.367 28.99 77.208 43.628 120.232 47.863 3.3 19.667 13.757 35.763 30.412 40.163 14.11 3.496 31.643.26 43.44-5.744 17.47-8.89 27.032-33.07 17.07-59.71-48.152-2.008-100.698-13.49-133.68-42.907 16.136 3.43 33.54 6.376 47.3 8.034 26.324 12.59 51.317 13.888 90.546 17.073 8.062-5.743 13.12-10.632 15.63-14.584 2.774-4.368 3.313-7.532 2.51-12.754-3.09-11.252-11.807-15.73-21.478-14.93-15.433-39.633-39.394-82.483-70.715-97.464-36.225-8.937-73.532 1.93-105.856 11.54 3.448-14.18-1.07-18.407-6.27-28.366-19.06-19.503-39.63-11.05-57.38-18.498-14.267-8.968-15.308-35.744-28.94-42.57-11.082-4.523-26.49-4.93-40.848-1.68-14.36 3.25-27.51 10.208-34.336 17.787l-4.785 5.312-6.257-3.46C86.786 69.037 60.437 54.407 34.26 54.048zm16.054 24.41C63.134 80.113 76.65 87.74 89.31 96.5c12.66 8.757 23.642 18.164 29.495 27.225l-15.12 9.767c-2.81-4.348-13.225-14.31-24.617-22.19-11.392-7.88-24.586-14.155-31.052-14.987zm183.827 80.66c6.545.052 14.645 1.008 28.33 2.614 4.758 1.464 4.267 10.61-2.6 15.733-26.57 9.943-38.235 14.125-64.15-9.88 20.924-6.123 27.513-8.55 38.42-8.466zm172.116 24.28c20.81 7.5 30.964 29.094 38.154 47.196l-16.75 6.59c-4.683-10.115-13.924-33.156-25.414-36.24z"}}]})(props);
};
module.exports.GiCamel = function GiCamel (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M420.8 26.91c-11.4.76-23.7 4.65-33.6 10.29-5.3-4.86-13.5-10.52-19.3-6.11-12.5 9.46-2.4 20.76 6.8 27.94 5.5 35.86 20.7 93.17-9.8 105.97C317 183.1 308.4 36.14 241 37.94c-40.4 1.08-22.6 59.65-62.6 61.65-29.5 1.51-27.3-54.51-51.9-55.36-25.9-.9-44.62 18.9-57.71 86.97-25.63-.1-35.73 20.1-47.42 59.2-11.686 39-3 115.6 1.2 162.4l7.87-76.3c2.43 12 6.19 24.1 11.91 36.7 3.91 18.7 5.44 37.4 5.81 56-8.2 10.2-8.8 26.2-.42 35.5-.92 26.8-2.67 53.5-1.68 80.3 34.48.5 66.04-1 99.54 0 1.8-11.9-14.9-20.4-34.3-30.3.3-13.7.2-30.5 0-47.5 8.8-10.2 9-28.1-.2-36.8.1-21.3.8-38.6 3.3-43.9 8-17.1 20.6-31.9 29.1-47.2 28.7 5.3 59.7 2.9 91.9-4.7l.7 85.5c-7.7 11.3-8 27.7.3 37.8 4.7 29 .6 58.1.8 87.1h58c2.3-15-22.5-23.1-34.6-30.1 0-22.1-3.9-38.8-.4-60.3 5-9.9 5.3-21.5.4-30.8.9-33 3.3-66 10.7-99 1.6-.6 7.9-3.7 9.3-5.3l10.9 98.4c-5.6 11.9-4.4 27.3 4 36.7 6.6 30.1 4.5 59.5 7.9 89.6l61.2.8c.3-12.3-29.1-20-40.3-25.5-6.4-21.4-5.7-43.1-6.7-64.9 8-12.1 7.6-28.9-1.1-39.5.5-38.3 5.5-76.8 18.4-114.6 106.6-5.9 96.2-72 99.3-133.2 1.4-27.24 55.5 1.7 60-11.61 2.4-6.92 3.6-13.89 0-21.84-8.6-19.29-23.9-20.32-36.7-20.63-12.3-7.36-22.6-25.96-35.5-26.31zm6.7 19.58c4.9 2.64 3.8 7.47 2.7 10.11-6.6 1.96-16.3-1.08-20.8-4.59 3.9-2.99 12.2-5.39 18.1-5.52zM80.6 302.3c3.05 7.8 5.74 15.6 7.35 23.2 3.22 15.3 4.91 30.7 5.72 46.2-7.48 10.3-7.78 26.1.59 35-.25 21.6-1.3 43.2-1.52 64.7-4.54-7.5-12.92-14-24.94-17.1.16-14.4-.44-32.4-1.08-50.6 6.91-10.2 7.01-25.6-1.11-34.3-.67-27-.34-49.4 3.78-54.1 3.95-4.5 7.67-8.8 11.21-13z"}}]})(props);
};
module.exports.GiCampCookingPot = function GiCampCookingPot (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M151.7 16.73s-20.6 14.12-22 25.18c-1.4 11.33 17.6 19.24 15.6 30.48-1.3 7.43-16.6 15.38-16.6 15.38s38.7-3.36 42.3-18.3c2.9-11.82-19.8-16.61-23-28.35-2.1-7.94 3.7-24.39 3.7-24.39zm214.4 4.89s-24.8 13.58-24.9 25.45c-.1 7.24 14.4 8.67 14.8 15.9.5 8.56-15.3 20.68-15.3 20.68s33.6-3.81 38.1-16.97c2.7-7.77-9.4-13.81-11.6-21.73-2.1-7.5-1.1-23.33-1.1-23.33zm-106.9.26s-26.9 13.75-24.9 25.45c1.4 7.93 20.6 2.62 21.7 10.6 1.7 13.01-29.6 25.98-29.6 25.98s56.5-1.44 58.8-22.27c1.1-9.88-20-7.79-24.9-16.43-3.9-6.77-1.1-23.33-1.1-23.33zM48 105.6v18h416v-18zm16 37c-14.48 86.9 16.9 138.1 58.6 168.2-3.6-24.8-14.1-49.1-35.06-72.2 39.96 10.5 71.36 48.8 85.36 87.2 2.3-18.8 2.3-27.5 19.5-44.2-3.1 24.8 11.2 26.5 21.2 23.4 25.3-7.9 35.6-39.5 10.6-78.9 47.6 22.7 48.3 48.4 56.3 83.7-2.4-33.2 24.3-46.5 43.7-34-45.1 22.7-8.2 42.2 6.9 47 40 12.8 70-46.3 87.2-91 4.7 19.8.8 39.7-6.5 59.5C441.4 260 459.7 213 448 142.6zm184.3 175.2L75 417.5c2.7 18.4 9 34.4 18.8 48.5l92-44.1-78.7 59.9c3.4 3.4 7.1 6.6 11 9.7l74.7-42.9c0-.7-.1-1.5-.1-2.2 0-37.2 30.5-67.6 67.8-67.6 10.6 0 20.6 2.4 29.5 6.7-2.4-13.4-7.3-27.1-14.8-39.2l-94.9 40.1 82.5-56.5c-4.4-4.5-9.2-8.6-14.5-12.1zm58.9 57.6c1.6 7.2 2.6 14.4 3 21.4l.2 3.9c11.1 12 17.9 28.1 17.9 45.7 0 7.8-1.3 15.3-3.8 22.2l91.4 24.4c4.6-6.3 8.6-12.8 11.8-19.4l-63.1-24.7 70.1 6.9c.9-3 1.6-5.9 2.2-8.9l-97.1-34.3 99.2 15.5c.2-5.8-.1-11.7-.8-17.7zm-46.7 22.1c-27.2 0-49.1 21.8-49.1 48.9 0 27.1 21.9 48.9 49.1 48.9 27.3 0 49.2-21.8 49.2-48.9 0-27.1-21.9-48.9-49.2-48.9zm-4.9 11.8c43.8 0 58.4 71.6 0 71.6 26.6-23.1 29.8-46.9 0-71.6zm.2 9.8c-21.6 17.9-19.3 35.2 0 52-42.4 0-31.8-52 0-52z"}}]})(props);
};
module.exports.GiCampfire = function GiCampfire (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M281.53 23.438c48.44 71.504-18.447 145.556-63.655 58.968 27.295 144.502-65.22 166.347-74.75 74.75-73.554 65.057-59.358 147.17-20.438 210.75l45.844-26.344c-12.004-18.318-17.995-42.502-15.31-66.218 25.688 39.43 106.855 10.088 97.124-59.938 10.695 32.074 37.802 28.97 65.78-20.5C278.07 297.622 337.95 364.248 378.032 333.5c1.47 11.97-2.95 25.657-10.592 38.063l46.968 12.53c55.122-47.503 79.71-135.97-3.812-175.53 39.08 60.478-13.1 105.064-60.72 41.468-38.546-72.133 82.366-113.394-68.343-226.593zM173.876 48.124c-64.128 32.333-14.642 60.51-14.03 92.344 44.122-38.935-3.722-53.508 14.03-92.345zm74.47 269.094L75 416.874c2.71 18.39 8.98 34.417 18.813 48.5l92-44.063-78.688 59.875c3.39 3.38 7.033 6.62 10.938 9.75L192.78 448c-.023-.738-.06-1.475-.06-2.22 0-37.22 30.495-67.56 67.81-67.56 10.53 0 20.527 2.413 29.44 6.717-2.323-13.414-7.28-27.104-14.72-39.28l-94.938 40.124 82.47-56.467c-4.34-4.55-9.166-8.64-14.438-12.094zm58.874 57.624c1.61 7.148 2.6 14.315 2.967 21.312l.22 3.938c11.13 12.042 17.937 28.09 17.937 45.687 0 7.795-1.356 15.276-3.813 22.25l91.345 24.376c4.642-6.327 8.588-12.768 11.844-19.375l-63.158-24.686 70.125 6.844c.866-2.948 1.61-5.923 2.22-8.938l-97.063-34.22L439 427.5c.156-5.772-.103-11.67-.813-17.72L307.22 374.845zm-46.69 22.062c-27.26 0-49.124 21.8-49.124 48.875 0 27.078 21.864 48.876 49.125 48.876 27.263 0 49.126-21.798 49.126-48.875 0-27.075-21.863-48.874-49.125-48.874zm-4.936 11.78c43.778.002 58.435 71.595 0 71.595 26.622-23.113 29.81-46.888 0-71.592zm.187 9.845c-21.616 17.916-19.304 35.177 0 51.94-42.375 0-31.745-51.94 0-51.94z"}}]})(props);
};
module.exports.GiCampingTent = function GiCampingTent (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M361.155 91.245l-18 .193.42 38.98c-45.773 13.285-108.533 19.738-166.474 23.573 35.097 96.284 99.357 173.77 157.845 257.13 20.718-19.655 51.11-31.983 83.46-36.01-20.8-18.109-36.634-27.966-58.833-70.438 31.27 37.085 52.579 48.467 77.623 62.006 3.263-13.094 8.938-24.638 18.721-32.674 8.667-7.12 20.026-10.654 33.53-10.344-46.874-59.763-101.67-117.054-127.83-189.435l-.462-42.98zM163.25 102.92l-17.998.244s.25 18.34.56 36.97c.156 9.316.325 18.703.489 25.929.06 2.636.117 4.58.174 6.    .objectStore(OBJECT_STORE_NAME)\n    .get(key) as Promise<InstallationEntry>;\n}\n\n/** Assigns or overwrites the record for the given key with the given value. */\nexport async function set<ValueType extends InstallationEntry>(\n  appConfig: AppConfig,\n  value: ValueType\n): Promise<ValueType> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const objectStore = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue = (await objectStore.get(key)) as InstallationEntry;\n  await objectStore.put(value, key);\n  await tx.done;\n\n  if (!oldValue || oldValue.fid !== value.fid) {\n    fidChanged(appConfig, value.fid);\n  }\n\n  return value;\n}\n\n/** Removes record(s) from the objectStore that match the given key. */\nexport async function remove(appConfig: AppConfig): Promise<void> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).delete(key);\n  await tx.done;\n}\n\n/**\n * Atomically updates a record with the result of updateFn, which gets\n * called with the current value. If newValue is undefined, the record is\n * deleted instead.\n * @return Updated value\n */\nexport async function update<ValueType extends InstallationEntry | undefined>(\n  appConfig: AppConfig,\n  updateFn: (previousValue: InstallationEntry | undefined) => ValueType\n): Promise<ValueType> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const store = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue: InstallationEntry | undefined = (await store.get(\n    key\n  )) as InstallationEntry;\n  const newValue = updateFn(oldValue);\n\n  if (newValue === undefined) {\n    await store.delete(key);\n  } else {\n    await store.put(newValue, key);\n  }\n  await tx.done;\n\n  if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) {\n    fidChanged(appConfig, newValue.fid);\n  }\n\n  return newValue;\n}\n\nexport async function clear(): Promise<void> {\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).clear();\n  await tx.done;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createInstallationRequest } from '../functions/create-installation-request';\nimport {\n  AppConfig,\n  FirebaseInstallationsImpl\n} from '../interfaces/installation-impl';\nimport {\n  InProgressInstallationEntry,\n  InstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { PENDING_TIMEOUT_MS } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode, isServerError } from '../util/errors';\nimport { sleep } from '../util/sleep';\nimport { generateFid, INVALID_FID } from './generate-fid';\nimport { remove, set, update } from './idb-manager';\n\nexport interface InstallationEntryWithRegistrationPromise {\n  installationEntry: InstallationEntry;\n  /** Exist iff the installationEntry is not registered. */\n  registrationPromise?: Promise<RegisteredInstallationEntry>;\n}\n\n/**\n * Updates and returns the InstallationEntry from the database.\n * Also triggers a registration request if it is necessary and possible.\n */\nexport async function getInstallationEntry(\n  installations: FirebaseInstallationsImpl\n): Promise<InstallationEntryWithRegistrationPromise> {\n  let registrationPromise: Promise<RegisteredInstallationEntry> | undefined;\n\n  const installationEntry = await update(installations.appConfig, oldEntry => {\n    const installationEntry = updateOrCreateInstallationEntry(oldEntry);\n    const entryWithPromise = triggerRegistrationIfNecessary(\n      installations,\n      installationEntry\n    );\n    registrationPromise = entryWithPromise.registrationPromise;\n    return entryWithPromise.installationEntry;\n  });\n\n  if (installationEntry.fid === INVALID_FID) {\n    // FID generation failed. Waiting for the FID from the server.\n    return { installationEntry: await registrationPromise! };\n  }\n\n  return {\n    installationEntry,\n    registrationPromise\n  };\n}\n\n/**\n * Creates a new Installation Entry if one does not exist.\n * Also clears timed out pending requests.\n */\nfunction updateOrCreateInstallationEntry(\n  oldEntry: InstallationEntry | undefined\n): InstallationEntry {\n  const entry: InstallationEntry = oldEntry || {\n    fid: generateFid(),\n    registrationStatus: RequestStatus.NOT_STARTED\n  };\n\n  return clearTimedOutRequest(entry);\n}\n\n/**\n * If the Firebase Installation is not registered yet, this will trigger the\n * registration and return an InProgressInstallationEntry.\n *\n * If registrationPromise does not exist, the installationEntry is guaranteed\n * to be registered.\n */\nfunction triggerRegistrationIfNecessary(\n  installations: FirebaseInstallationsImpl,\n  installationEntry: InstallationEntry\n): InstallationEntryWithRegistrationPromise {\n  if (installationEntry.registrationStatus === RequestStatus.NOT_STARTED) {\n    if (!navigator.onLine) {\n      // Registration required but app is offline.\n      const registrationPromiseWithError = Promise.reject(\n        ERROR_FACTORY.create(ErrorCode.APP_OFFLINE)\n      );\n      return {\n        installationEntry,\n        registrationPromise: registrationPromiseWithError\n      };\n    }\n\n    // Try registering. Change status to IN_PROGRESS.\n    const inProgressEntry: InProgressInstallationEntry = {\n      fid: installationEntry.fid,\n      registrationStatus: RequestStatus.IN_PROGRESS,\n      registrationTime: Date.now()\n    };\n    const registrationPromise = registerInstallation(\n      installations,\n      inProgressEntry\n    );\n    return { installationEntry: inProgressEntry, registrationPromise };\n  } else if (\n    installationEntry.registrationStatus === RequestStatus.IN_PROGRESS\n  ) {\n    return {\n      installationEntry,\n      registrationPromise: waitUntilFidRegistration(installations)\n    };\n  } else {\n    return { installationEntry };\n  }\n}\n\n/** This will be executed only once for each new Firebase Installation. */\nasync function registerInstallation(\n  installations: FirebaseInstallationsImpl,\n  installationEntry: InProgressInstallationEntry\n): Promise<RegisteredInstallationEntry> {\n  try {\n    const registeredInstallationEntry = await createInstallationRequest(\n      installations,\n      installationEntry\n    );\n    return set(installations.appConfig, registeredInstallationEntry);\n  } catch (e) {\n    if (isServerError(e) && e.customData.serverCode === 409) {\n      // Server returned a \"FID can not be used\" error.\n      // Generate a new ID next time.\n      await remove(installations.appConfig);\n    } else {\n      // Registration failed. Set FID as not registered.\n      await set(installations.appConfig, {\n        fid: installationEntry.fid,\n        registrationStatus: RequestStatus.NOT_STARTED\n      });\n    }\n    throw e;\n  }\n}\n\n/** Call if FID registration is pending in another request. */\nasync function waitUntilFidRegistration(\n  installations: FirebaseInstallationsImpl\n): Promise<RegisteredInstallationEntry> {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n\n  let entry: InstallationEntry = await updateInstallationRequest(\n    installations.appConfig\n  );\n  while (entry.registrationStatus === RequestStatus.IN_PROGRESS) {\n    // createInstallation request still in progress.\n    await sleep(100);\n\n    entry = await updateInstallationRequest(installations.appConfig);\n  }\n\n  if (entry.registrationStatus === RequestStatus.NOT_STARTED) {\n    // The request timed out or failed in a different call. Try again.\n    const { installationEntry, registrationPromise } =\n      await getInstallationEntry(installations);\n\n    if (registrationPromise) {\n      return registrationPromise;\n    } else {\n      // if there is no registrationPromise, entry is registered.\n      return installationEntry as RegisteredInstallationEntry;\n    }\n  }\n\n  return entry;\n}\n\n/**\n * Called only if there is a CreateInstallation request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * CreateInstallation request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateInstallationRequest(\n  appConfig: AppConfig\n): Promise<InstallationEntry> {\n  return update(appConfig, oldEntry => {\n    if (!oldEntry) {\n      throw ERROR_FACTORY.create(ErrorCode.INSTALLATION_NOT_FOUND);\n    }\n    return clearTimedOutRequest(oldEntry);\n  });\n}\n\nfunction clearTimedOutRequest(entry: InstallationEntry): InstallationEntry {\n  if (hasInstallationRequestTimedOut(entry)) {\n    return {\n      fid: entry.fid,\n      registrationStatus: RequestStatus.NOT_STARTED\n    };\n  }\n\n  return entry;\n}\n\nfunction hasInstallationRequestTimedOut(\n  installationEntry: InstallationEntry\n): boolean {\n  return (\n    installationEntry.registrationStatus === RequestStatus.IN_PROGRESS &&\n    installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now()\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CreateInstallationResponse } from '../interfaces/api-response';\nimport {\n  InProgressInstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { INTERNAL_AUTH_VERSION, PACKAGE_VERSION } from '../util/constants';\nimport {\n  extractAuthTokenInfoFromResponse,\n  getErrorFromResponse,\n  getHeaders,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\n\nexport async function createInstallationRequest(\n  { appConfig, heartbeatServiceProvider }: FirebaseInstallationsImpl,\n  { fid }: InProgressInstallationEntry\n): Promise<RegisteredInstallationEntry> {\n  const endpoint = getInstallationsEndpoint(appConfig);\n\n  const headers = getHeaders(appConfig);\n\n  // If heartbeat service exists, add the heartbeat string to the header.\n  const heartbeatService = heartbeatServiceProvider.getImmediate({\n    optional: true\n  });\n  if (heartbeatService) {\n    const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\n    if (heartbeatsHeader) {\n      headers.append('x-firebase-client', heartbeatsHeader);\n    }\n  }\n\n  const body = {\n    fid,\n    authVersion: INTERNAL_AUTH_VERSION,\n    appId: appConfig.appId,\n    sdkVersion: PACKAGE_VERSION\n  };\n\n  const request: RequestInit = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) {\n    const responseValue: CreateInstallationResponse = await response.json();\n    const registeredInstallationEntry: RegisteredInstallationEntry = {\n      fid: responseValue.fid || fid,\n      registrationStatus: RequestStatus.COMPLETED,\n      refreshToken: responseValue.refreshToken,\n      authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)\n    };\n    return registeredInstallationEntry;\n  } else {\n    throw await getErrorFromResponse('Create Installation', response);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GenerateAuthTokenResponse } from '../interfaces/api-response';\nimport {\n  CompletedAuthToken,\n  RegisteredInstallationEntry\n} from '../interfaces/installation-entry';\nimport { PACKAGE_VERSION } from '../util/constants';\nimport {\n  extractAuthTokenInfoFromResponse,\n  getErrorFromResponse,\n  getHeadersWithAuth,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\nimport {\n  FirebaseInstallationsImpl,\n  AppConfig\n} from '../interfaces/installation-impl';\n\nexport async function generateAuthTokenRequest(\n  { appConfig, heartbeatServiceProvider }: FirebaseInstallationsImpl,\n  installationEntry: RegisteredInstallationEntry\n): Promise<CompletedAuthToken> {\n  const endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);\n\n  const headers = getHeadersWithAuth(appConfig, installationEntry);\n\n  // If heartbeat service exists, add the heartbeat string to the header.\n  const heartbeatService = heartbeatServiceProvider.getImmediate({\n    optional: true\n  });\n  if (heartbeatService) {\n    const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\n    if (heartbeatsHeader) {\n      headers.append('x-firebase-client', heartbeatsHeader);\n    }\n  }\n\n  const body = {\n    installation: {\n      sdkVersion: PACKAGE_VERSION,\n      appId: appConfig.appId\n    }\n  };\n\n  const request: RequestInit = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) {\n    const responseValue: GenerateAuthTokenResponse = await response.json();\n    const completedAuthToken: CompletedAuthToken =\n      extractAuthTokenInfoFromResponse(responseValue);\n    return completedAuthToken;\n  } else {\n    throw await getErrorFromResponse('Generate Auth Token', response);\n  }\n}\n\nfunction getGenerateAuthTokenEndpoint(\n  appConfig: AppConfig,\n  { fid }: RegisteredInstallationEntry\n): string {\n  return `${getInstallationsEndpoint(appConfig)}/${fid}/authTokens:generate`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { generateAuthTokenRequest } from '../functions/generate-auth-token-request';\nimport {\n  AppConfig,\n  FirebaseInstallationsImpl\n} from '../interfaces/installation-impl';\nimport {\n  AuthToken,\n  CompletedAuthToken,\n  InProgressAuthToken,\n  InstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { PENDING_TIMEOUT_MS, TOKEN_EXPI/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * This will include all of the test files and compile them as needed
 *
 * Taken from karma-webpack source:
 * https://github.com/webpack-contrib/karma-webpack#alternative-usage
 */
declare const testsContext: any;
declare const browserTests: any;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
const _excluded = ["children", "value", "defaultValue", "orientation", "direction", "onChange", "selectionFollowsFocus", "slotProps", "slots"];
import * as React from 'react';
import PropTypes from 'prop-types';
import { useSlotProps } from '../utils';
import composeClasses from '../composeClasses';
import { getTabsUtilityClass } from './tabsClasses';
import useTabs from '../useTabs';
import TabsProvider from '../useTabs/TabsProvider';
import { useClassNamesOverride } from '../utils/ClassNameConfigurator';
import { jsx as _jsx } from "react/jsx-runtime";
const useUtilityClasses = ownerState => {
  const {
    orientation
  } = ownerState;
  const slots = {
    root: ['root', orientation]
  };
  return composeClasses(slots, useClassNamesOverride(getTabsUtilityClass));
};

/**
 *
 * Demos:
 *
 * - [Tabs](https://mui.com/base/react-tabs/)
 *
 * API:
 *
 * - [Tabs API](https://mui.com/base/react-tabs/components-api/#tabs)
 */
const Tabs = /*#__PURE__*/React.forwardRef(function Tabs(props, forwardedRef) {
  var _slots$root;
  const {
      children,
      orientation = 'horizontal',
      direction = 'ltr',
      slotProps = {},
      slots = {}
    } = props,
    other = _objectWithoutPropertiesLoose(props, _excluded);
  const {
    contextValue
  } = useTabs(props);
  const ownerState = _extends({}, props, {
    orientation,
    direction
  });
  const classes = useUtilityClasses(ownerState);
  const TabsRoot = (_slots$root = slots.root) != null ? _slots$root : 'div';
  const tabsRootProps = useSlotProps({
    elementType: TabsRoot,
    externalSlotProps: slotProps.root,
    externalForwardedProps: other,
    additionalProps: {
      ref: forwardedRef
    },
    ownerState,
    className: classes.root
  });
  return /*#__PURE__*/_jsx(TabsRoot, _extends({}, tabsRootProps, {
    children: /*#__PURE__*/_jsx(TabsProvider, {
      value: contextValue,
      children: children
    })
  }));
});
process.env.NODE_ENV !== "production" ? Tabs.propTypes /* remove-proptypes */ = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The content of the component.
   */
  children: PropTypes.node,
  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  /**
   * The direction of the text.
   * @default 'ltr'
   */
  direction: PropTypes.oneOf(['ltr', 'rtl']),
  /**
   * Callback invoked when new value is being set.
   */
  onChange: PropTypes.func,
  /**
   * The component orientation (layout flow direction).
   * @default 'horizontal'
   */
  orientation: PropTypes.oneOf(['horizontal', 'vertical']),
  /**
   * If `true` the selected tab changes on focus. Otherwise it only
   * changes on activation.
   */
  selectionFollowsFocus: PropTypes.bool,
  /**
   * The props used for each slot inside the Tabs.
   * @default {}
   */
  slotProps: PropTypes.shape({
    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
  }),
  /**
   * The components used for each slot inside the Tabs.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: PropTypes.shape({
    root: PropTypes.elementType
  }),
  /**
   * The value of the currently selected `Tab`.
   * If you don't want any selected `Tab`, you can set this prop to `null`.
   */
  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string])
} : void 0;
export default Tabs;                                                                                                                                                                                                                                                                               module.exports={C:{"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0.00584,"102":0,"103":0,"104":0.01751,"105":0,"106":0.01167,"107":0,"108":0,"109":0.09339,"110":0.67126,"111":0.08756,"112":0.00584,"113":0,"3.5":0,"3.6":0},D:{"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0.11674,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0.00584,"71":0,"72":0,"73":0.03502,"74":0,"75":0.17511,"76":0.01167,"77":0.16344,"78":0,"79":0,"80":0,"81":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0.00584,"91":0,"92":0.00584,"93":0.06421,"94":0.00584,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0.96894,"104":0.01167,"105":0.01167,"106":0.16927,"107":0,"108":0.07004,"109":0.53117,"110":8.00836,"111":15.05362,"112":0,"113":0,"114":0},F:{"9":0,"11":0,"12":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"60":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0.00584,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0.06421,"9.5-9.6":0,"10.0-10.1":0,"10.5":0,"10.6":0,"11.1":0,"11.5":0,"11.6":0,"12.1":0},B:{"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0.01167,"79":0,"80":0,"81":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0.01167,"101":0,"102":0.01751,"103":0,"104":0,"105":0,"106":0,"107":0.03502,"108":0.01751,"109":0.02919,"110":1.51178,"111":2.22973},E:{"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0.00584,"15":0,_:"0","3.1":0,"3.2":0,"5.1":0,"6.1":0,"7.1":0,"9.1":0,"10.1":0,"11.1":0,"12.1":0,"13.1":0,"14.1":0.25683,"15.1":0,"15.2-15.3":0.01167,"15.4":0.04086,"15.5":0.04086,"15.6":0.26267,"16.0":0.00584,"16.1":0.04086,"16.2":0.0467,"16.3":0.37357,"16.4":0,"16.5":0},G:{"8":0,"3.2":0,"4.0-4.1":0,"4.2-4.3":0,"5.0-5.1":0,"6.0-6.1":0,"7.0-7.1":0,"8.1-8.4":0,"9.0-9.2":0,"9.3":0.19719,"10.0-10.2":0,"10.3":0.02491,"11.0-11.2":0.01245,"11.3-11.4":0.12246,"12.0-12.1":0,"12.2-12.5":0.90914,"13.0-13.1":0,"13.2":0,"13.3":0.09756,"13.4-13.7":0.04982,"14.0-14.4":0.55213,"14.5-14.8":1.58581,"15.0-15.1":0.13492,"15.2-15.3":0.06227,"15.4":0.76177,"15.5":0.42966,"15.6":1.83281,"16.0":3.48089,"16.1":4.88196,"16.2":2.22511,"16.3":2.99933,"16.4":0.04982,"16.5":0},P:{"4":0,"20":2.28782,"5.0-5.4":0,"6.2-6.4":0,"7.2-7.4":0.01021,"8.2":0,"9.2":0,"10.1":0,"11.1-11.2":0,"12.0":0,"13.0":0,"14.0":0,"15.0":0,"16.0":0,"17.0":0,"18.0":0.02043,"19.0":0.09192},I:{"0":0,"3":0,"4":0,"2.1":0,"2.2":0,"2.3":0,"4.1":0,"4.2-4.3":0.63253,"4.4":0,"4.4.3-4.4.4":0},K:{_:"0 10 11 12 11.1 11.5 12.1"},A:{"6":0,"7":0,"8":0.22181,"9":0,"10":0,"11":0.05837,"5.5":0},S:{"2.5":0,_:"3.0-3.1"},J:{"7":0,"10":0},N:{"10":0,"11":0},R:{_:"0"},M:{"0":0.26643},Q:{"13.1":0},O:{"0":0.35802},H:{"0":0.10247},L:{"0":41.61596}};
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   RATION_BUFFER } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode, isServerError } from '../util/errors';\nimport { sleep } from '../util/sleep';\nimport { remove, set, update } from './idb-manager';\n\n/**\n * Returns a valid authentication token for the installation. Generates a new\n * token if one doesn't exist, is expired or about to expire.\n *\n * Should only be called if the Firebase Installation is registered.\n */\nexport async function refreshAuthToken(\n  installations: FirebaseInstallationsImpl,\n  forceRefresh = false\n): Promise<CompletedAuthToken> {\n  let tokenPromise: Promise<CompletedAuthToken> | undefined;\n  const entry = await update(installations.appConfig, oldEntry => {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(ErrorCode.NOT_REGISTERED);\n    }\n\n    const oldAuthToken = oldEntry.authToken;\n    if (!forceRefresh && isAuthTokenValid(oldAuthToken)) {\n      // There is a valid token in the DB.\n      return oldEntry;\n    } else if (oldAuthToken.requestStatus === RequestStatus.IN_PROGRESS) {\n      // There already is a token request in progress.\n      tokenPromise = waitUntilAuthTokenRequest(installations, forceRefresh);\n      return oldEntry;\n    } else {\n      // No token or token expired.\n      if (!navigator.onLine) {\n        throw ERROR_FACTORY.create(ErrorCode.APP_OFFLINE);\n      }\n\n      const inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);\n      tokenPromise = fetchAuthTokenFromServer(installations, inProgressEntry);\n      return inProgressEntry;\n    }\n  });\n\n  const authToken = tokenPromise\n    ? await tokenPromise\n    : (entry.authToken as CompletedAuthToken);\n  return authToken;\n}\n\n/**\n * Call only if FID is registered and Auth Token request is in progress.\n *\n * Waits until the current pending request finishes. If the request times out,\n * tries once in this thread as well.\n */\nasync function waitUntilAuthTokenRequest(\n  installations: FirebaseInstallationsImpl,\n  forceRefresh: boolean\n): Promise<CompletedAuthToken> {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n\n  let entry = await updateAuthTokenRequest(installations.appConfig);\n  while (entry.authToken.requestStatus === RequestStatus.IN_PROGRESS) {\n    // generateAuthToken still in progress.\n    await sleep(100);\n\n    entry = await updateAuthTokenRequest(installations.appConfig);\n  }\n\n  const authToken = entry.authToken;\n  if (authToken.requestStatus === RequestStatus.NOT_STARTED) {\n    // The request timed out or failed in a different call. Try again.\n    return refreshAuthToken(installations, forceRefresh);\n  } else {\n    return authToken;\n  }\n}\n\n/**\n * Called only if there is a GenerateAuthToken request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * GenerateAuthToken request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateAuthTokenRequest(\n  appConfig: AppConfig\n): Promise<RegisteredInstallationEntry> {\n  return update(appConfig, oldEntry => {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(ErrorCode.NOT_REGISTERED);\n    }\n\n    const oldAuthToken = oldEntry.authToken;\n    if (hasAuthTokenRequestTimedOut(oldAuthToken)) {\n      return {\n        ...oldEntry,\n        authToken: { requestStatus: RequestStatus.NOT_STARTED }\n      };\n    }\n\n    return oldEntry;\n  });\n}\n\nasync function fetchAuthTokenFromServer(\n  installations: FirebaseInstallationsImpl,\n  installationEntry: RegisteredInstallationEntry\n): Promise<CompletedAuthToken> {\n  try {\n    const authToken = await generateAuthTokenRequest(\n      installations,\n      installationEntry\n    );\n    const updatedInstallationEntry: RegisteredInstallationEntry = {\n      ...installationEntry,\n      authToken\n    };\n    await set(installations.appConfig, updatedInstallationEntry);\n    return authToken;\n  } catch (e) {\n    if (\n      isServerError(e) &&\n      (e.customData.serverCode === 401 || e.customData.serverCode === 404)\n    ) {\n      // Server returned a \"FID not found\" or a \"Invalid authentication\" error.\n      // Generate a new ID next time.\n      await remove(installations.appConfig);\n    } else {\n      const updatedInstallationEntry: RegisteredInstallationEntry = {\n        ...installationEntry,\n        authToken: { requestStatus: RequestStatus.NOT_STARTED }\n      };\n      await set(installations.appConfig, updatedInstallationEntry);\n    }\n    throw e;\n  }\n}\n\nfunction isEntryRegistered(\n  installationEntry: InstallationEntry | undefined\n): installationEntry is RegisteredInstallationEntry {\n  return (\n    installationEntry !== undefined &&\n    installationEntry.registrationStatus === RequestStatus.COMPLETED\n  );\n}\n\nfunction isAuthTokenValid(authToken: AuthToken): boolean {\n  return (\n    authToken.requestStatus === RequestStatus.COMPLETED &&\n    !isAuthTokenExpired(authToken)\n  );\n}\n\nfunction isAuthTokenExpired(authToken: CompletedAuthToken): boolean {\n  const now = Date.now();\n  return (\n    now < authToken.creationTime ||\n    authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER\n  );\n}\n\n/** Returns an updated InstallationEntry with an InProgressAuthToken. */\nfunction makeAuthTokenRequestInProgressEntry(\n  oldEntry: RegisteredInstallationEntry\n): RegisteredInstallationEntry {\n  const inProgressAuthToken: InProgressAuthToken = {\n    requestStatus: RequestStatus.IN_PROGRESS,\n    requestTime: Date.now()\n  };\n  return {\n    ...oldEntry,\n    authToken: inProgressAuthToken\n  };\n}\n\nfunction hasAuthTokenRequestTimedOut(authToken: AuthToken): boolean {\n  return (\n    authToken.requestStatus === RequestStatus.IN_PROGRESS &&\n    authToken.requestTime + PENDING_TIMEOUT_MS < Date.now()\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getInstallationEntry } from '../helpers/get-installation-entry';\nimport { refreshAuthToken } from '../helpers/refresh-auth-token';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * Returns a Firebase Installations auth token, identifying the current\n * Firebase Installation.\n * @param installations - The `Installations` instance.\n * @param forceRefresh - Force refresh regardless of token expiration.\n *\n * @public\n */\nexport async function getToken(\n  installations: Installations,\n  forceRefresh = false\n): Promise<string> {\n  const installationsImpl = installations as FirebaseInstallationsImpl;\n  await completeInstallationRegistration(installationsImpl);\n\n  // At this point we either have a Registered Installation in the DB, or we've\n  // already thrown an error.\n  const authToken = await refreshAuthToken(installationsImpl, forceRefresh);\n  return authToken.token;\n}\n\nasync function completeInstallationRegistration(\n  installations: FirebaseInstallationsImpl\n): Promise<void> {\n  const { registrationPromise } = await getInstallationEntry(installations);\n\n  if (registrationPromise) {\n    // A createInstallation request is in progress. Wait until it finishes.\n    await registrationPromise;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app';\nimport { FirebaseError } from '@firebase/util';\nimport { AppConfig } from '../interfaces/installation-impl';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nexport function extractAppConfig(app: FirebaseApp): AppConfig {\n  if (!app || !app.options) {\n    throw getMissingValueError('App Configuration');\n  }\n\n  if (!app.name) {\n    throw getMissingValueError('App Name');\n  }\n\n  // Required app config keys\n  const configKeys: Array<keyof FirebaseOptions> = [\n    'projectId',\n    'apiKey',\n    'appId'\n  ];\n\n  for (const keyName of configKeys) {\n    if (!app.options[keyName]) {\n      throw getMissingValueError(keyName);\n    }\n  }\n\n  return {\n    appName: app.name,\n    projectId: app.options.projectId!,\n    apiKey: app.options.apiKey!,\n    appId: app.options.appId!\n  };\n}\n\nfunction getMissingValueError(valueName: string): FirebaseError {\n  return ERROR_FACTORY.create(ErrorCode.MISSING_APP_CONFIG_VALUES, {\n    valueName\n  });\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _registerComponent, _getProvider } from '@firebase/app';\nimport {\n  Component,\n  ComponentType,\n  InstanceFactory,\n  ComponentContainer\n} from '@firebase/component';\nimport { getId, getToken } from '../api/index';\nimport { _FirebaseInstallationsInternal } from '../interfaces/public-types';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { extractAppConfig } from '../helpers/extract-app-config';\n\nconst INSTALLATIONS_NAME = 'installations';\nconst INSTALLATIONS_NAME_INTERNAL = 'installations-internal';\n\nconst publicFactory: InstanceFactory<'installations'> = (\n  container: ComponentContainer\n) => {\n  const app = container.getProvider('app').getImmediate();\n  // Throws if app isn't configured properly.\n  const appConfig = extractAppConfig(app);\n  const heartbeatServiceProvider = _getProvider(app, 'heartbeat');\n\n  const installationsImpl: FirebaseInstallationsImpl = {\n    app,\n    appConfig,\n    heartbeatServiceProvider,\n    _delete: () => Promise.resolve()\n  };\n  return installationsImpl;\n};\n\nconst internalFactory: InstanceFactory<'installations-internal'> = (\n  container: ComponentContainer\n) => {\n  const app = container.getProvider('app').getImmediate();\n  // Internal FIS instance relies on public FIS instance.\n  const installations = _getProvider(app, INSTALLATIONS_NAME).getImmediate();\n\n  const installationsInternal: _FirebaseInstallationsInternal = {\n    getId: () => getId(installations),\n    getToken: (forceRefresh?: boolean) => getToken(installations, forceRefresh)\n  };\n  return installationsInternal;\n};\n\nexport function registerInstallations(): void {\n  _registerComponent(\n    new Component(INSTALLATIONS_NAME, publicFactory, ComponentType.PUBLIC)\n  );\n  _registerComponent(\n    new Component(\n      INSTALLATIONS_NAME_INTERNAL,\n      internalFactory,\n      ComponentType.PRIVATE\n    )\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getInstallationEntry } from '../helpers/get-installation-entry';\nimport { refreshAuthToken } from '../helpers/refresh-auth-token';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * Creates a Firebase Installation if there isn't one for the app and\n * returns the Installation ID.\n * @param installations - The `Installations` instance.\n *\n * @public\n */\nexport async function getId(installations: Installations): Promise<string> {\n  const installationsImpl = installations as FirebaseInstallationsImpl;\n  const { installationEntry, registrationPromise } = await getInstallationEntry(\n    installationsImpl\n  );\n\n  if (registrationPromise) {\n    registrationPromise.catch(console.error);\n  } else {\n    // If the installation is already registered, update the authentication\n    // token if needed.\n    refreshAuthToken(installationsImpl).catch(console.error);\n  }\n\n  return installationEntry.fid;\n}\n","/**\n * Firebase Installations\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerInstallations } from './functions/config';\nimport { registerVersion } from '@firebase/app';\nimport { name, version } from '../package.json';\n\nexport * from './api';\nexport * from './interfaces/public-types';\n\nregisterInstallations();\nregisterVersion(name, version);\n// BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\nregisterVersion(name, version, '__BUILD_TARGET__');\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Defines a client, as in https://en.wikipedia.org/wiki/Client%E2%80%93server_model, for the\n * Remote Config server (https://firebase.google.com/docs/reference/remote-config/rest).\n *\n * <p>Abstracts throttle, response cache and network implementation details.\n *\n * <p>Modeled after the native {@link GlobalFetch} interface, which is relatively modern and\n * convenient, but simplified for Remote Config's use case.\n *\n * Disambiguation: {@link GlobalFetch} interface and the Remote Config service define \"fetch\"\n * methods. The RestClient uses the former to make HTTP calls. This interface abstracts the latter.\n */\nexport interface RemoteConfigFetchClient {\n  /**\n   * @throws if response status is not 200 or 304.\n   */\n542-34.378 83.733-69.154 160.993-123.92 233.442 33.635-1.387 66.326-1.203 98.552-.041 22.263-62.617 23.346-134.855 35.627-202.006 11.417 68.562 10.566 139.445 33.483 205.83 42.962 3.082 85.69 7.198 129.35 10.926-55.67-79.151-118.213-155.037-155.118-249.365-.05-1.782-.1-3.396-.152-5.737-.162-7.156-.333-16.523-.488-25.82-.31-18.594-.559-36.914-.559-36.914z"}}]})(props);
};
module.exports.GiCancel = function GiCancel (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M256 16C123.45 16 16 123.45 16 256s107.45 240 240 240 240-107.45 240-240S388.55 16 256 16zm0 60c99.41 0 180 80.59 180 180s-80.59 180-180 180S76 355.41 76 256 156.59 76 256 76zm-80.625 60c-.97-.005-2.006.112-3.063.313v-.032c-18.297 3.436-45.264 34.743-33.375 46.626l73.157 73.125-73.156 73.126c-14.63 14.625 29.275 58.534 43.906 43.906L256 299.906l73.156 73.156c14.63 14.628 58.537-29.28 43.906-43.906l-73.156-73.125 73.156-73.124c14.63-14.625-29.275-58.5-43.906-43.875L256 212.157l-73.156-73.125c-2.06-2.046-4.56-3.015-7.47-3.03z"}}]})(props);
};
module.exports.GiCancer = function GiCancer (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M35.16 145.506C75.983 78.28 175.26 30.66 285.294 30.66c73.18 0 138.768 17.16 198.437 60.093l.464 96.793c-80.92-61.71-181.865-90.673-278.885-53.71 17.84 19.422 28.756 45.353 28.756 73.833 0 60.293-48.87 109.168-109.16 109.168-60.288 0-109.158-48.875-109.158-109.17-.005-23.08 7.168-44.522 19.413-62.162zm89.45 83.374c12.396 0 22.445-10.054 22.445-22.455 0-12.402-10.05-22.456-22.445-22.456-12.396 0-22.456 10.053-22.456 22.455 0 12.4 10.065 22.455 22.456 22.455zm260.892 47.792c-12.402 0-22.45 10.054-22.45 22.456 0 12.4 10.048 22.45 22.45 22.45 12.4 0 22.45-10.05 22.45-22.45 0-12.402-10.054-22.456-22.45-22.456zm89.45 83.374c-40.822 67.226-140.098 114.846-250.13 114.846-73.183 0-138.766-17.16-198.436-60.092l-.463-96.788c80.916 61.704 181.865 90.668 278.88 53.715-17.847-19.428-28.758-45.36-28.758-73.838 0-60.29 48.87-109.16 109.16-109.16s109.164 48.87 109.164 109.16c.004 23.073-7.17 44.51-19.42 62.156z"}}]})(props);
};
module.exports.GiCandleFlame = function GiCandleFlame (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M334.656 17.125c-39.668 10.85-74.78 27.46-100.75 51.97-.7-12.52-4.5-25.147-13.28-38.032-.99 44.914-50.315 103.934-30.5 153.53.003.01-.005.023 0 .032 7.68 30.364 37.266 53.535 65.468 58.313-2.05-19.67-7.09-37.707-14.47-54.72l17.157-7.437c8.366 19.287 13.92 39.993 16 62.47 23.252-3.66 41.33-23.623 38.283-67.594-3.658-52.788-.63-114.802 22.093-158.53zM209.53 258.72c-31.372.18-59.653 7.37-81.81 19.936-22.914 12.996-39.443 32.518-44.376 55.5-2.557 8.937-4.03 19.326-4.03 30.406 0 32.55 12.64 59.1 28.5 60.532V489.5h301.155v-18.47c1.204.15 2.44.22 3.686.22 16.484 0 29.844-13.362 29.844-29.844 0-15.464-11.78-28.173-26.844-29.687-2.632-46.515-15.848-80.1-41.875-103.47-23.49-21.094-56.093-33.432-98.592-41.78-.3 21.733-3.715 45.06-10.75 70.28l-18.032-5.03c7.006-25.113 10.208-47.738 10.22-68.533-4.84-.782-9.746-1.537-14.813-2.25-11.03-1.55-21.824-2.28-32.282-2.218zm-103.186 79.186h18.687c0 5.588 2.556 11.307 8.69 17.5 6.13 6.194 15.744 12.395 28.06 17.656 24.636 10.524 59.83 17.375 98.75 17.375 49.15 0 92.438-11.197 115.845-26.312l10.125 15.72c-28.443 18.366-74.097 29.28-125.97 29.28-41.077 0-78.3-7.003-106.092-18.875-13.897-5.936-25.473-13.075-34-21.688-8.528-8.612-14.094-19.157-14.094-30.656z"}}]})(props);
};
module.exports.GiCandleHolder = function GiCandleHolder (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M290.75 14.625c-14.073 0-47.344 43.993-47.344 79.97 0 26.674 11.15 44.41 38.375 46.81 3.648-21.18 3.137-42.01-3-62.874l17.908-5.28c6.65 22.616 7.458 45.273 4.093 67.625 27.623-3.88 37.283-20.537 37.283-46.28 0-35.977-33.655-79.97-47.313-79.97zm-45.188 140.063v11.843l-.187-3.905c.774 26.386-17.415 28.686-17.125 48.156.227 15.365 12.172 20.084 17.313 12.69v145.75h97.156v-83.5c6.51 7.5 19.83 1.552 20.092-16.22.31-20.772-16.87-25.295-20.093-48.22v-66.593c-32.392 10.276-65.8 9.795-97.158 0zM113.625 285.344c-19.435.005-37.23 10.322-48.094 26.125-14.485 21.068-17.477 52.02-.81 81.405 7.814 13.78 4.407 25.93-2.126 32.28-6.533 6.352-15.494 8.594-27.563-2.53l-12.655 13.72c17.56 16.183 40.3 14.805 53.25 2.217 12.95-12.587 16.81-34.69 5.344-54.906-13.474-23.753-10.43-46.47-.032-61.594 10.398-15.124 27.313-22.524 45.968-15.593 23.738 8.82 34.46 29.795 32.813 48.124-1.355 15.062-9.978 28.618-30.095 33.437h-25.688c3.313 6.736 7.145 13.262 11.407 19.533l.03 1c.213-.006.415-.025.626-.032 10.88 15.772 24.687 29.972 41.063 42.158H443c23.286-17.327 41.907-38.453 53.75-62.657H164.28c8.205-9.01 13.02-20.162 14.064-31.78 2.414-26.863-13.754-55.694-44.938-67.28-6.646-2.47-13.303-3.628-19.78-3.626z"}}]})(props);
};
module.exports.GiCandleLight = function GiCandleLight (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M258.75 23.563c-27.913 0-93.875 87.237-93.875 158.593 0 59.35 29.018 79.715 68.625 94.875-15.47-15.607-26.03-43.75-26.03-76.186 0-49.232 31.292-89.188 53.25-89.188 21.132 0 53.25 39.955 53.25 89.188 0 30.39-9.41 56.833-23.283 72.937 36.097-18.016 61.938-35.72 61.938-91.624 0-71.356-66.786-158.594-93.875-158.594zm6.72 175.906l-18.5 2.686c5.764 39.366 6.665 69.034 4.25 97.875-24.957-.97-49.677-5.972-73.69-14.75v95.47c-3.295 25.668-22.434 30.526-22.093 53.47.29 19.547 14.998 26.003 22.094 17.624v36.28h164.69v-88.343c8.615 10.89 27.17 3.06 27.53-21.31.432-29.117-24.597-34.605-27.53-68.814V285.28c-23.916 8.88-48.17 13.702-72.314 14.72 2.337-29.752 1.383-60.792-4.437-100.53z"}}]})(props);
};
module.exports.GiCandleSkull = function GiCandleSkull (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M253.104 22.578c-20.107 0-36.407 24.864-36.407 55.54 0 14.627 3.712 27.924 9.77 37.843-.797-3.59-1.227-7.4-1.227-11.353 0-21.304 12.457-38.572 27.822-38.572 15.366 0 27.825 17.27 27.825 38.572 0 4.027-.448 7.908-1.274 11.557 6.133-9.94 9.897-23.318 9.897-38.047 0-30.672-16.3-55.54-36.406-55.54zm-8.625 79.795c-3.055 12.47-6.142 26.436-3.298 40.94-8.287-1.01-16.575-2.958-24.862-5.82 9.937 28.745 14.647 57.702 3.748 87.278-16 14.62-32.728 27.616-47.52 38.335-9.616 6.97-8.897 18.14-4.433 22.663 2.232 2.26 5.295 3.785 11.748 2.43 6.453-1.357 16.117-6.333 27.883-17.92 5.477-5.395 12.057-7.237 20.416-9.216 8.36-1.978 18.263-3.21 28.584-3.304 20.642-.19 43.666 3.353 56.88 19.592 7.75 9.527 14.644 12.63 19.724 13.14 5.08.51 9.04-1.392 11.892-4.53 2.853-3.14 4.186-7.386 3.487-11.25-.7-3.866-3.072-8.03-10.7-11.653-17.862-8.484-35.915-21.494-51.493-37.217-12.106-29.452-8.637-58.902 3.578-88.348-9.837 3.664-19.674 5.752-29.51 6.4-3.613-11.36-1.362-23.237 2.026-37.074l-18.15-4.445zm12.438 174.072c-8.915.083-17.664 1.196-24.453 2.803-6.79 1.607-11.856 4.59-11.606 4.344-13.444 13.24-25.725 20.493-37.153 22.894-10.256 2.156-19.96-.205-26.695-5.627-21.038 17.212-33.722 40.734-32.33 71.636 2.607 57.89 28.36 96.284 58.69 113.104 28.96 16.058 61.78 13.472 87.425-11.93l-11.3-42.274 18.054-4.826 8.218 30.74c20.986-3.343 42.087-5.46 63.275-5.664 1.523-.014 3.048-.02 4.572-.013 19.34.07 38.748 1.778 58.203 5.63 1.013-31.385-.38-62.404-7.734-89.658l-29.46-4.492c2.29-18.12 21.336-32.636 38.835-35.996l-53.68-29.41c-.235.275-.464.555-.708.822-6.503 7.155-16.556 11.662-27.59 10.554-11.033-1.108-22.353-7.65-32.353-19.94-6.595-8.104-24.38-12.864-42.212-12.7zm-19.36 23.43l13.84 12.555c-13.42 14.796-24.91 36.053-24.787 61.01 15.837 2.025 31.16 7.527 42.18 20.964l-14.452 11.852c-8.717-10.63-21.02-14.297-37.256-15.133l-8.03-.412-.788-8c-3.423-34.676 11.938-63.7 29.293-82.835zm50.487 26.36c19.1-.178 43.927 16.05 46.56 36.872l-64.568 10.04c-11.24-33.82 1.155-46.753 18.008-46.91zm80.846 44.974l15.98 58.38-22.43-19.973-7.682 21.2c-8.4-21.78-15.746-44.162 14.133-59.608zM344.93 470.4c-5.53.124-11.065.404-16.608.784l3.592 24.076h13.664l-.648-24.86zm18.7.12l.642 24.74h13.367l-.12-23.924c-4.626-.38-9.256-.652-13.89-.817zm-53.948 2.376c-6.34.727-12.693 1.6-19.055 2.582l5.29 19.782h17.1l-3.335-22.364zm86.537.606l.11 21.758h13.323c.488-6.335.924-12.712 1.3-19.102-4.908-1.025-9.82-1.915-14.733-2.656z"}}]})(props);
};
module.exports.GiCandlebright = function GiCandlebright (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M182.5 20.563c24.226 185.95-94.27 281.193-69.688 372.937 3.67 13.694 10.22 26.198 18.907 37.375-2.572-7.143-4.053-14.664-4.22-22.5-1.053-49.328 50.494-92.216 87.344-161.25 11.533 31.27 23.798 68.703 16.75 116.28 62.933-18.27 110.746-66.518 121.187-117.655 37.003 66.223 41.693 141.46.876 196.78-.134-3.025-.612-6.104-1.53-9.186-6.996-23.464-39.652-36.488-72.688-28.03-61.143 15.66-69.61 98.658 16.625 85.217.44-.068.896-.144 1.343-.217 24.446-3.723 47.13-12.838 64.906-28.063C510.78 335.102 388.185 103.572 182.5 20.562z"}}]})(props);
};
module.exports.GiCandles = function GiCandles (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M346.166 120.959c5.287 26.437-22.463 28.126-26.338 49.516-.783 4.324 2.793 9.69 7.834 13.943 11.03-6.401 21.556-12.801 27.402-25.756.097 13.073.92 20.39-2.623 31.297 5.333-2.157 10.08-6.19 11.985-11.057 7.383-18.856 1.698-33.54-18.26-57.943zm-163.611 2.023c-21.363 13.165-33.867 38.582-26.338 58.645 1.657 4.417 5.718 7.613 10.545 9.605 8.38-11.958 10.617-28.168 13.261-44.097 3.989 14.592 9.184 28.781 7.565 45.242 6.85-2.286 13.368-7.432 15.334-13.91 5.72-18.853-19.685-28.345-20.367-55.485zM96.74 135.814c-19.958 24.403-35.38 45.633-27.039 68.829 2.187 6.08 7.948 10.77 14.563 13.507.122-9.129 4.439-17.323 7.867-25.714 2.359 9.506 9.671 17.402 18.232 24.322 4.23-2.75 7.71-6.663 9.203-11.063 6.99-20.583-28.113-43.444-22.826-69.88zm167.285 8.526c-19.958 24.402-31.972 44.678-27.04 68.83 1.525 7.47 7.162 15.453 14.165 19.236-1.3-16.011 3.756-29.904 7.659-44.181 2.546 15.337 4.714 30.935 12.351 42.748 7.482-4.333 13.94-11.595 15.692-16.75 6.99-20.583-15.823-42.744-22.827-69.883zm169.104 2.228c-19.958 24.403-35.379 40.432-30.902 63.56 1.305 6.744 7.394 13.195 14.138 15.76-1.621-13.913 3.574-25.908 7.563-38.242 2.487 12.662 4.614 25.533 11.83 35.428 4.74-2.801 8.626-6.759 10.012-10.838 6.99-20.583-17.928-39.23-12.641-65.668zm-253.695 53.914c-6.994-.021-14.281.932-22.057 3.518v235.002h48V204c-8.445-1.85-16.952-3.49-25.943-3.518zm159.4 3.707c-7.046.064-14.183 1.752-21.477 6.28l-.005-.117s-10.216 20.38-8.508 31.324c.99 6.346 5.824 6.058 8.426 3.16v194.166h52.214v-228.48c-10.166-3.026-20.31-6.426-30.65-6.333zM97.572 229.672c-11.386-.081-22.196 2.699-32.836 6.328v16.057c-5.88 9.183-16.389 27.662-13.816 39.033 1.645 7.27 8.429 8.425 13.816 6.453v141.459h60.64V408.92c5.319 1.33 11.807.387 13.411-4.94 2.514-8.348-7.465-21.792-13.41-28.84V236c-9.744-4.47-18.948-6.265-27.805-6.328zm328.662 6.02c-6.99-.017-15.63 2.987-26.97 10.943v192.367h48v-15.766c3.686-.033 9.122-8.008 10.986-19.949 3.35-21.465-9.668-46.281-10.986-48.726V246.635c-5.778-5.907-12.041-10.922-21.03-10.944zm-163.525 5.966c-6.944-.01-14.355 1.734-22.244 5.268v123.178c-4.607 8.986-8.612 19.573-6.916 27.068.968 4.278 3.72 6.432 6.916 7.086v34.744h41.68V246.926c-6.016-3.49-12.492-5.257-19.436-5.268zM16.814 456.998l20.002 30.004h438.368l20.002-30.004H16.814z"}}]})(props);
};
module.exports.GiCandlestickPhone = function GiCandlestickPhone (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M320.9 19.054c-39.32 0-71 31.68-71 71s31.68 71 71 71 71-31.68 71-71-31.68-71-71-71zm0 30c22.537 0 41 18.463 41 41s-18.463 41-41 41-41-18.463-41-41 18.463-41 41-41zM146.5 64.42a37.825 37.825 0 0 0-8.3.83c-29.027 6.162-49.944 25.765-62.878 51.578-12.934 25.812-18.633 57.932-19.178 91.888-1.09 67.913 18.283 143.263 49.238 190.287 10.45 15.873 24.974 24.52 41.96 28.866 6.516 1.665 13.427 2.814 20.827 3.713a57.1 57.1 0 0 1-.27-5.53c0-4.142.572-8.306 1.642-12.485-6.597-.813-12.504-1.8-17.738-3.14-14.19-3.63-23.288-9.02-31.387-21.323-27.905-42.392-47.307-115.925-46.277-180.1.515-32.087 6.1-61.815 17.275-84.115 11.175-22.3 27.19-37.078 50.522-42.03 6.646-1.412 10.758-.17 15.23 3.33 4.473 3.503 8.925 9.938 12.633 18.57 6.386 14.87 10.5 35.725 13.035 56.294h18.133c-2.558-22.05-6.74-45.028-14.63-63.396-4.43-10.315-10.045-19.352-18.073-25.64-6.02-4.714-13.61-7.504-21.764-7.6zm174.4 2.634c-12.81 0-23 10.19-23 23s10.19 23 23 23 23-10.19 23-23-10.19-23-23-23zm-23 108.977v137.75c.14 3.726 1.945 6.4 6.222 9.108 4.293 2.717 10.887 4.59 17.405 4.78 6.517.19 12.843-1.326 16.732-3.762 3.888-2.436 5.64-4.806 5.64-9.852V176.03a88.702 88.702 0 0 1-23 3.024c-7.95 0-15.66-1.055-23-3.023zm-127.315 3.024c1.274 18.84 3.492 61.976-.802 88.442-2.047 12.612-7.35 26.95-11.577 37.558h69.385c-4.224-10.61-9.528-24.946-11.575-37.558-4.295-26.466-2.076-69.603-.803-88.442h-44.627zm63.315 16v30h46v-30h-46zm-89 126v18h96v-18h-96zm138.736 5.96c-27.298 14.694-51.16 32.19-68.373 49.403-19.15 19.152-29.363 38.137-29.363 49.637 0 13.182 5.877 23.69 16.293 33.068 10.415 9.378 25.387 17.005 41.552 22.393 45.724 15.24 108.584 15.24 154.307 0 16.166-5.388 31.137-13.015 41.553-22.393 10.416-9.377 16.295-19.886 16.295-33.068 0-21-10.155-38.33-29.022-55.31-16.857-15.172-40.628-29.394-68.123-43.57a30.515 30.515 0 0 1-10.94 11.988c-.07.042-.14.08-.208.123 17.422 2.965 33.142 8.79 45.972 16.875 19.12 12.05 32.32 29.83 32.32 50.394 0 20.566-13.2 38.345-32.32 50.395-19.12 12.048-44.638 19.104-72.68 19.104-28.043 0-53.562-7.056-72.682-19.105-19.12-12.05-32.318-29.83-32.318-50.396 0-20.565 13.2-38.345 32.318-50.394 13.266-8.36 29.617-14.31 47.75-17.174a42.995 42.995 0 0 1-1.47-.89c-4.3-2.72-8.18-6.5-10.862-11.08zm37.264 28.04c-24.977 0-47.46 6.487-63.084 16.334-15.626 9.848-23.916 22.32-23.916 35.166 0 12.848 8.29 25.32 23.916 35.166 15.625 9.848 38.107 16.334 63.084 16.334 15.375 0 29.797-2.465 42.263-6.652-4.685-3.872-9.765-8.13-14.255-12.965-3.65-3.93-6.973-8.283-9.022-13.594-2.05-5.31-2.506-11.822-.262-17.904l16.887 6.23c-.707 1.917-.64 3.096.17 5.195.81 2.098 2.68 4.874 5.42 7.824 5.012 5.398 12.588 11.12 19.345 17.054.86-.5 1.714-1.005 2.537-1.524 15.625-9.847 23.918-22.318 23.918-35.166 0-12.847-8.293-25.318-23.918-35.166-15.626-9.847-38.105-16.334-63.082-16.334zm-8.584 11.076h16v18h-16v-18zm38.006 5.383h16v18h-16v-18zm-72.506 3.137h16v18h-16v-18zm-27.98 26.404h16v18h-16v-18zm125.876 0h16v18h-16v-18zm-97.943 19.512h16v18h-16v-18zm34.782 8.762h16v18h-16v-18z"}}]})(props);
};
module.exports.GiCandyCanes = function GiCandyCanes (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M109.963 27.656c-1.013.005-2.027.027-3.04.067-13.518.53-27.035 4.183-39.286 10.425L86.703 75.57c4.186-2.133 8.78-3.46 13.524-3.955l21.203-43.22c-3.796-.507-7.627-.755-11.467-.74zm292.074 0c-3.84-.016-7.67.232-11.467.74l21.203 43.22c4.745.493 9.338 1.82 13.524 3.954l19.066-37.422c-12.25-6.242-25.768-9.896-39.285-10.425-1.014-.04-2.028-.062-3.04-.067zm-247.72 13.028l-22.874 40.742c1.904 1.6 3.724 3.39 5.432 5.39l52.996-.402-5.22-10.246c-8.267-16.226-18.694-27.738-30.332-35.484zm203.365 0c-11.638 7.746-22.065 19.258-30.332 35.484l-5.22 10.246 52.995.402c1.708-2 3.528-3.79 5.432-5.39l-22.875-40.742zM31.54 70.19c-2.985 4.592-5.52 9.46-7.52 14.566-7.667 19.602-7.898 42.69 4.593 68.385l37.258-32.427c-.79-4.082-1.006-8.072-.718-11.904L31.54 70.19zm448.92 0l-33.612 38.62c.288 3.83.073 7.82-.72 11.903l37.26 32.428c12.49-25.695 12.26-48.782 4.59-68.384-1.997-5.105-4.533-9.974-7.517-14.567zM204.4 114.925l-51.427.39 14.53 28.514 51.428-.39-14.53-28.514zm103.204 0l-14.53 28.513 51.428.39 14.53-28.514-51.428-.39zM78.887 150.54L43.12 181.67l1.023 2.004c9.08 17.82 22.505 18.836 32.752 13.615 10.246-5.222 17.314-16.68 8.234-34.5l-6.243-12.25zm354.226 0l-6.242 12.25c-9.08 17.82-2.01 29.278 8.235 34.5 10.247 5.22 23.673 4.204 32.752-13.616l1.022-2.004-35.767-31.13zm-199.658 21.41l-51.428.392 14.528 28.512 51.427-.39-14.527-28.513zm45.09 0l-12.443 24.423 2.1 4.12 47.243.36 14.528-28.51-51.428-.392zm-16.035 57.025l-51.428.39 14.527 28.514 51.43-.392-14.53-28.513zm20.332.254l9.072 17.805 9.004-17.67-18.076-.136zm8.724 56.77l-51.427.39 14.526 28.512 51.428-.39L291.566 286zm-71.48.684l-14.18 27.828 28.47.217-14.29-28.046zm-28.707 56.34l-14.528 28.513 51.427.39 14.527-28.513-51.428-.39zm129.24 0l-51.427.39 14.528 28.514 51.428-.39-14.527-28.515zm-158.298 57.025l-14.527 28.51 51.43.39 14.527-28.51-51.43-.39zm187.356 0l-51.43.39 14.527 28.51 51.43-.39-14.527-28.51zm-214.805 57.034c-2.852 13.29 3.405 21.407 11.54 25.318 10.083 4.848 23.95 3.192 33.062-14.69l5.222-10.25-49.824-.378zm242.254 0l-49.824.38 5.222 10.247c9.112 17.884 22.98 19.54 33.06 14.692 8.137-3.91 14.394-12.03 11.542-25.318z"}}]})(props);
};
module.exports.GiCannedFish = function GiCannedFish (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M256 65c-65.3 0-124.4 10.69-166.36 27.5-20.99 8.4-37.64 18.3-48.6 28.7C30.09 131.5 25 141.8 25 152s5.09 20.5 16.04 30.8c10.96 10.4 27.61 20.3 48.6 28.7C131.6 228.3 190.7 239 256 239c65.3 0 124.4-10.7 166.4-27.5 20.9-8.4 37.6-18.3 48.6-28.7 10.9-10.3 16-20.6 16-30.8s-5.1-20.5-16-30.8c-11-10.4-27.7-20.3-48.6-28.7C380.4 75.69 321.3 65 256 65zm.1 13.53c51.3 0 97.8 6.57 132.1 17.57 17.2 5.5 31.4 12 41.9 20 10.6 7.9 18 18 18 29.9 0 11.9-7.4 22-18 29.9-10.5 8-24.7 14.5-41.9 20-34.3 11-80.8 17.6-132.1 17.6s-97.8-6.6-132.1-17.6c-17.2-5.5-31.43-12-41.95-20-10.51-7.9-17.95-18-17.95-29.9 0-11.9 7.44-22 17.95-29.9 10.52-8 24.75-14.5 41.95-20 34.3-11 80.8-17.57 132.1-17.57zm0 17.97c-49.8 0-94.8 6.6-126.7 16.7-15.9 5.1-28.5 11.2-36.49 17.2-8.01 6.1-10.81 11.3-10.81 15.6 0 4.3 2.8 9.5 10.81 15.6 7.99 6 20.59 12.1 36.49 17.2 31.9 10.1 76.9 16.7 126.7 16.7s94.8-6.6 126.7-16.7c15.9-5.1 28.5-11.2 36.5-17.2 8-6.1 10.8-11.3 10.8-15.6 0-4.3-2.8-9.5-10.8-15.6-8-6-20.6-12.1-36.5-17.2-31.9-10.1-76.9-16.7-126.7-16.7zM25 192.2V360c0 13.2 5.88 24.6 17.7 35.4 11.81 10.8 29.56 20.4 51.32 28.1C137.5 439 196.8 447 256 447c59.2 0 118.5-8 162-23.5 21.7-7.7 39.5-17.3 51.3-28.1 11.8-10.8 17.7-22.2 17.7-35.4V192.2c-1.2 1.3-2.4 2.5-3.7 3.7-13.3 12.6-31.8 23.4-54.3 32.3-44.8 18-105.8 28.8-173 28.8s-128.2-10.8-173.05-28.8c-22.45-8.9-40.94-19.7-54.27-32.3-1.28-1.2-2.5-2.4-3.68-3.7zM96 280l64.4 48.2c33.3-15.3 71.8-34.1 135.7-34.1 40 0 120 25.9 120 46 0 19.9-80 45.9-120 45.9-63.9 0-102.4-18.9-135.7-34.2L96 400z"}}]})(props);
};
module.exports.GiCannister = function GiCannister (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M336.438 20.375c-.93-.01-1.855.01-2.782.03-23.67.532-46.656 11.083-62.437 29.907l143.06 82.594c13.666-37.527-1.125-80.59-36.905-101.25-12.925-7.463-27.007-11.128-40.938-11.28zm-88.72 37.97l-9.812 17 44.22 25.53c10.07 5.815 16.038 16.205 19.374 27 3.336 10.795 4.395 22.475-1.375 32.47l-47.063 81.53c-5.4 9.354-14.777 15.994-25.53 19.313-10.754 3.318-23.383 3.12-34.47-3.282l-45.437-26.22L79.187 350.22l168.875 97.53 23.094-40-45.906-26.594-8.063-4.687 4.657-8.064L336.72 168.75l4.655-8.125 8.125 4.72 46.125 26.718 20.938-36.25-168.844-97.47zm-74.343 1.03l-9.344 16.188 17.095 9.874-52.906 91.72-17.126-9.876-9.344 16.19 17.125 9.874-.063.125 83.594 48.25c5.86 3.38 12.94 3.655 19.625 1.593 6.686-2.063 12.448-6.63 14.845-10.782L283.938 151c1.39-2.408 2.03-10.11-.282-17.594-2.313-7.484-7.217-14.232-10.875-16.344l-16.467-9.5.125-.218-83.063-47.97zm45.375 54.094c4.968.015 10.01 1.284 14.656 3.968 14.163 8.176 18.958 26.024 10.78 40.187-8.176 14.163-26.02 18.928-40.186 10.75-14.163-8.177-18.958-25.993-10.78-40.156 5.11-8.853 14.003-14.04 23.405-14.69.705-.047 1.415-.064 2.125-.06zm-52.156 51.624c2.72.05 5.505.8 8.125 2.312 7.982 4.61 10.583 14.204 6.28 21.656-4.303 7.454-13.92 10.017-21.906 5.407-7.984-4.61-10.553-14.205-6.25-21.657 2.69-4.658 7.452-7.41 12.594-7.688.385-.02.767-.038 1.156-.03zm181.656 21.094L242.687 369.625l41.125 23.844 105.563-183.44-41.125-23.843zm-137.313 4.5c2.727.05 5.537.8 8.157 2.312 7.983 4.61 10.553 14.204 6.25 21.656-4.303 7.453-13.89 10.017-21.875 5.406-7.976-4.604-10.565-14.175-6.282-21.625v-.03c2.69-4.66 7.45-7.41 12.593-7.688.387-.022.768-.04 1.157-.032zM83.313 374.217c-17.224 38.714-2.76 84.968 34.75 106.626 37.522 21.664 84.817 11.05 109.72-23.25L83.31 374.22z"}}]})(props);
};
module.exports.GiCannonBall = function GiCannonBall (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M18.22 19.22V144.5l24.19 19c1.02-5.3 2.84-10.8 5.31-16.5 7.36-16.9 20.6-35.6 38.22-53.25 17.66-17.62 36.26-30.86 53.26-38.22 5.4-2.37 10.7-4.14 15.8-5.19l-25.4-31.12zM164.1 68c-4.3.15-10.5 1.65-17.4 4.69-14 6.07-31.3 18.07-47.55 34.31-16.21 16.2-28.21 33.5-34.28 47.5-3.03 7-4.53 13.1-4.68 17.4-.13 3.5.46 5.4 1.28 6.6 5.27 4.8 12.65 10.2 18.47 15.3 5.09 4.5 11.53 6 17.5 5.4 5.96-.6 11.96-2.7 18.26-5.7 12.7-6.2 26.8-16.5 40.3-30 13.4-13.5 23.8-27.6 29.9-40.2 3.1-6.4 5.2-12.4 5.8-18.3.5-5.99-.6-12.73-5.4-17.53-4.8-5.01-10.5-12.16-16-18.35-2-.67-4-1.03-6.2-1.12zm9 35.2c-.3 2.6-1.6 6.9-4 11.9-4.8 10.1-14.1 22.9-26.3 35.2-12.3 12.2-25.1 21.5-35.2 26.4-5 2.4-9.34 3.6-11.97 3.9-1.76.2-2.55-.5-2.51-2.5.25-2.6 1.51-6.9 3.93-11.9 4.85-10.1 14.15-22.9 26.35-35.2 12.2-12.2 25.1-21.5 35.1-26.3 5-2.5 9.4-3.7 12-4 2.1.1 2.8.6 2.6 2.5zm17.5 99.9l91.6 137.5-54.9 4.8 84.7 75.5-41.3 16.2c80.9 53.3 172.4 74.5 205.1 41.7 32.8-32.7 16.4-131.5-35.7-185.5l-4.1 41.9-59.3-89.2-7.6 57zm241.9 192.4c21.8 0 39.3 17.4 39.3 39.3 0 21.8-17.5 39.3-39.3 39.3-21.8 0-39.3-17.5-39.3-39.3 0-21.9 17.5-39.3 39.3-39.3z"}}]})(props);
};
module.exports.GiCannonShot = function GiCannonShot (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M168.875 11.395l86.455 98.443c2.175-1.122 4.337-2.206 6.47-3.215 14.37-6.805 27.684-11.083 39.76-12.103.75-.064 1.498-.113 2.243-.15L242.69 11.396h-73.815zM18.348 64.145v27.722l.21-.25 128.432 107.3c3.262-3.764 6.643-7.526 10.127-11.276L18.347 64.147zm287.896 48.835c-.982.017-2.017.07-3.11.163-8.734.738-20.327 4.21-33.337 10.37-.564.268-1.146.567-1.715.844l30.996 35.295c1.406-.72 2.808-1.43 4.193-2.1 13.245-6.395 25.504-10.477 36.683-11.554.592-.057 1.183-.1 1.774-.14l-21.385-29.032-.344.344c-2.62-2.62-6.88-4.304-13.754-4.19zm-287.896 2.817V264.15l69.13 47.274c.036-.995.088-1.993.172-2.996 1.02-12.077 5.298-25.392 12.104-39.762 8.213-17.34 20.215-36.21 35.324-55.348l-116.73-97.52zm326.18 48.625c-.875.025-1.802.083-2.784.178-7.853.756-18.432 4.027-30.346 9.78-23.826 11.508-53.028 32.712-80.87 60.554-27.843 27.84-49.048 57.044-60.555 80.87-5.754 11.914-9.025 22.494-9.782 30.346-.755 7.853.795 12.184 3.197 14.586 2.402 2.402 6.735 3.952 14.588 3.196 7.852-.757 18.432-4.028 30.345-9.782 7.81-3.77 16.202-8.6 24.928-14.347-17.195 39.23-28.067 89.333-34.394 153.564 37.517-129.093 80.838-109.43 114.544-6.287-18.62-109.564 99.38-61.623 185.008 5.397-66.417-101.782-124.625-177.518 4.55-188.135-124.058-5.07-140.995-44.53-21.876-102.653-58.372 6.19-105.555 15.9-143.54 32.65 4.806-7.536 8.915-14.8 12.206-21.613 5.754-11.914 9.023-22.494 9.78-30.346.756-7.852-.794-12.183-3.196-14.585-1.8-1.8-4.688-3.122-9.332-3.352-.774-.038-1.596-.046-2.47-.02zm-173.442 35.65c-3.353 3.61-6.6 7.226-9.734 10.842l37.066 30.97c2.84-3.234 5.753-6.464 8.768-9.687l-36.1-32.125zm142.27 1.117c3.84.122 6.953 1.23 9.142 3.42 6.837 6.836 3.118 22.676-8.182 41.52-29.24 17.088-52.02 39.92-69.58 70.706-20.12 12.694-37.26 17.173-44.45 9.984-11.437-11.437 6.648-48.066 40.396-81.814 26.365-26.366 54.49-43.17 70.986-43.81.577-.02 1.14-.024 1.69-.007zm-163.9 24.138c-14.242 18.11-25.428 35.748-32.81 51.338-6.163 13.01-9.634 24.602-10.373 33.336-.738 8.734 1.033 13.87 4.026 16.86l-.1.1 31.152 21.304c.034-1.296.112-2.6.238-3.91 1.076-11.177 5.158-23.437 11.555-36.68 7.777-16.104 19.084-33.65 33.275-51.465l-36.965-30.882z"}}]})(props);
};
module.exports.GiCannon = function GiCannon (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M142.373 116.285l-15.92 9.79 19.223 31.257c-17.208 13.06-28.326 33.725-28.326 56.994 0 21.555 9.55 40.866 24.632 53.977l-71.76 92.16L20.66 379.69v17.828h71.834l73.588-95.78h8.22c-5.383 42.56 21.434 83.807 63.995 95.21 46.448 12.447 94.437-15.26 106.883-61.708 3.015-11.253 3.667-22.595 2.273-33.502h35.3v-30.61l109.858-7.968v-96.365l-286.655-21.91c-5.48-1.345-11.2-2.072-17.094-2.072-9.53 0-18.62 1.88-26.934 5.265l-19.553-31.793zM260.637 244.04c5.936-.01 11.978.757 17.998 2.37 36.692 9.832 58.323 47.3 48.492 83.992-9.832 36.692-47.3 58.326-83.992 48.494-36.692-9.83-58.326-47.3-48.494-83.992 7.99-29.812 34.222-49.684 63.46-50.814.843-.033 1.69-.05 2.537-.05zm3.633 19.747l-8.225 30.697-22.47-22.47-13.216 13.215 22.47 22.47-30.695 8.226 4.838 18.053 30.695-8.226-8.225 30.695 18.053 4.835 8.225-30.693 22.47 22.47 13.214-13.216-22.468-22.47 30.695-8.226-4.837-18.052-30.695 8.224 8.224-30.697-18.052-4.838z"}}]})(props);
};
module.exports.GiCanoe = function GiCanoe (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M256.778 68.814c-3.52.132-8.176 1.24-12.394 3.12-4.821 2.147-9.08 5.35-10.95 7.697-.904 1.136-1.165 1.924-1.21 2.127l.43.701 16.894 48.273c2.802 6.565 6.66 9.584 11.082 11.086 4.449 1.512 9.782 1.192 14.537-.789 4.755-1.98 8.705-5.526 10.722-9.707 2.007-4.157 2.547-8.97-.207-15.562l-22.326-44.828-.002-.002c-.672-1.302-1.527-1.938-5.14-2.112a16.895 16.895 0 0 0-1.436-.004zm33.266 84.424c-5.14 3.557-10.91 5.906-16.608 6.94l7.354 17.422a278.9 278.9 0 0 0-5.596 1.943c-12.78 4.607-27.478 10.508-37.275 19.506-9.451 8.68-16.245 22.202-21.672 34.002a282.955 282.955 0 0 0-7.293 17.398c-23.803 14.552-45.156 28.97-52.934 68.66 25.558 1.772 40.744 4.549 84.135 2.762-1.585-9.478-3.145-21.732 6.121-34.758a31.449 31.449 0 0 1-10.12-6.449c-15.085-14.282-12.484-39.002 2.68-55.102 3.574-4.153 7.068-9.332 11.257-13.257 5.472-5.026 19.287-11.536 31.205-15.832 2.27-.819 4.433-1.553 6.511-2.243l40.213 95.272c-4.76 2.396-9.901 4.745-15.06 6.494-10.363 3.513-19.712 4.202-26.588.625-6.876-3.576-11.14-6.357-14.723-9.369-8.437 2.841-17.349 2.983-25.219-.078 9.388 11.082 22.136 20.678 32.586 26.148 12.223 6.313 27.186 3.971 39.723-.279 5.848-1.983 11.37-4.463 16.303-6.906l8.29 19.64c3.079-1.935 6.376-3.547 9.764-4.863a60.291 60.291 0 0 1 6.793-2.191l-8.879-21.035 6.274-3.333-8.44-15.896-4.859 2.582-38.814-91.959 6.826-1.766-4.504-17.423-9.054 2.343zm-18.606 75.8a19.672 19.672 0 0 0-1.68.007c-5.832.27-12.386 3.089-17.853 8.893-9.719 10.318-9.844 23.532-3.41 29.625 6.434 6.092 19.586 5.21 29.305-5.108 9.719-10.318 9.844-23.532 3.41-29.625-2.463-2.332-5.91-3.643-9.772-3.793zm218.498 53.95c-34.024 15.84-70.523 27.728-107.85 36.291 4.59 1.964 8.421 6.364 10.007 10.46l22.66 45.497.11.262c1.971 4.673 2.994 9.38 3.183 13.92 9.949-7.106 18.208-18.26 26.97-32.385 7.378 2.756 14.126 5.466 20.29 8.137 3.5-6.443 6.684-13.523 9.484-21.047 7.494-20.142 12.35-42.591 15.146-61.135zM22.188 308.043c-.773 18.548 2.054 38.377 8.436 54.734 4.675 11.984 10.995 21.82 18.795 28.545 11.39-7.493 16.875-15.566 16.517-22.83 31.708 4.607 49.836 8.36 70.985 40.455 35.327-2.006 45.846-20.052 46.226-34.18 27.33 9.146 57.483 22.265 73.346 35.233 26.294-5.579 54.363-17.684 64-48 4.357 1.772 8.401 3.747 12.207 5.83-5.087-12.27-7.485-24.1 1.61-34.562 1.998-2.227 4.257-4.184 6.683-5.918-35.918 5.91-72.047 9.005-106.979 9.752-84.081 1.797-160.672-9.833-211.826-29.059zm349.42 27.215c-3.103-.042-7.688.763-11.994 2.435-4.922 1.911-9.517 4.932-11.912 7.6-2.392 2.664-2.522 3.646-2.063 5.025l11.743 33.547c12.977 8.961 24.557 15.925 40.068 13.795.464-.064.92-.14 1.377-.217 1.73-3.995 2.084-8.623-.514-14.841l-22.384-44.944c-.987-1.685-1.482-2.146-3.086-2.33-.435-.05-.87-.053-1.235-.07z"}}]})(props);
};
module.exports.GiCantua = function GiCantua (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M244.1 17.52h-18l1.1 22.18c-23.8 16.98-41.3 32.53-56.1 49.34 4 2.69 6.8 6.59 8.9 10.63.7 1.43 1.4 2.83 1.9 4.23 12.4-14.63 26.9-28.02 46.4-42.69l2.9 56.69c5.8-2 11.3-2.4 15.5-2.2.8 0 1.6.1 2.4.2l-2.7-53.27c25.4 18.26 44.4 33.16 58.7 49.07 3.4-5.7 8-9.9 13.3-12.14-18-19.92-42-37.74-73.2-59.89zm-84.2 86.08c-1.3.1-5.8 1-11.9 6.9-7 6.7-15.4 18.9-22.8 37.1-16.8 41.6-24.2 85.5-34.99 129.6l-.45 1.9-1.16 1.5c-10.34 13.4-24.97 20.7-40.68 25.5-5.47 1.7-11.15 3.1-16.91 4.3l36.97 12.5.23 18.7 32.09-10.3 24.1 31.6 9.4-20.7 46.3 1.5c-5-3.8-9.9-7.8-14.5-12-12.3-11.4-23-23.9-25.6-39l-.3-1.8.5-1.8c10.9-45.2 26.8-88.1 30-132.5.7-9.9.3-23.7-1.8-34.9-1.1-5.6-2.7-10.5-4.3-13.7-1.7-3.2-3.2-4.2-3.8-4.4zm166.4 12.3c-.2 0-.4.1-.5.1-2.1.7-5.4 2.9-7.5 10.6-2.1 7.6-2.5 20.5 2.3 39.5 11.1 43.9 29.3 86.8 46.5 128.5l.7 1.7v1.9c-.5 20.3-9.1 38.3-21.4 55.4l27.5-12.5 18 21.7 20.1-27.7 38.9 11.4-4.7-29.2 26.9-13.9c-22.4-3.8-44.2-12.2-57.7-25.2l-1.3-1.3-.7-1.7c-17.9-43-28.3-82.6-52-120.3-5.6-8.9-13.2-20.3-20.8-28.5-3.7-4.1-7.4-7.4-10.3-9-2.1-1.3-3.3-1.5-4-1.5zm-82.1 17.8c-4.1 0-8.3.8-12.2 4.2-4.6 4-9.8 12.7-11.8 31.7-4.6 43.9.3 136.1 2.1 181.4-5.7 17.9-18.7 30.9-32.6 40-4.8 3.2-9.9 6-15.1 8.8l39 1.8 5.4 17.9 27.9-18.8 32.1 23.6 3.2-22.3 33.3-9.2c-17-9.9-29.5-23.6-37.4-39.9l-.8-1.7-.1-1.8c-1.9-46.3-2.3-140.9-11.4-183.6-2.1-9.8-5.2-18.5-8.8-24.1-3.7-5.7-6.9-7.8-11.1-8zM93.69 352.3l-18.23 5.9c-12.2 23.5-26.59 44-49.6 56.4l8.54 15.8c23.23-12.5 38.65-31.2 50.77-51.9-.91 27.5 6.12 68 16.73 93.1l11.5-19.3c-10.4-24.7-10.9-55.5-9.1-86.1zm325.51 3.6l-11.7 16.2c.6 2.6 1.2 5.2 1.7 7.8 3.7 18.8 4 35.9-5.3 55.4l16.2 7.8c11.2-23.6 10.9-45.8 6.8-66.7-.4-2-.8-4-1.3-6 13.5 14.2 30.9 26.2 55.5 33.4l5-17.2c-18.6-5.5-31.6-13.5-42.3-23.5zm-172.7 66.8l-15.8 10.6c-5 18.2-12.4 35.3-23 49.8l14.5 10.6c14.7-20 23.6-43.4 28.8-67.7zm17 12.6c6.8 21.6 13.1 37.6 30.5 59.2l17.4-5.8c-9-11.1-15.7-22.3-21-33.5z"}}]})(props);
};
module.exports.GiCapeArmor = function GiCapeArmor (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M155.8 25.14c-30.2.34-63.52 4.32-88.77 13.34-13.21 4.71-24.1 10.78-31.26 17.73-4.74 4.6-7.78 9.44-9.39 14.9 33.34.04 92.02 1.38 132.22 28.78 9.7-12.64 12-27.08 10.5-40.9-1.6-14.1-7.8-26.92-13.3-33.85zm200.4 0c-5.5 6.93-11.7 19.75-13.3 33.85-1.5 13.82.8 28.26 10.5 40.9 40.2-27.4 98.9-28.78 132.2-28.78-1.6-5.46-4.6-10.3-9.4-14.9-7.1-6.95-18-13.02-31.2-17.73-25.3-9.02-58.6-13-88.8-13.34zM187.4 66.59c0 7.94-1.2 16.14-3.9 24.16C205.8 112.5 231 123 256 123s50.2-10.5 72.5-32.26c-2.6-7.74-3.8-15.64-3.9-23.31-46.9 7.73-92.6 6.81-137.2-.84zm-84.3 30.26c-.8 15.65-1.8 32.45-3.24 50.25 9.44-3.2 19.54-8.2 29.14-14.6 7.5-5 14.6-10.8 20.8-16.9-12.8-8.9-29.3-14.8-46.7-18.75zm305.8.01c-17.4 3.94-33.9 9.84-46.7 18.74 6.2 6.1 13.3 11.9 20.8 16.9 9.6 6.3 19.7 11.4 29.1 14.6-1.4-17.7-2.4-34.6-3.2-50.24zM178 110.1c-9.6 14.2-23.6 27.1-39 37.4-13 8.7-27 15.5-40.55 18.9 5.35 6 10.95 12.5 16.45 19.3 22.2 14.6 40.8 21.3 61.1 21.3 20.9 0 44.6-7.4 76-23.1l4-2 4 2c31.4 15.7 55.1 23.1 76 23.1 20.3 0 38.9-6.7 61.1-21.3 5.5-6.8 11-13.3 16.4-19.3C400 163 386 156.2 373 147.5c-15.4-10.3-29.4-23.2-39-37.4-23.6 20.3-50.7 30.9-78 30.9-27.3 0-54.4-10.6-78-30.9zm-82.12 80.8c-9.74 94.8-28.76 207-63.29 302.4 24.59-12 50.33-21.9 76.81-29.6-8.3-19.7-16.54-50.7-5.9-82.5 14.3-43.2 40.6-85.3 47.4-95.7-1.4-12.2-11.8-34.7-26.4-56.5-8.7-13.1-18.8-26.3-28.62-38.1zm320.22 0c-9.9 11.8-19.9 25-28.6 38.1-14.6 21.8-25 44.3-26.4 56.5 6.8 10.4 33.1 52.5 47.4 95.7 10.6 31.8 2.4 62.8-5.9 82.5 26.5 7.7 52.2 17.6 76.8 29.6-34.5-95.4-53.5-207.6-63.3-302.4zM247 206.2c-26.7 12.2-49.4 18.8-71 18.8-12.7 0-24.8-2.3-37-6.7.2.3.3.5.5.7 15.2 22.8 27.4 45 29.2 64.4 6.4 5.3 17.9 10.4 32.4 13.8 5.2 1.2 10.8 2.3 16.5 3.1 2.3-4.9 6-9.2 10.4-12.5 5.3-4 11.8-6.7 19-8v-73.6zm18 0v73.6c7.2 1.3 13.7 4 19 8 4.4 3.3 8.1 7.6 10.4 12.5 5.7-.8 11.3-1.9 16.5-3.1 14.5-3.4 26-8.5 32.4-13.8 1.8-19.4 14-41.6 29.2-64.4.2-.2.3-.4.5-.7-12.2 4.4-24.3 6.7-37 6.7-21.6 0-44.3-6.6-71-18.8zm-9 90.8c-7 0-13.2 2.2-17.2 5.2-4.1 3.1-5.8 6.4-5.8 9.8 0 3.4 1.7 6.7 5.8 9.8 4 3 10.2 5.2 17.2 5.2s13.2-2.2 17.2-5.2c4.1-3.1 5.8-6.4 5.8-9.8 0-3.4-1.7-6.7-5.8-9.8-4-3-10.2-5.2-17.2-5.2zm-93.8 4.3c-8.7 14-29.6 49.3-41.7 85.5-13.3 40.1 10.5 80.8 13.8 86.2 30 14.2 75.8 22 121.7 22 45.9 0 91.7-7.8 121.7-22 3.3-5.4 27.1-46.1 13.8-86.2-12.1-36.2-33-71.5-41.7-85.5-9.4 6.1-21.4 10.4-34.7 13.5-6 1.4-12.3 2.6-18.9 3.5-1.7 7.2-6.3 13.4-12.2 17.9-7.5 5.6-17.3 8.8-28 8.8s-20.5-3.2-28-8.8c-5.9-4.5-10.5-10.7-12.2-17.9-6.6-.9-12.9-2.1-18.9-3.5-13.3-3.1-25.3-7.4-34.7-13.5z"}}]})(props);
};
module.exports.GiCape = function GiCape (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M257.1 18.46c-17 19.58-32.7 35.31-55.1 42.98 41.5 68.46 139.9 119.76 241.2 62.36 18-14.1 26.7-31.45 34.9-47.34-98.9-5.45-164.8-19.81-221-58zM225 111.1c-18.9 38.3-41 72.2-65.1 100.2-40.8 47.5-87.03 78.7-132.67 85.3 6.47 19.8 10.43 59.2 25.84 72.6 45.63 18.5 132.83-9.1 164.63-38.7 16.1-16.4 24-36.6 34.2-60.9-2 35.2-13.3 56.6-27.7 72.4-18.5 18.2-36.6 30.8-59 37.8 11.9 22.3 16.8 49.7 27.7 67.8 4.4 6.7 8 9.5 14.6 9.4 42-10.9 74.4-45.9 110.9-60.5 55.3-29.3 65.3-74 67-85.5-1.1 28.7-12.7 67.5-31.7 83.6 33.8 12.4 47.5 67.3 52.3 90.2 15.2-14 33.2-35.4 48.1-60.1C473 393.5 487 357.2 487 324.2c-.3-38.8-17-76.4-26.5-118.2-5-21.7-7.7-44.7-4.6-69.3-131.7 55.7-190.9 9.4-230.9-25.6z"}}]})(props);
};
module.exports.GiCapitol = function GiCapitol (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M255.594 19.406l-15.78 59.125c5.184-.58 10.44-.874 15.78-.874 5.338 0 10.595.293 15.78.875l-15.78-59.124zm0 76.97c-57.894 0-106.156 40.154-118.656 94.186H374.25c-12.5-54.032-60.762-94.187-118.656-94.187zM19.406 209.25v33.53h472.406v-33.53H19.406zM71.5 261.47v159.124h50.406V261.47H71.5zm105.97 0v159.124h50.405V261.47H177.47zm105.936 0v159.124h50.406V261.47h-50.406zm105.938 0v159.124h50.406V261.47h-50.406zm-161.78 177.655l-31.658 56.656h120.5l-32.062-56.655h-56.78zm-208.158.156v33.533h167.938l18.72-33.532H19.405zm286.531 0l18.97 33.533h166.906V439.28H305.938z"}}]})(props);
};
module.exports.GiCapricorn = function GiCapricorn (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M222.733 125.562c-16.18-2.68-22.596 79.184-24.955 118.284l-67.715.1c-2.892-103.625-4.257-113.83-19.966-141.418-7.18-12.618-28.344-14.49-28.344-14.49 0-13.44-.135-68.432-.135-68.432 37.287 0 63.14 26.92 79.424 56.544l2.427-5.455c7.912-16.947 26.824-49.99 64.08-49.99 117.498 0 42.747 323.118 145.476 296.482 6.634-1.72 17.087-23.246-3.94-23.246-37.993 5.053-52.152 210.634-175.335 193.995-11.794-1.59-18.916-4.83-18.916-4.83l8.505-73.157c22.63 2.82 54.084-15.122 58.147-26.623 17.15-48.603 44.853-168.058 133.866-168.058 34.016 0 72.754 32.918 72.754 90.73 0 94.424-169.585 154.09-208.16-49.384-8.235-43.37-4.317-134.282-17.214-131.05z"}}]})(props);
};
module.exports.GiCaptainHatProfile = function GiCaptainHatProfile (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M404.7 79.78h-2.8c-7.5.26-15.8 1.73-24.8 4.3-18 5.16-38.4 14.56-59.3 25.78-41.9 22.4-85.8 52-121.5 68.6-26.4 12.4-59.3 20.4-89.8 27.5-30.5 7.1-58.95 13.4-74.36 20.6-7.13 3.4-10.9 6.9-12.71 9.9-1.8 2.9-2.1 5.2-1.44 8.4 1.32 6.4 8.57 15.4 18.49 21.9l3.29 2.1c162.63-2.3 289.43-13.7 387.73-52.6 2.1-17.6 6.7-34.7 16.5-48.5v-.1l.1-.1c24.5-32.2 8.9-72.58-22.4-84.89-5-1.95-10.7-2.91-17-2.93zm21.9 185.12c-44.2 25.1-103.8 37-169.2 41.2-68.7 4.4-143.7.1-213.52-7.8l1.89 14c31.19 3.2 98.53 11.8 172.83 11.5 77.2-.3 159.6-11.3 208.6-46.2-.2-4.1-.4-8.3-.6-12.7zm7.1 30.2c-46.9 31.5-113.8 42.9-179.9 45.8 44.7 39 89.3 55.1 127.3 59.1 45.2 4.8 81.5-8.7 94.8-19.8 13-10.8 17.5-19.5 18.3-26.2.7-6.8-2-13.3-8.2-20.5-11.3-13.4-33.5-26.4-52.3-38.4z"}}]})(props);
};
module.exports.GiCapybara = function GiCapybara (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M374 74.47c-7.1.26-10.8 6.79-4.3 15.89l24-3.41c-6.5-9.11-14.1-12.69-19.7-12.48zm-38 9.1c-3.5 0-6.6 1.01-9 2.73-7.1 5.1-7.6 16.8 7.9 28-8.9 15.9-29.8 45.8-60.2 43.2l32.1 9.8c-2.7 1.6-5.7 3.1-9.2 4.5C118.7 119.4 29.29 275.1 29.29 275.1c51.1 69.9 4.1 98.9 4.1 98.9l7.81 63h28.81l3.19-41s32.5-3 62.8-63.3c29 9.8 71 9.1 102.6 3.3l-4.1 7.1-37.4 11.1c31.2 2.8 58.5-2.3 78.7-8.5-3.4-15.1-4.5-31.5 3.5-52.8L307.2 437h25.9s-4.6-75 34.4-143.5c5-7.8 9.4-15.1 13.1-23.7l2 11.1-10.5 23.2s39-15.7 29.2-96c23 3.9 45.6 1.7 66.6-4.6 5.3-1.7 9.5-5.8 11.2-11 5-15.6 9.5-32.5 10.4-47.3l-9.7.8c-.2-15.3-21.2-13.1-14.9.8l-10.5.5-4.9-15.5s16.9-12.3 38.4-7.1c-.9-3.2-2.2-6-3.9-8.6-13.8-20.8-54.3-27.8-122.4-15.6-8-12.24-17.8-16.96-25.6-16.93zm49.9 33.83c12.4 1.4 21.9 4.3 30.2 9.6h-15.9c-1.6 4.8-7.5 8.4-14.5 8.4s-12.9-3.6-14.5-8.4h-15.5c4.2-3 15.3-9.7 30.2-9.6zm9.6 181.6c-15.2 30.3-34.5 33.8-34.5 33.8-13.4 37.7-10.4 71.8 1.8 103.9H385c-3.8-44.7-3.2-78.4 10.5-137.7zm-251.1 50.3L126.6 376l27.2 25.1 13.9 35.6h29.9l-20.1-81.8z"}}]})(props);
};
module.exports.GiCarBattery = function GiCarBattery (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M73 81v46h46V81H73zm320 0v46h46V81h-46zM25 145v16h462v-16H25zm0 34v252h462V179H25zm382 21h18v23h23v18h-23v23h-18v-23h-23v-18h23v-23zM64 223h64v18H64v-18z"}}]})(props);
};
module.exports.GiCarDoor = function GiCarDoor (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M149.6 41L42.88 254.4c23.8 24.3 53.54 58.8 78.42 97.4 24.5 38.1 44.1 79.7 47.1 119.2h270.3L423.3 41H149.6zM164 64h230l8 192H74l90-192zm86.8 17.99l-141 154.81L339.3 81.99h-88.5zM336 279h64v18h-64v-18z"}}]})(props);
};
module.exports.GiCarKey = function GiCarKey (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M285.628 42.475c-39.602 0-73 28.513-73 65 0 18.43 8.528 34.82 22.066 46.533l8.473-16.67c-7.876-8.202-12.54-18.667-12.54-29.863 0-25.37 23.91-47 55-47s55 21.63 55 47c0 17.403-11.253 33.046-28.356 41.154l-7.482 21.556c1.9-.462 3.774-.986 5.613-1.58l9.158 16.013c-10.326 7.263-20.32 16.266-31.034 27.472l81.35 179.392c50.265 2.318 98.764-24.335 123.754-68.01L385.8 158.635c-20.166 4.027-36.39 9.054-50.875 16.598l-8.09-14.144c19.057-11.615 31.793-31.09 31.793-53.613 0-36.487-33.398-65-73-65zm-122.666 5.947c-2.66.03-5.454.47-8.152 1.348-6.17 2.004-11.39 6.134-13.66 10.59l-.288.57-64.904 92.297c-2.135 4.452-2.382 10.947-.457 16.97 1.97 6.157 6.045 11.305 10.202 13.422l143.682 73.16c4.072 2.075 10.59 2.405 16.648.427 5.945-1.94 10.996-5.885 13.403-10.492l25.36-74.26c.05 0 .1.003.15.004l6.327-18.23c-.086.008-.175.01-.26.018l4.905-14.365.29-.568c2.27-4.456 2.54-11.12.55-17.282-1.99-6.162-6.1-11.355-10.434-13.562l-32.078-16.333c-6.543 8.178-8.55 19.868-.346 30.87l2.11 3.532 10.288 5.4-8.256 16.214-.146-.07-8.118 15.97c.045.023.09.043.135.065l-6.303 12.376-101.59-51.728 18.606-36.538 4.082-8.02 30.854 15.712c1.556-9.81 4.922-19.248 10.335-28.404L172.103 50.31c-2.514-1.28-5.72-1.925-9.14-1.888zm217.928 131.38l24.082 43.82-71.864 39.49-19.748-35.93-4.334-7.887 71.864-39.492zm-7.106 24.444L333.472 226.4l6.742 12.27 40.312-22.154-6.742-12.27zM114.5 218.482L93.63 259.475l69.508 35.392 20.873-40.992-69.51-35.393zm297.214 17.41l24.08 43.817-71.863 39.49-19.745-35.93-4.334-7.887 71.864-39.492zm-7.106 24.442l-40.314 22.154 6.744 12.27 40.313-22.154-6.742-12.27zM99.72 282.774h-.002L18.372 442.53l6.123 18.83 77.264-151.737 16.038 8.168-77.262 151.735 22.375-7.275 12.968-4.217-6.986-21.556 21.496-6.97L83.392 408l21.52-6.998-5.37-16.504 41.17-80.852-40.992-20.873z"}}]})(props);
};
module.exports.GiCarSeat = function GiCarSeat (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M71.47 18.38l-.01.01c-6.58-.1-14.25.79-21.52 2.41-8.31 1.84-16.18 4.69-21.3 7.56-2.57 1.44-4.42 2.9-5.24 3.8l25.86 90.54c7.22-9.1 15.41-16.6 23.75-22.2 9.69-6.44 19.19-10.67 27.89-12.47 0-13.14-.3-25.92-1.8-36.76-1.9-13.05-5.6-23.03-11.5-28.91-1.3-1.35-6.28-3.44-13.39-3.88-.89 0-1.81-.1-2.74-.1zm29.03 92.12c-6.7.4-14.2 3.5-21.1 8.7-13.68 10.3-24.04 28.7-24.34 40.2l45.74 240.3c7.6-9.5 19.2-15.7 32.2-15.7 11.5 0 22 4.9 29.5 12.7 5.1-1.1 10.5-2.2 16.4-3.3 1.5-.3 3.1-.5 4.7-.8-13.5-92.5-35.3-199.6-65.2-275.3-5.2-4.8-10.3-6.7-15.6-6.8h-2.3zm283 39.5l-53.6 167.4 17.2 5.4 24-75.1 117.1 37.5 5.4-17.2-117-37.4 24.1-75.2-17.2-5.4zm-38.7 245.3c-21.5.1-46.3 1.4-71 3.7-33 2.9-66 7.4-91.6 12.1-3.5.6-6.8 1.3-10 1.9 1.2 3.8 1.8 7.8 1.8 12 0 22.5-18.5 41-41 41-5.6 0-11-1.2-15.9-3.2-3.1 8.9-5.4 17.6-6.7 24.2H398c5 0 7.7-1.8 10.7-6.4 3.1-4.7 5.4-12.4 6.3-21.5 1.9-18.1-2.1-41.2-9.1-55.1.3.5-2.8-2.5-10.2-4.4-7.4-1.9-18.1-3.3-30.7-3.9-6.3-.3-13.1-.4-20.2-.4zM133 402c-12.8 0-23 10.2-23 23s10.2 23 23 23 23-10.2 23-23-10.2-23-23-23z"}}]})(props);
};
module.exports.GiCarWheel = function GiCarWheel (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M256 21A235 235 0 0 0 21 256a235 235 0 0 0 235 235 235 235 0 0 0 235-235A235 235 0 0 0 256 21zm0 82c84.393 0 153 68.607 153 153s-68.607 153-153 153-153-68.607-153-153 68.607-153 153-153zm0 18c-20.417 0-39.757 4.52-57.09 12.602C210.457 166.482 230.218 208 256 208c25.823 0 44.926-41.65 56.752-74.555C295.505 125.462 276.284 121 256 121zm98.752 42.88c-27.714 21.143-61.142 52.79-53.17 77.327 7.981 24.564 53.508 29.858 88.459 30.936.628-5.294.959-10.678.959-16.143 0-35.642-13.755-68.012-36.248-92.12zm-197.729.243C134.663 188.204 121 220.477 121 256c0 5.55.34 11.018.988 16.39 34.833-.825 80.381-6.793 88.344-31.3 7.974-24.542-25.68-55.553-53.309-76.967zm70.188 43.643a9 9 0 0 0-5.035 1.714 9 9 0 0 0-1.99 12.57 9 9 0 0 0 12.57 1.993 9 9 0 0 0 1.992-12.572 9 9 0 0 0-7.537-3.705zm57.578 0a9 9 0 0 0-.637.004 9 9 0 0 0-6.9 3.7 9 9 0 0 0 1.992 12.573 9 9 0 0 0 12.57-1.992 9 9 0 0 0-1.99-12.57 9 9 0 0 0-5.035-1.715zM256 224a32 32 0 0 0-32 32 32 32 0 0 0 32 32 32 32 0 0 0 32-32 32 32 0 0 0-32-32zm-46.297 38.037a9 9 0 0 0-2.652.44 9 9 0 0 0-5.78 11.341 9 9 0 0 0 11.34 5.778 9 9 0 0 0 5.78-11.34 9 9 0 0 0-8.688-6.219zm92.856.008a9 9 0 0 0-8.95 6.21 9 9 0 0 0 5.78 11.34 9 9 0 0 0 11.34-5.777 9 9 0 0 0-5.78-11.341 9 9 0 0 0-2.39-.432zm-92.143 27.713c-21.59.104-50.24 16.832-72.424 31.928 19.029 34.168 52.46 59.164 92.143 66.837 9.99-33.39 18.42-78.618-2.446-93.777-4.854-3.527-10.737-5.02-17.273-4.988zm91.016.02c-6.58 0-12.492 1.516-17.346 5.042-20.895 15.181-11.863 60.106-2.088 93.678 39.687-7.715 73.108-32.76 92.1-66.973-22.006-15.224-50.935-31.747-72.666-31.748zM256 295.58a9 9 0 0 0-9 9 9 9 0 0 0 9 9 9 9 0 0 0 9-9 9 9 0 0 0-9-9z"}}]})(props);
};
module.exports.GiCarabiner = function GiCarabiner (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M251.9 24.51c-3.1 0-6.3.1-9.4.27-25.3 1.62-53.8 13.74-64 42.22-38.6 108.6-67.2 218.7-76.8 329.5-2.05 23.3 3 45.2 15 62.1s31.7 28.1 54.1 28.8c20.3.6 43.4-2.2 63.9-7.4 5.2-1.4 10.3-2.9 15.1-4.6-10.1-6.2-16.8-17.3-16.8-29.8 0-.9 0-1.7.1-2.6-2.3.7-4.8 1.5-7.3 2.1-17 4.3-37.9 6.7-54 6.3-11.8-.3-19.7-5-25.8-13.7-6.2-8.6-9.9-21.8-8.5-38 9.4-106.8 37-213.9 75-320.63 4.1-11.64 15.6-17.31 32.3-18.38 2-.13 4.2-.14 6.3 0 14.8.64 29.9 6.34 34.2 10.3 40.7 37.61 75.2 87.21 88.6 132.31-.2.9-.4 1.6-.9 3.1-1.6 4.6-4.4 11.4-8.1 19.7-1.8 3.9-3.8 8.3-5.9 12.8l31.6 17.4c2.6-5.4 5.1-10.7 7.2-15.5 3.9-8.8 7-16.3 9.2-22.6 1.1-3.1 2-5.9 2.6-8.9.7-2.9 2.1-5.3 0-12.6-15.4-55.5-54.2-110.1-99.9-152.24-15-13.75-35.9-19.75-57.8-19.95zM374.4 201.2c0 .1.1.2 0 .4 0 0-.1.4-.1.6 0-.5 0-1 .1-1zM340.2 249l-11.9 22.3 55.2 30.9c2 1.2 3.3 1.1 5.8-.1 2.4-1.1 5.3-3.9 7.1-7.3 1.8-3.3 2.5-7 1.9-9.7-.5-2.8-1.6-5-5.8-7.3h-.1zm-8.6 44.8c-5.1 9.9-10.4 20-15.9 30.3l30.8 18.8c5.7-10.7 11.2-21.2 16.5-31.5zM307.1 340c-5.9 11-11.9 21.8-17.8 32.5l30.7 18.7c6-10.7 12-21.5 17.9-32.4zm-26.6 48.2c-4.5 7.8-8.8 15.2-12.9 22.4h.4c13.1 0 24.6 7.4 30.6 18.1 4.1-7 8.3-14.3 12.6-21.8zM268 428.6c-9.5 0-17 7.5-17 17s7.5 17 17 17 17-7.5 17-17-7.5-17-17-17z"}}]})(props);
};
module.exports.GiCarambola = function GiCarambola (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M186.7 19.57c-3.5 40.16-5.6 81.23 15.3 119.53l5.7 10.5-11.7 2.9c-50.5 11.9-87.6 14.8-129.51 39.6C103.2 229.8 167 257.5 219.1 271l6 1.6.8 6.1c8.8 63.9 28.7 108.8 61.7 166.8 32.8-28.9 49.9-59.1 62.8-106.4l3.4-12.7 10.8 7.7c40.9 29 84.7 32.4 130.4 38.1-27.1-48.1-42.2-101.7-88.6-142l-6.4-5.5 4.9-6.8c22.3-31 43.5-75 44.6-117.7-40.9-5.19-90.6 6-130.8 21.9l-6.9 2.6-4.1-6c-28.1-41.14-72-67.38-121-99.13zm-20.3 22.35C137.9 80.97 107 120.6 89.52 160.3 119.2 148.5 148 144.1 180.5 137c-14.3-31.8-15.7-64.35-14.1-95.08zm90.5 88.68l10.8 7.2c13.7 9.1 30.9 19.8 41.7 35.8 16.3-6.6 34.9-6.2 51.5-5.4l12.6.6-4.4 11.8c-3.9 10.8-6 27.3-17.5 40.9 11.7 16.8 15.1 34.5 21.8 48.9l9.9 20.8-21.6-8.3c-10.9-4.4-25.6-6.3-40.6-12.3-4.6 13.7-12.5 27.7-21.9 37.6l-7.5 7.9-6.6-8.7c-14.6-19.4-17.9-42.3-22.9-59.8-23.9-3.1-42.6-13.3-63.9-21.1l-23.2-8.5 23.1-8.7c13.1-5 28.7-15.3 47.6-20.2 0-6.2.8-12.7 2-19.3 1.6-10 4-19.7 5.8-26.7zm11.5 30c-.9 3.9-1.8 8-2.5 12.2-1.4 9-1.9 17.9-1.2 21.9l1.8 9.3-9.3 1.5c-10.8 1.7-21.2 6.6-32 11.8 15.2 6.2 29.3 11.7 44.9 12.6l6.2.4 1.9 5.9c5.6 16.6 8.4 34.3 15.2 49 5.9-9.2 11-20.6 12.8-29.3l2.6-12.2 11 6c8.7 4.9 18.9 7.3 29.4 10.1-4.5-12.2-8.6-23.6-16.8-33.1l-6.2-7.1 7.2-5.9c8-6.6 11.2-16.6 14.5-27.4-14.6 0-28.2 1.6-37.3 7.2l-8.9 5.3-4.4-9.2c-4.9-10.7-16.5-20.3-28.9-29zM60.7 212.3c-13.1 29-22.77 62.5-27.9 93.1-6.17 36.9-4.81 70.3 1.16 82.5 10.12 20.8 36.66 33.4 49.4 38.4C105.2 394.9 122.8 363.4 200 284.7c-48-14.1-102.01-37.9-139.3-72.4zM210.8 300c-74.5 76.3-90.2 105.2-112.5 137.2 2.2 3.4 5.6 8.8 10.3 14.8 7.7 9.9 18.4 20.2 26.4 23.2 46.9 17.6 96.9 2.5 135.4-22.4-29.6-52.4-49.4-96.4-59.6-152.8zm153.7 56.1c-9.8 32-23 57.8-42.3 80.6 54.1-10.2 109.6-24.3 154.3-48.3-37-4.3-75.1-9.9-112-32.3z"}}]})(props);
};
module.exports.GiCaravan = function GiCaravan (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M60.5 129c-5 0-16.557 3.44-25.322 8.773S21.5 150.095 21.5 152.672V335h105.063c6.948-18.637 24.952-32 45.937-32 20.985 0 38.99 13.363 45.938 32H275.5V175h98v160h31.97c3.642-14.619 13.747-56.938 14.03-79.115.399-31.276-15.2-98.237-15.615-100.012-1.874-5.313-8.415-12.755-16.512-18.14-8.178-5.44-17.92-8.733-22.873-8.733zm-9 46h170v82h-170v-82zm41.963 18L69.5 227.36V239h13.828l32.08-46zm44.844 0l-32.08 46h43.888l32.08-46zm155.193 0v142h62v-62h-23v-18h23v-62zm143.104 77.113c-1.55 14.901-4.853 31.89-8.01 46.08l22.906-3.818v-34.813zM172.5 321c-17.227 0-31 13.773-31 31s13.773 31 31 31 31-13.773 31-31-13.773-31-31-31zm251.637 14c-1.498 6.021-3.126 12.008-4.735 18H492.5v-18z"}}]})(props);
};
module.exports.GiCaravel = function GiCaravel (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M264.7 36v21.76c5.9-1.27 11.9-2.91 18-4.99V36zm26.7 32.79C257.1 81.22 226 80.48 195 79.88c28.7 15.85 61.1 23.32 92.2 16.58 2.6-9.36 6-18.4 4.2-27.67zm-164.1 10.8C140.5 136.8 152.2 197.3 137.9 285c12.8 17.6 24 35.7 34 53.7l5.1 9.3c73.7-19.3 135.4-22.7 186.9-12.3 2.4-6.5 4.7-13.3 6.7-20.1-53.5-91.8-136.8-169.4-243.3-236.01zm155.4 36.01c-6 .9-12 1.4-18 1.4v42.6c6.1 5.5 12.1 11.1 18 16.8zM56.73 192v10.3c6.24 4.6 12.24 9.3 18 14.2V192zm351.97 4v17.9c6.2 2.5 12.2 5.5 18 8.9V196zm-386.01 5.1c5.77 19.7 10.88 39.8 12.08 60.4 1.21 20.6-1.8 41.8-11.79 62.8 41.42-12.1 84.42-6.5 121.82 3.7-28.5-46.9-66.02-92.4-122.11-126.9zm216.81 1c1.7 9.5 2.1 21.4 1.3 33.8 1.2 0 2.4-.1 3.6-.1 10.8-.2 20.9.4 29.2 2l-3.4 17.6c-7.7-1.4-18.9-1.8-31.3-1.1-2.1 14.1-5.7 27.6-10.6 38.2l-16.4-7.6c3.3-6.9 5.9-17.4 7.8-28.7-9.3 1.3-18.6 3.1-27.1 5.5l-4.8-17.4c11-3.1 22.7-5.3 34.2-6.8 1.1-12.6 1.1-24.6-.3-32.2zm155.3 26c4.8 20.2 3.7 43.2-.6 66-4.1 21.8-11.1 43.6-19.3 62.5 17.1-4.2 37.7-8.3 58.1-10.7 20.4-2.3 40.1-3.4 56.3.3-18.3-68.6-53.7-105.2-94.5-118.1zM81.64 254.5c1.3 7.3 1.7 15.1 1.52 22.9 5.62.7 11.51 1.9 18.04 3.5l-4.32 17.4c-5.68-1.4-10.54-2.4-15.06-3.1-.78 6.5-1.8 12.5-2.85 17.7l-17.64-3.6c.89-4.4 1.72-9.5 2.39-15-4.54.3-9.38.8-15 1.6l-2.59-17.8c6.81-1 12.95-1.6 18.92-1.7.15-6.7-.15-13.2-1.13-18.7zm341.46 23.6l18 1.2c-.4 5.9-.9 12.1-1.5 18.4 6.7.3 13.5 1.1 20.5 2.9l-4.2 17.4c-6.3-1.5-12.4-2.2-18.6-2.4-1.2 7.2-2.7 14.3-4.7 21l-17.2-5.2c1.4-4.5 2.5-9.4 3.4-14.6-5.4.7-10.9 1.7-16.5 2.9l-3.6-17.6c7.4-1.5 14.9-2.9 22.7-3.7.7-6.8 1.2-13.7 1.7-20.3zM56.73 336.2v13.7c6.04.6 12.04 1.3 18 2v-16.5c-6.3.1-12.76.3-18 .8zm69.07 5.5c-1.4 5.5-2.9 11-4.5 16.6 4.5.7 8.9 1.4 13.2 2.1 9.5-3 18.7-5.9 27.8-8.4-12.6-4.1-25.5-7.8-36.5-10.3zm156.9 6.7c-5.9.4-11.9.9-18 1.5v76.7c6.1-.2 12.1-.6 18-1zm144 16.5s-18.3 3.6-18 3.5v29c6.1-2.2 12.1-4.5 18-6.8zm-392.5 1.4c24.11 40.8 50.62 82.6 55.75 124.7H414.3c2.8-2.5 10.3-9.2 20.5-19.4 12.4-12.4 26.6-28.3 33-40 4.9-8.7 9.3-20.3 11.8-31.1 1.2-5.2 1.8-10.2 2.1-14.7C419 416.1 340.9 445 248.8 445h-5.7l-23.6-49.2c-10.3-2.5-97.1-23-185.3-29.5zm16.85 66.9l-7.36 9.7 16 51.9 12.32-2.2c-2.51-18.7-10.49-38.7-20.96-59.4z"}}]})(props);
};
module.exports.GiCard10Clubs = function GiCard10Clubs (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119.436 36c-16.126 0-29.2 17.237-29.2 38.5v363c0 21.263 13.074 38.5 29.2 38.5h275.298c16.126 0 29.198-17.237 29.198-38.5v-363c0-21.263-13.072-38.5-29.198-38.5H119.436zm26.832 8.408v.002h.015c13.587.01 24.442 10.853 24.442 24.442 0 5.71-2.003 10.997-5.266 15.173 1.12-.158 2.232-.31 3.396-.31 13.595 0 24.458 11.157 24.458 24.752 0 13.594-10.863 24.752-24.458 24.752-5.76 0-11.08-2.048-15.294-5.422l12.609 30.193h-40.117l12.42-29.744c-4.12 3.115-9.233 4.973-14.776 4.973-13.594 0-24.752-11.16-24.752-24.754 0-13.595 11.158-24.752 24.752-24.752 1.059 0 2.058.184 3.082.312-3.215-4.16-5.248-9.509-5.248-15.173 0-13.589 11.15-24.434 24.737-24.444zM312.7 176.535c15.454 0 28.333 6.023 38.635 18.069 12.759 14.819 19.137 37.286 19.137 67.4 0 27.974-5.546 49.292-16.641 63.953-11.095 14.582-24.489 21.873-40.18 21.873-15.136 0-27.776-6.142-37.92-18.426-12.68-15.453-19.02-37.762-19.02-66.925 0-27.737 5.984-49.807 17.95-66.211 9.59-13.156 22.269-19.733 38.04-19.733zm-126.361 3.09h5.469v148.354c0 2.218.792 3.922 2.377 5.11 2.298 1.665 5.113 2.497 8.44 2.497h23.061v8.916H140.22v-8.916h19.732c4.121 0 7.171-.952 9.153-2.854 1.98-1.98 2.972-4.596 2.972-7.845V212.79c0-2.298-.911-4.24-2.734-5.824-1.823-1.585-4.16-2.38-7.014-2.38H135.94v-8.2c12.363-1.585 22.388-3.686 30.075-6.301 7.687-2.694 14.462-6.182 20.326-10.461zm127.074 5.469c-10.46 0-18.622 5.031-24.486 15.095-5.865 9.986-8.797 30.749-8.797 62.29 0 30.827 3.012 51.393 9.035 61.695 6.102 10.302 14.263 15.453 24.486 15.453 10.303 0 18.228-4.754 23.776-14.264 6.577-11.332 9.865-32.017 9.865-62.052 0-31.066-3.09-51.867-9.272-62.407-6.18-10.54-14.384-15.81-24.607-15.81zm32.38 168.918h40.118l-12.611 30.193c4.215-3.374 9.535-5.422 15.295-5.422 13.594 0 24.459 11.158 24.459 24.752 0 13.595-10.865 24.752-24.46 24.752-1.163 0-2.275-.152-3.396-.31 3.263 4.176 5.266 9.462 5.266 15.173 0 13.589-10.853 24.433-24.44 24.442h-.017c-13.588-.01-24.735-10.853-24.735-24.442 0-5.665 2.033-11.013 5.248-15.173-1.023.128-2.025.312-3.084.312-13.594 0-24.751-11.159-24.751-24.754 0-13.594 11.157-24.752 24.752-24.752 5.542 0 10.655 1.858 14.775 4.973l-12.418-29.744z"}}]})(props);
};
module.exports.GiCard10Diamonds = function GiCard10Diamonds (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119.436 36c-16.126 0-29.2 17.237-29.2 38.5v363c0 21.263 13.074 38.5 29.2 38.5h275.298c16.126 0 29.198-17.237 29.198-38.5v-363c0-21.263-13.072-38.5-29.198-38.5H119.436zm26.884 3.717l47.393 58.27-47.393 58.286-47.375-58.287 47.375-58.27zm167.465 136.818c15.453 0 28.333 6.023 38.635 18.069 12.759 14.819 19.139 37.286 19.139 67.4 0 27.974-5.548 49.292-16.643 63.953-11.095 14.582-24.489 21.873-40.18 21.873-15.136 0-27.776-6.142-37.92-18.426-12.68-15.453-19.02-37.762-19.02-66.925 0-27.737 5.984-49.807 17.95-66.211 9.59-13.156 22.269-19.733 38.04-19.733zm-126.36 3.09h5.468v148.354c0 2.218.792 3.922 2.377 5.11 2.298 1.665 5.112 2.497 8.44 2.497h23.061v8.916h-85.468v-8.916h19.732c4.121 0 7.171-.952 9.153-2.854 1.98-1.98 2.972-4.596 2.972-7.845V212.79c0-2.298-.912-4.24-2.734-5.824-1.823-1.585-4.161-2.38-7.014-2.38h-26.389v-8.2c12.363-1.585 22.388-3.686 30.075-6.301 7.687-2.694 14.463-6.182 20.328-10.461zm127.075 5.469c-10.46 0-18.624 5.031-24.488 15.095-5.865 9.986-8.797 30.749-8.797 62.29 0 30.827 3.012 51.393 9.035 61.695 6.102 10.302 14.263 15.453 24.486 15.453 10.303 0 18.228-4.754 23.776-14.264 6.577-11.332 9.865-32.017 9.865-62.052 0-31.066-3.09-51.867-9.272-62.407-6.18-10.54-14.382-15.81-24.605-15.81zm51.162 167.43l47.393 58.269-47.393 58.287-47.375-58.287 47.375-58.27z"}}]})(props);
};
module.exports.GiCard10Hearts = function GiCard10Hearts (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119.436 36c-16.126 0-29.2 17.237-29.2 38.5v363c0 21.263 13.074 38.5 29.2 38.5h275.298c16.126 0 29.198-17.237 29.198-38.5v-363c0-21.263-13.072-38.5-29.198-38.5H119.436zm57.214 16.174h.002c13.612-.318 26.502 9.855 27.073 28.043.976 31.09-47.738 52.945-52.31 70.015-4.998-18.649-51.414-37.573-52.45-70.015-.995-31.155 37.401-37.91 52.45-11.848 6.26-10.846 15.922-15.977 25.235-16.195zm137.135 124.361c15.453 0 28.333 6.023 38.635 18.069 12.759 14.819 19.137 37.286 19.137 67.4 0 27.974-5.546 49.292-16.641 63.953-11.095 14.582-24.489 21.873-40.18 21.873-15.136 0-27.776-6.142-37.92-18.426-12.68-15.453-19.02-37.762-19.02-66.925 0-27.737 5.984-49.807 17.95-66.211 9.59-13.156 22.269-19.733 38.04-19.733zm-126.361 3.09h5.469v148.354c0 2.218.792 3.922 2.377 5.11 2.298 1.665 5.112 2.497 8.44 2.497h23.061v8.916h-85.468v-8.916h19.732c4.121 0 7.171-.952 9.153-2.854 1.98-1.98 2.972-4.596 2.972-7.845V212.79c0-2.298-.912-4.24-2.734-5.824-1.823-1.585-4.161-2.38-7.014-2.38h-26.389v-8.2c12.363-1.585 22.388-3.686 30.075-6.301 7.687-2.694 14.461-6.182 20.326-10.461zm127.074 5.469c-10.46 0-18.622 5.031-24.486 15.095-5.865 9.986-8.797 30.749-8.797 62.29 0 30.827 3.012 51.393 9.035 61.695 6.102 10.302 14.263 15.453 24.486 15.453 10.303 0 18.228-4.754 23.776-14.264 6.577-11.332 9.865-32.017 9.865-62.052 0-31.066-3.09-51.867-9.272-62.407-6.18-10.54-14.384-15.81-24.607-15.81zm46.23 176.676c4.573 17.07 53.29 38.923 52.313 70.013-.57 18.189-13.464 28.364-27.076 28.045l.002-.002c-9.314-.217-18.975-5.349-25.237-16.195-15.048 26.061-53.445 19.307-52.45-11.848 1.036-32.442 47.451-51.364 52.449-70.013z"}}]})(props);
};
module.exports.GiCard10Spades = function GiCard10Spades (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119.436 36c-16.126 0-29.2 17.237-29.2 38.5v363c0 21.263 13.074 38.5 29.2 38.5h275.298c16.126 0 29.198-17.237 29.198-38.5v-363c0-21.263-13.072-38.5-29.198-38.5H119.436zm26.654 8.047s46.336 33.838 47.27 63.068c.775 24.287-25.025 32.12-40.776 18.584l13.633 32.653h-40.115l13.613-32.633c-15.535 13.88-40.006 5.347-40.758-18.606-.88-28.01 47.133-63.066 47.133-63.066zM312.7 176.535c15.454 0 28.333 6.023 38.635 18.069 12.759 14.819 19.139 37.286 19.139 67.4 0 27.974-5.548 49.292-16.643 63.953-11.095 14.582-24.489 21.873-40.18 21.873-15.136 0-27.776-6.142-37.92-18.426-12.68-15.453-19.02-37.762-19.02-66.925 0-27.737 5.984-49.807 17.95-66.211 9.59-13.156 22.269-19.733 38.04-19.733zm-126.36 3.09h5.468v148.354c0 2.218.793 3.922 2.379 5.11 2.298 1.665 5.11 2.497 8.439 2.497h23.06v8.916H140.22v-8.916h19.732c4.121 0 7.173-.952 9.154-2.854 1.982-1.98 2.971-4.596 2.971-7.845V212.79c0-2.298-.911-4.24-2.734-5.824-1.823-1.585-4.161-2.38-7.014-2.38H135.94v-8.2c12.363-1.585 22.388-3.686 30.075-6.301 7.687-2.694 14.463-6.182 20.328-10.461zm127.075 5.469c-10.46 0-18.624 5.031-24.488 15.095-5.865 9.986-8.797 30.749-8.797 62.29 0 30.827 3.012 51.393 9.035 61.695 6.102 10.302 14.263 15.453 24.486 15.453 10.303 0 18.228-4.754 23.776-14.264 6.577-11.332 9.865-32.017 9.865-62.052 0-31.066-3.09-51.867-9.272-62.407-6.18-10.54-14.382-15.81-24.605-15.81zm32.363 168.554h40.116l-13.633 32.653c15.75-13.536 41.551-5.701 40.775 18.586-.933 29.23-47.271 63.068-47.271 63.068s-48.01-35.059-47.131-63.068c.751-23.953 25.222-32.485 40.758-18.604l-13.614-32.635z"}}]})(props);
};
module.exports.GiCard2Clubs = function GiCard2Clubs (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119.436 36c-16.126 0-29.2 17.237-29.2 38.5v362.998c0 21.263 13.074 38.5 29.2 38.5h275.298c16.126 0 29.198-17.237 29.198-38.5V74.5c0-21.263-13.072-38.5-29.198-38.5H119.436zm26.832 8.408h.015c13.587.01 24.442 10.855 24.442 24.444 0 5.71-2.003 10.997-5.266 15.173 1.12-.158 2.232-.312 3.396-.312 13.595 0 24.458 11.16 24.458 24.754 0 13.594-10.863 24.75-24.458 24.75-5.76 0-11.08-2.046-15.294-5.42l12.609 30.191h-40.117l12.42-29.742c-4.12 3.115-9.233 4.97-14.776 4.97-13.594 0-24.752-11.159-24.752-24.753 0-13.595 11.158-24.75 24.752-24.75 1.059 0 2.058.184 3.082.312-3.215-4.16-5.248-9.509-5.248-15.173 0-13.589 11.15-24.434 24.737-24.444zm99.51 132.125c9.588 0 18.464 2.06 26.626 6.182 8.242 4.12 14.424 9.549 18.545 16.285 4.121 6.657 6.18 13.948 6.18 21.873 0 5.468-1.03 11.016-3.09 16.643-2.06 5.626-5.073 10.895-9.035 15.808-6.816 8.48-13.828 15.731-21.04 21.754l-31.382 26.39c-7.925 6.658-13.71 12.323-17.355 16.999-3.646 4.675 14.344 7.013 53.968 7.013 5.944 0 10.183-1.546 12.72-4.636 2.535-3.09 5.428-11.65 8.677-25.676h8.084L294.87 344.5h-106.51v-6.42l34.592-39.346c19.257-20.921 30.828-34.076 34.711-39.464 5.547-7.688 9.59-15.099 12.125-22.23 2.536-7.212 3.805-13.75 3.805-19.614 0-9.748-2.695-17.396-8.084-22.944-5.39-5.626-12.878-8.439-22.467-8.439-10.778 0-19.573 2.575-26.389 7.727-6.815 5.15-10.224 10.619-10.224 16.404 0 1.981.516 3.487 1.547 4.517.95 1.03 3.01 1.942 6.18 2.735 8.003 1.902 12.007 6.578 12.007 14.027 0 4.042-1.348 7.41-4.043 10.104-2.694 2.615-6.142 3.922-10.342 3.922-4.834 0-9.073-2.219-12.718-6.657-3.646-4.517-5.47-10.38-5.47-17.592 0-8.083 2.062-15.414 6.182-21.992 4.2-6.657 10.5-12.085 18.9-16.285 8.401-4.28 17.436-6.42 27.104-6.42zm100.017 177.479h40.117l-12.611 30.193c4.215-3.374 9.535-5.422 15.295-5.422 13.594 0 24.459 11.158 24.459 24.752 0 13.595-10.865 24.752-24.46 24.752-1.163 0-2.275-.152-3.396-.31 3.263 4.176 5.266 9.462 5.266 15.173 0 13.589-10.853 24.433-24.44 24.442h-.017c-13.588-.01-24.735-10.853-24.735-24.442 0-5.665 2.033-11.013 5.248-15.173-1.023.128-2.025.312-3.084.312-13.594 0-24.751-11.159-24.751-24.754 0-13.594 11.157-24.752 24.752-24.752 5.542 0 10.655 1.858 14.775 4.973l-12.418-29.744z"}}]})(props);
};
module.exports.GiCard2Diamonds = function GiCard2Diamonds (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119.436 36c-16.126 0-29.2 17.237-29.2 38.5v363c0 21.263 13.074 38.5 29.2 38.5h275.298c16.126 0 29.198-17.237 29.198-38.5v-363c0-21.263-13.072-38.5-29.198-38.5H119.436zm26.884 3.717l47.393 58.27-47.393 58.286-47.375-58.287 47.375-58.27zm100.541 136.816c9.59 0 18.465 2.061 26.627 6.182 8.242 4.12 14.424 9.549 18.545 16.285 4.121 6.657 6.18 13.948 6.18 21.873 0 5.468-1.03 11.016-3.09 16.643-2.06 5.626-5.07 10.897-9.033 15.81-6.815 8.48-13.83 15.73-21.041 21.752l-31.383 26.39c-7.925 6.658-13.71 12.323-17.355 16.999-3.646 4.675 14.344 7.013 53.968 7.013 5.944 0 10.183-1.544 12.719-4.634 2.536-3.09 5.429-11.651 8.678-25.678h8.084l-3.805 49.332h-106.51v-6.418l34.592-39.348c19.257-20.921 30.828-34.076 34.711-39.464 5.547-7.688 9.59-15.099 12.125-22.23 2.536-7.212 3.805-13.75 3.805-19.614 0-9.748-2.695-17.394-8.084-22.942-5.39-5.626-12.878-8.441-22.467-8.441-10.778 0-19.573 2.575-26.389 7.727-6.815 5.15-10.224 10.619-10.224 16.404 0 1.981.516 3.487 1.547 4.517.95 1.03 3.01 1.942 6.18 2.735 8.003 1.902 12.007 6.578 12.007 14.027 0 4.042-1.349 7.41-4.043 10.104-2.694 2.615-6.142 3.923-10.342 3.923-4.834 0-9.073-2.22-12.718-6.658-3.646-4.517-5.47-10.38-5.47-17.592 0-8.083 2.062-15.414 6.182-21.992 4.2-6.657 10.5-12.085 18.9-16.285 8.401-4.28 17.436-6.42 27.104-6.42zm118.801 175.99l47.393 58.27-47.393 58.287-47.375-58.287 47.375-58.27z"}}]})(props);
};
module.exports.GiCard2Hearts = function GiCard2Hearts (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119.434 36c-16.126 0-29.2 17.237-29.2 38.5v363c0 21.263 13.074 38.5 29.2 38.5h275.298c16.126 0 29.198-17.237 29.198-38.5v-363c0-21.263-13.072-38.5-29.198-38.5zm57.216 16.174c13.613-.319 26.504 9.854 27.075 28.043.976 31.09-47.74 52.945-52.313 70.015-4.997-18.649-51.413-37.573-52.45-70.015-.994-31.155 37.404-37.907 52.452-11.846 6.262-10.846 15.923-15.978 25.236-16.195zm70.21 124.361c9.588 0 18.464 2.06 26.626 6.182 8.242 4.12 14.424 9.549 18.545 16.285 4.121 6.657 6.182 13.948 6.182 21.873 0 5.468-1.031 11.014-3.092 16.64-2.06 5.627-5.07 10.898-9.033 15.811-6.815 8.48-13.83 15.731-21.041 21.754l-31.383 26.39c-7.925 6.657-13.708 12.323-17.353 16.999-3.646 4.675 14.342 7.013 53.966 7.013 5.944 0 10.183-1.546 12.72-4.636 2.535-3.09 5.428-11.65 8.677-25.676h8.084l-3.805 49.332H189.445v-6.42l34.592-39.346c19.257-20.921 30.826-34.078 34.71-39.466 5.547-7.688 9.588-15.097 12.124-22.229 2.536-7.211 3.805-13.749 3.805-19.613 0-9.748-2.695-17.396-8.084-22.944-5.39-5.626-12.878-8.44-22.467-8.44-10.778 0-19.573 2.576-26.389 7.727-6.815 5.152-10.222 10.62-10.222 16.405 0 1.981.514 3.487 1.545 4.517.95 1.03 3.011 1.942 6.181 2.735 8.004 1.902 12.006 6.576 12.006 14.025 0 4.042-1.347 7.411-4.04 10.106-2.695 2.615-6.143 3.921-10.343 3.921-4.834 0-9.075-2.218-12.72-6.656-3.646-4.517-5.467-10.382-5.467-17.594 0-8.083 2.059-15.412 6.18-21.99 4.2-6.657 10.501-12.085 18.902-16.285 8.4-4.28 17.433-6.42 27.101-6.42zM360.728 361.77c4.572 17.07 53.287 38.925 52.31 70.015-.57 18.189-13.462 28.362-27.074 28.043v-.002c-9.314-.217-18.975-5.349-25.236-16.195-15.048 26.061-53.446 19.31-52.452-11.846 1.037-32.442 47.454-51.366 52.452-70.016z"}}]})(props);
};
module.exports.GiCard2Spades = function GiCard2Spades (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119.436 36c-16.126 0-29.2 17.237-29.2 38.5v363c0 21.263 13.074 38.5 29.2 38.5h275.298c16.126 0 29.198-17.237 29.198-38.5v-363c0-21.263-13.072-38.5-29.198-38.5H119.436zm26.654 8.045s46.338 33.84 47.271 63.07c.776 24.287-25.026 32.12-40.777 18.584l13.633 32.653h-40.115l13.613-32.633c-15.535 13.88-40.006 5.347-40.758-18.606-.88-28.01 47.133-63.066 47.133-63.066v-.002zm99.687 132.49c9.59 0 18.465 2.06 26.627 6.182 8.242 4.12 14.424 9.549 18.545 16.285 4.121 6.657 6.182 13.946 6.182 21.871 0 5.468-1.031 11.016-3.092 16.643-2.06 5.626-5.07 10.897-9.033 15.81-6.816 8.48-13.83 15.731-21.041 21.754l-31.383 26.389c-7.925 6.657-13.71 12.322-17.355 16.998v.002c-3.646 4.675 14.344 7.011 53.968 7.011 5.944 0 10.183-1.544 12.72-4.634 2.535-3.091 5.428-11.651 8.677-25.678h8.084L294.87 344.5h-106.51v-6.418l34.592-39.348c19.257-20.921 30.828-34.076 34.711-39.464 5.547-7.688 9.59-15.097 12.125-22.229 2.536-7.212 3.805-13.75 3.805-19.615 0-9.748-2.695-17.394-8.084-22.942-5.39-5.626-12.878-8.44-22.467-8.44-10.778 0-19.573 2.576-26.389 7.727-6.815 5.152-10.224 10.62-10.224 16.405 0 1.981.516 3.487 1.547 4.517.95 1.03 3.01 1.94 6.18 2.733 8.003 1.902 12.007 6.578 12.007 14.027 0 4.042-1.348 7.41-4.043 10.104-2.694 2.615-6.142 3.923-10.342 3.923-4.834 0-9.073-2.218-12.718-6.656-3.646-4.517-5.47-10.382-5.47-17.594 0-8.083 2.061-15.414 6.182-21.992 4.2-6.657 10.5-12.085 18.9-16.285 8.401-4.28 17.436-6.418 27.104-6.418zM345.78 353.648h40.116l-13.633 32.653c15.75-13.536 41.551-5.701 40.775 18.586-.933 29.23-47.271 63.068-47.271 63.068s-48.01-35.059-47.131-63.068c.751-23.953 25.222-32.485 40.758-18.604l-13.614-32.635z"}}]})(props);
};
module.exports.GiCard3Clubs = function GiCard3Clubs (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119.436 36c-16.126 0-29.2 17.237-29.2 38.5v363c0 21.263 13.074 38.5 29.2 38.5h275.298c16.126 0 29.198-17.237 29.198-38.5v-363c0-21.263-13.072-38.5-29.198-38.5H119.436zm26.832 8.408v.002h.015c13.587.01 24.442 10.853 24.442 24.442 0 5.71-2.003 10.997-5.266 15.173 1.12-.158 2.232-.31 3.396-.31 13.595 0 24.458 11.157 24.458 24.752 0 13.594-10.863 24.752-24.458 24.752-5.76 0-11.08-2.048-15.294-5.422l12.609 30.193h-40.117l12.42-29.744c-4.12 3.115-9.233 4.973-14.776 4.973-13.594 0-24.752-11.16-24.752-24.754 0-13.595 11.158-24.752 24.752-24.752 1.059 0 2.058.184 3.082.312-3.215-4.16-5.248-9.509-5.248-15.173 0-13.589 11.15-24.434 24.737-24.444zm99.271 132.127c14.899 0 26.786 4.002 35.662 12.006 8.876 8.004 13.315 17.909 13.315 29.717 0 8.48-2.418 15.81-7.252 21.992-4.755 6.181-12.998 11.65-24.727 16.404 11.333 2.774 20.17 7.37 26.51 13.79 8.083 8.162 12.125 18.266 12.125 30.312 0 13.63-4.834 24.567-14.502 32.808-11.016 9.51-25.361 14.264-43.033 14.264-10.62 0-19.772-1.743-27.46-5.23-7.607-3.487-13.313-8.201-17.116-14.145-3.804-5.943-5.706-12.64-5.706-20.09 0-6.023 1.465-10.776 4.397-14.263 2.932-3.487 6.619-5.23 11.057-5.23 4.041 0 7.289 1.346 9.746 4.04 2.456 2.615 3.685 6.22 3.685 10.817 0 2.932-.634 5.43-1.902 7.49-1.268 1.981-3.486 3.842-6.656 5.586-3.408 1.822-5.112 3.566-5.112 5.23 0 2.378 1.19 5.073 3.567 8.084 2.456 2.932 6.021 5.31 10.697 7.133 4.755 1.743 10.74 2.615 17.951 2.615 12.442 0 21.635-3.052 27.578-9.154 6.023-6.181 9.033-16.048 9.033-29.6 0-'use strict';

var GetIntrinsic = require('get-intrinsic');

var $TypeError = GetIntrinsic('%TypeError%');

var $byteLength = require('array-buffer-byte-length');

var isArrayBuffer = require('is-array-buffer');

var availableTypedArrays = require('available-typed-arrays')();

// https://262.ecma-international.org/6.0/#sec-isdetachedbuffer

module.exports = function IsDetachedBuffer(arrayBuffer) {
	if (!isArrayBuffer(arrayBuffer)) {
		throw new $TypeError('Assertion failed: `arrayBuffer` must be an Object with an [[ArrayBufferData]] internal slot');
	}
	if ($byteLength(arrayBuffer) === 0) {
		try {
			new global[availableTypedArrays[0]](arrayBuffer); // eslint-disable-line no-new
		} catch (error) {
			return !!error && error.name === 'TypeError';
		}
	}
	return false;
};
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
/**
 * @internal These variables should not appear in the :root stylesheet when the `defaultMode="dark"`
 */
var excludeVariablesFromRoot = function excludeVariablesFromRoot(cssVarPrefix) {
  return [].concat(_toConsumableArray(_toConsumableArray(Array(24)).map(function (_, index) {
    return "--".concat(cssVarPrefix ? "".concat(cssVarPrefix, "-") : '', "overlays-").concat(index + 1);
  })), ["--".concat(cssVarPrefix ? "".concat(cssVarPrefix, "-") : '', "palette-AppBar-darkBg"), "--".concat(cssVarPrefix ? "".concat(cssVarPrefix, "-") : '', "palette-AppBar-darkColor")]);
};
export default excludeVariablesFromRoot;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      fetch(request: FetchRequest): Promise<FetchResponse>;\n}\n\n/**\n * Defines a self-descriptive reference for config key-value pairs.\n */\nexport interface FirebaseRemoteConfigObject {\n  [key: string]: string;\n}\n\n/**\n * Shims a minimal AbortSignal.\n *\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\n * swapped out if/when we do.\n */\nexport class RemoteConfigAbortSignal {\n  listeners: Array<() => void> = [];\n  addEventListener(listener: () => void): void {\n    this.listeners.push(listener);\n  }\n  abort(): void {\n    this.listeners.forEach(listener => listener());\n  }\n}\n\n/**\n * Defines per-request inputs for the Remote Config fetch request.\n *\n * <p>Modeled after the native {@link Request} interface, but simplified for Remote Config's\n * use case.\n */\nexport interface FetchRequest {\n  /**\n   * Uses cached config if it is younger than this age.\n   *\n   * <p>Required because it's defined by settings, which always have a value.\n   *\n   * <p>Comparable to passing `headers = { 'Cache-Control': max-age <maxAge> }` to the native\n   * Fetch API.\n   */\n  cacheMaxAgeMillis: number;\n\n  /**\n   * An event bus for the signal to abort a request.\n   *\n   * <p>Required because all requests should be abortable.\n   *\n   * <p>Comparable to the native\n   * Fetch API's \"signal\" field on its request configuration object\n   * https://fetch.spec.whatwg.org/#dom-requestinit-signal.\n   *\n   * <p>Disambiguation: Remote Config commonly refers to API inputs as\n   * \"signals\". See the private ConfigFetchRequestBody interface for those:\n   * http://google3/firebase/remote_config/web/src/core/rest_client.ts?l=14&rcl=255515243.\n   */\n  signal: RemoteConfigAbortSignal;\n\n  /**\n   * The ETag header value from the last response.\n   *\n   * <p>Optional in case this is the first request.\n   *\n   * <p>Comparable to passing `headers = { 'If-None-Match': <eTag> }` to the native Fetch API.\n   */\n  eTag?: string;\n}\n\n/**\n * Defines a successful response (200 or 304).\n *\n * <p>Modeled after the native {@link Response} interface, but simplified for Remote Config's\n * use case.\n */\nexport interface FetchResponse {\n  /**\n   * The HTTP status, which is useful for differentiating success responses with data from\n   * those without.\n   *\n   * <p>{@link RemoteConfigClient} is modeled after the native {@link GlobalFetch} interface, so\n   * HTTP status is first-class.\n   *\n   * <p>Disambiguation: the fetch response returns a legacy \"state\" value that is redundant with the\n   * HTTP status code. The former is normalized into the latter.\n   */\n  status: number;\n\n  /**\n   * Defines the ETag response header value.\n   *\n   * <p>Only defined for 200 and 304 responses.\n   */\n  eTag?: string;\n\n  /**\n   * Defines the map of parameters returned as \"entries\" in the fetch response body.\n   *\n   * <p>Only defined for 200 responses.\n   */\n  config?: FirebaseRemoteConfigObject;\n\n  // Note: we're not extracting experiment metadata until\n  // ABT and Analytics have Web SDKs.\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const RC_COMPONENT_NAME = 'remote-config';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\n\nexport const enum ErrorCode {\n  REGISTRATION_WINDOW = 'registration-window',\n  REGISTRATION_PROJECT_ID = 'registration-project-id',\n  REGISTRATION_API_KEY = 'registration-api-key',\n  REGISTRATION_APP_ID = 'registration-app-id',\n  STORAGE_OPEN = 'storage-open',\n  STORAGE_GET = 'storage-get',\n  STORAGE_SET = 'storage-set',\n  STORAGE_DELETE = 'storage-delete',\n  FETCH_NETWORK = 'fetch-client-network',\n  FETCH_TIMEOUT = 'fetch-timeout',\n  FETCH_THROTTLE = 'fetch-throttle',\n  FETCH_PARSE = 'fetch-client-parse',\n  FETCH_STATUS = 'fetch-status',\n  INDEXED_DB_UNAVAILABLE = 'indexed-db-unavailable'\n}\n\nconst ERROR_DESCRIPTION_MAP: { readonly [key in ErrorCode]: string } = {\n  [ErrorCode.REGISTRATION_WINDOW]:\n    'Undefined window object. This SDK only supports usage in a browser environment.',\n  [ErrorCode.REGISTRATION_PROJECT_ID]:\n    'Undefined project identifier. Check Firebase app initialization.',\n  [ErrorCode.REGISTRATION_API_KEY]:\n    'Undefined API key. Check Firebase app initialization.',\n  [ErrorCode.REGISTRATION_APP_ID]:\n    'Undefined app identifier. Check Firebase app initialization.',\n  [ErrorCode.STORAGE_OPEN]:\n    'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\n  [ErrorCode.STORAGE_GET]:\n    'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\n  [ErrorCode.STORAGE_SET]:\n    'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\n  [ErrorCode.STORAGE_DELETE]:\n    'Error thrown when deleting from storage. Original error: {$originalErrorMessage}.',\n  [ErrorCode.FETCH_NETWORK]:\n    'Fetch client failed to connect to a network. Check Internet connection.' +\n    ' Original error: {$originalErrorMessage}.',\n  [ErrorCode.FETCH_TIMEOUT]:\n    'The config fetch request timed out. ' +\n    ' Configure timeout using \"fetchTimeoutMillis\" SDK setting.',\n  [ErrorCode.FETCH_THROTTLE]:\n    'The config fetch request timed out while in an exponential backoff state.' +\n    ' Configure timeout using \"fetchTimeoutMillis\" SDK setting.' +\n    ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',\n  [ErrorCode.FETCH_PARSE]:\n    'Fetch client could not parse response.' +\n    ' Original error: {$originalErrorMessage}.',\n  [ErrorCode.FETCH_STATUS]:\n    'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.',\n  [ErrorCode.INDEXED_DB_UNAVAILABLE]:\n    'Indexed DB is not supported by current browser'\n};\n\n// Note this is effectively a type system binding a code to params. This approach overlaps with the\n// role of TS interfaces, but works well for a few reasons:\n// 1) JS is unaware of TS interfaces, eg we can't test for interface implementation in JS\n// 2) callers should have access to a human-readable summary of the error and this interpolates\n//    params into an error message;\n// 3) callers should be able to programmatically access data associated with an error, which\n//    ErrorData provides.\ninterface ErrorParams {\n  [ErrorCode.STORAGE_OPEN]: { originalErrorMessage: string | undefined };\n  [ErrorCode.STORAGE_GET]: { originalErrorMessage: string | undefined };\n  [ErrorCode.STORAGE_SET]: { originalErrorMessage: string | undefined };\n  [ErrorCode.STORAGE_DELETE]: { originalErrorMessage: string | undefined };\n  [ErrorCode.FETCH_NETWORK]: { originalErrorMessage: string };\n  [ErrorCode.FETCH_THROTTLE]: { throttleEndTimeMillis: number };\n  [ErrorCode.FETCH_PARSE]: { originalErrorMessage: string };\n  [ErrorCode.FETCH_STATUS]: { httpStatus: number };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  'remoteconfig' /* service */,\n  'Remote Config' /* service name */,\n  ERROR_DESCRIPTION_MAP\n);\n\n// Note how this is like typeof/instanceof, but for ErrorCode.\nexport function hasErrorCode(e: Error, errorCode: ErrorCode): boolean {\n  return e instanceof FirebaseError && e.code.indexOf(errorCode) !== -1;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Value as ValueType, ValueSource } from '@firebase/remote-config-types';\n\nconst DEFAULT_VALUE_FOR_BOOLEAN = false;\nconst DEFAULT_VALUE_FOR_STRING = '';\nconst DEFAULT_VALUE_FOR_NUMBER = 0;\n\nconst BOOLEAN_TRUTHY_VALUES = ['1', 'true', 't', 'yes', 'y', 'on'];\n\nexport class Value implements ValueType {\n  constructor(\n    private readonly _source: ValueSource,\n    private readonly _value: string = DEFAULT_VALUE_FOR_STRING\n  ) {}\n\n  asString(): string {\n    return this._value;\n  }\n\n  asBoolean(): boolean {\n    if (this._source === 'static') {\n      return DEFAULT_VALUE_FOR_BOOLEAN;\n    }\n    return BOOLEAN_TRUTHY_VALUES.indexOf(this._value.toLowerCase()) >= 0;\n  }\n\n  asNumber(): number {\n    if (this._source === 'static') {\n      return DEFAULT_VALUE_FOR_NUMBER;\n    }\n    let num = Number(this._value);\n    if (isNaN(num)) {\n      num = DEFAULT_VALUE_FOR_NUMBER;\n    }\n    return num;\n  }\n\n  getSource(): ValueSource {\n    return this._source;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _getProvider, FirebaseApp, getApp } from '@firebase/app';\nimport {\n  LogLevel as RemoteConfigLogLevel,\n  RemoteConfig,\n  Value\n} from './public_types';\nimport { RemoteConfigAbortSignal } from './client/remote_config_fetch_client';\nimport { RC_COMPONENT_NAME } from './constants';\nimport { ErrorCode, hasErrorCode } from './errors';\nimport { RemoteConfig as RemoteConfigImpl } from './remote_config';\nimport { Value as ValueImpl } from './value';\nimport { LogLevel as FirebaseLogLevel } from '@firebase/logger';\nimport { getModularInstance } from '@firebase/util';\n\n/**\n *\n * @param app - The {@link @firebase/app#FirebaseApp} instance.\n * @returns A {@link RemoteConfig} instance.\n *\n * @public\n */\nexport function getRemoteConfig(app: FirebaseApp = getApp()): RemoteConfig {\n  app = getModularInstance(app);\n  const rcProvider = _getProvider(app, RC_COMPONENT_NAME);\n  return rcProvider.getImmediate();\n}\n\n/**\n * Makes the last fetched config available to the getters.\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @returns A `Promise` which resolves to true if the current call activated the fetched configs.\n * If the fetched configs were already activated, the `Promise` will resolve to false.\n *\n * @public\n */\nexport async function activate(remoteConfig: RemoteConfig): Promise<boolean> {\n  const rc = getModularInstance(remoteConfig) as RemoteConfigImpl;\n  const [lastSuccessfulFetchResponse, activeConfigEtag] = await Promise.all([\n    rc._storage.getLastSuccessfulFetchResponse(),\n    rc._storage.getActiveConfigEtag()\n  ]);\n  if (\n    !lastSuccessfulFetchResponse ||\n    !lastSuccessfulFetchResponse.config ||\n    !lastSuccessfulFetchResponse.eTag ||\n    lastSuccessfulFetchResponse.eTag === activeConfigEtag\n  ) {\n    // Either there is no successful fetched config, or is the same as current active\n    // config.\n    return false;\n  }\n  await Promise.all([\n    rc._storageCache.setActiveConfig(lastSuccessfulFetchResponse.config),\n    rc._storage.setActiveConfigEtag(lastSuccessfulFetchResponse.eTag)\n  ]);\n  return true;\n}\n\n/**\n * Ensures the last activated config are available to the getters.\n * @param remoteConfig - The {@link RemoteConfig} instance.\n *\n * @returns A `Promise` that resolves when the last activated config is available to the getters.\n * @public\n */\nexport function ensureInitialized(remoteConfig: RemoteConfig): Promise<void> {\n  const rc = getModularInstance(remoteConfig) as RemoteConfigImpl;\n  if (!rc._initializePromise) {\n    rc._initializePromise = rc._storageCache.loadFromStorage().then(() => {\n      rc._isInitializationComplete = true;\n    });\n  }\n  return rc._initializePromise;\n}\n\n/**\n * Fetches and caches configuration from the Remote Config service.\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @public\n */\nexport async function fetchConfig(remoteConfig: RemoteConfig): Promise<void> {\n  const rc = getModularInstance(remoteConfig) as RemoteConfigImpl;\n  // Aborts the request after the given timeout, causing the fetch call to\n  // reject with an `AbortError`.\n  //\n  // <p>Aborting after the request completes is a no-op, so we don't need a\n  // corresponding `clearTimeout`.\n  //\n  // Locating abort logic here because:\n  // * it uses a developer setting (timeout)\n  // * it applies to all retries (like curl's max-time arg)\n  // * it is consistent with the Fetch API's signal input\n  const abortSignal = new RemoteConfigAbortSignal();\n\n  setTimeout(async () => {\n    // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\n    abortSignal.abort();\n  }, rc.settings.fetchTimeoutMillis);\n\n  // Catches *all* errors thrown by client so status can be set consistently.\n  try {\n    await rc._client.fetch({\n      cacheMaxAgeMillis: rc.settings.minimumFetchIntervalMillis,\n      signal: abortSignal\n    });\n\n    await rc._storageCache.setLastFetchStatus('success');\n  } catch (e) {\n    const lastFetchStatus = hasErrorCode(e as Error, ErrorCode.FETCH_THROTTLE)\n      ? 'throttle'\n      : 'failure';\n    await rc._storageCache.setLastFetchStatus(lastFetchStatus);\n    throw e;\n  }\n}\n\n/**\n * Gets all config.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @returns All config.\n *\n * @public\n */\nexport function getAll(remoteConfig: RemoteConfig): Record<string, Value> {\n  const rc = getModularInstance(remoteConfig) as RemoteConfigImpl;\n  return getAllKeys(\n    rc._storageCache.getActiveConfig(),\n    rc.defaultConfig\n  ).reduce((allConfigs, key) => {\n    allConfigs[key] = getValue(remoteConfig, key);\n    return allConfigs;\n  }, {} as Record<string, Value>);\n}\n\n/**\n * Gets the value for the given key as a boolean.\n *\n * Convenience method for calling <code>remoteConfig.getValue(key).asBoolean()</code>.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @param key - The name of the parameter.\n *\n * @returns The value for the given key as a boolean.\n * @public\n */\nexport function getBoolean(remoteConfig: RemoteConfig, key: string): boolean {\n  return getValue(getModularInstance(remoteConfig), key).asBoolean();\n}\n\n/**\n * Gets the value for the given key as a number.\n *\n * Convenience method for calling <code>remoteConfig.getValue(key).asNumber()</code>.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @param 14.185-2.575-24.25-7.726-30.193-5.072-6.023-12.64-9.033-22.705-9.033-2.695 0-6.062.317-10.104.95-3.249.476-5.587.714-7.013.714-2.378 0-4.24-.475-5.586-1.426-1.268-1.03-1.903-2.299-1.903-3.805 0-1.664.595-2.933 1.784-3.804 1.268-.951 3.288-1.426 6.062-1.426l6.537.238 5.707.237c10.065 0 17.631-2.576 22.703-7.727 5.072-5.151 7.61-13.115 7.61-23.893 0-13.234-2.418-22.624-7.252-28.172-4.834-5.626-12.046-8.44-21.635-8.44-8.796 0-15.81 1.585-21.041 4.755-5.23 3.17-7.846 6.102-7.846 8.797 0 1.743 1.506 4.081 4.518 7.013 4.28 3.963 6.42 8.082 6.42 12.362 0 3.249-1.19 5.984-3.567 8.203-2.377 2.219-5.427 3.328-9.152 3.328-3.962 0-7.212-1.506-9.748-4.518-2.457-3.01-3.686-7.21-3.686-12.6 0-8.4 3.013-15.848 9.036-22.347 8.558-9.193 20.801-13.789 36.73-13.789zm100.256 177.477h40.117l-12.611 30.193c4.215-3.374 9.535-5.422 15.295-5.422 13.594 0 24.459 11.158 24.459 24.752 0 13.595-10.865 24.752-24.46 24.752-1.163 0-2.275-.152-3.396-.31 3.263 4.176 5.266 9.462 5.266 15.173 0 13.589-10.853 24.433-24.44 24.442h-.017c-13.588-.01-24.735-10.853-24.735-24.442 0-5.665 2.033-11.013 5.248-15.173-1.023.128-2.025.312-3.084.312-13.594 0-24.751-11.159-24.751-24.754 0-13.594 11.157-24.752 24.752-24.752 5.542 0 10.655 1.858 14.775 4.973l-12.418-29.744z"}}]})(props);
};
module.exports.GiCard3Diamonds = function GiCard3Diamonds (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119.436 36c-16.126 0-29.2 17.237-29.2 38.5v363c0 21.263 13.074 38.5 29.2 38.5h275.298c16.126 0 29.198-17.237 29.198-38.5v-363c0-21.263-13.072-38.5-29.198-38.5H119.436zm26.884 3.717h.002l47.393 58.271-47.393 58.287-47.377-58.289 47.375-58.27zm100.303 136.818c14.899 0 26.786 4.002 35.662 12.006 8.876 8.004 13.315 17.91 13.315 29.719 0 8.48-2.418 15.809-7.252 21.99-4.755 6.181-12.996 11.65-24.725 16.404 11.332 2.774 20.168 7.37 26.508 13.79 8.083 8.162 12.125 18.266 12.125 30.312 0 13.63-4.834 24.567-14.502 32.808-11.015 9.51-25.359 14.266-43.031 14.266-10.62 0-19.774-1.743-27.461-5.23-7.608-3.487-13.314-8.203-17.117-14.147-3.804-5.943-5.706-12.638-5.706-20.088 0-6.023 1.467-10.778 4.399-14.265s6.617-5.23 11.055-5.23c4.041 0 7.29 1.346 9.748 4.04 2.456 2.615 3.683 6.222 3.683 10.819 0 2.932-.632 5.427-1.9 7.488-1.268 1.981-3.489 3.844-6.658 5.588-3.408 1.822-5.112 3.566-5.112 5.23 0 2.378 1.19 5.07 3.567 8.082 2.457 2.932 6.023 5.31 10.699 7.133 4.755 1.743 10.738 2.615 17.95 2.615 12.441 0 21.634-3.05 27.577-9.152 6.023-6.181 9.035-16.048 9.035-29.6 0-14.185-2.577-24.25-7.728-30.193-5.072-6.023-12.639-9.035-22.703-9.035-2.695 0-6.064.317-10.106.95-3.249.476-5.585.714-7.011.714-2.378 0-4.241-.475-5.588-1.426-1.268-1.03-1.903-2.299-1.903-3.805 0-1.664.595-2.93 1.784-3.802 1.268-.951 3.288-1.428 6.062-1.428l6.54.238 5.704.238c10.065 0 17.633-2.575 22.705-7.726 5.072-5.151 7.608-13.117 7.608-23.895 0-13.234-2.418-22.624-7.252-28.172-4.834-5.626-12.046-8.439-21.635-8.439-8.797 0-15.809 1.584-21.04 4.754-5.23 3.17-7.845 6.102-7.845 8.797 0 1.743 1.506 4.081 4.518 7.013 4.28 3.963 6.418 8.084 6.418 12.364 0 3.249-1.19 5.982-3.567 8.2-2.377 2.22-5.427 3.33-9.152 3.33-3.962 0-7.212-1.505-9.748-4.517-2.457-3.011-3.686-7.212-3.686-12.601 0-8.4 3.013-15.85 9.036-22.348 8.558-9.193 20.801-13.789 36.73-13.789zm119.04 175.988h.001l47.39 58.272-47.39 58.287-47.377-58.289 47.375-58.27z"}}]})(props);
};
module.exports.GiCard3Hearts = function GiCard3Hearts (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119.436 36c-16.126 0-29.2 17.237-29.2 38.5v363c0 21.263 13.074 38.5 29.2 38.5h275.298c16.126 0 29.198-17.237 29.198-38.5v-363c0-21.263-13.072-38.5-29.198-38.5H119.436zm57.214 16.174h.002c13.612-.318 26.504 9.855 27.075 28.043.976 31.09-47.74 52.945-52.313 70.015-4.997-18.649-51.413-37.573-52.45-70.015-.994-31.155 37.404-37.91 52.452-11.848 6.261-10.846 15.921-15.977 25.234-16.195zm69.973 124.361c14.899 0 26.786 4.002 35.662 12.006 8.876 8.004 13.315 17.909 13.315 29.717 0 8.48-2.418 15.81-7.252 21.992-4.755 6.181-12.996 11.65-24.725 16.404 11.333 2.774 20.168 7.37 26.508 13.79 8.083 8.162 12.125 18.266 12.125 30.312 0 13.63-4.834 24.567-14.502 32.808-11.016 9.51-25.36 14.266-43.033 14.266-10.62 0-19.772-1.743-27.46-5.23-7.607-3.487-13.313-8.203-17.116-14.147-3.804-5.943-5.706-12.64-5.706-20.09 0-6.023 1.467-10.776 4.399-14.263s6.617-5.23 11.055-5.23c4.041 0 7.29 1.346 9.748 4.04 2.456 2.615 3.683 6.222 3.683 10.819 0 2.932-.634 5.427-1.902 7.488-1.268 1.981-3.487 3.844-6.656 5.588-3.408 1.822-5.112 3.566-5.112 5.23 0 2.378 1.19 5.07 3.567 8.082 2.457 2.932 6.023 5.31 10.699 7.133 4.755 1.743 10.738 2.615 17.95 2.615 12.441 0 21.634-3.052 27.577-9.154 6.023-6.181 9.033-16.046 9.033-29.598 0-14.185-2.575-24.25-7.726-30.193-5.072-6.023-12.639-9.035-22.703-9.035-2.695 0-6.064.317-10.106.95-3.249.476-5.587.714-7.013.714-2.378 0-4.24-.475-5.586-1.426-1.268-1.03-1.903-2.299-1.903-3.805 0-1.664.595-2.93 1.784-3.802 1.268-.951 3.288-1.428 6.062-1.428l6.537.238 5.707.238c10.065 0 17.633-2.575 22.705-7.726 5.072-5.151 7.608-13.117 7.608-23.895 0-13.234-2.418-22.624-7.252-28.172-4.834-5.626-12.046-8.439-21.635-8.439-8.797 0-15.809 1.584-21.04 4.754-5.23 3.17-7.845 6.102-7.845 8.797 0 1.743 1.504 4.081 4.516 7.013 4.28 3.963 6.42 8.082 6.42 12.362 0 3.249-1.19 5.984-3.567 8.203-2.377 2.219-5.427 3.328-9.152 3.328-3.962 0-7.212-1.506-9.748-4.518-2.457-3.01-3.686-7.21-3.686-12.6 0-8.4 3.013-15.848 9.036-22.347 8.558-9.193 20.801-13.789 36.73-13.789zM360.73 361.77c4.572 17.07 53.289 38.923 52.312 70.013-.57 18.189-13.462 28.364-27.074 28.045v-.002c-9.314-.217-18.975-5.349-25.237-16.195-15.048 26.061-53.445 19.307-52.45-11.848 1.036-32.442 47.451-51.364 52.449-70.013z"}}]})(props);
};
module.exports.GiCard3Spades = function GiCard3Spades (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119.436 36c-16.126 0-29.2 17.237-29.2 38.5v363c0 21.263 13.074 38.5 29.2 38.5h275.298c16.126 0 29.198-17.237 29.198-38.5v-363c0-21.263-13.072-38.5-29.198-38.5H119.436zm26.652 8.047s46.338 33.838 47.271 63.068c.776 24.287-25.024 32.12-40.775 18.584l13.633 32.655h-40.115l13.613-32.635c-15.535 13.88-40.006 5.347-40.758-18.606-.88-28.01 47.13-63.066 47.13-63.066zm99.451 132.488c14.899 0 26.786 4.002 35.662 12.006 8.876 8.004 13.313 17.91 13.313 29.719 0 8.48-2.416 15.809-7.25 21.99-4.755 6.181-12.998 11.65-24.727 16.404 11.333 2.774 20.17 7.37 26.51 13.79 8.083 8.162 12.125 18.266 12.125 30.312 0 13.63-4.836 24.567-14.504 32.808-11.015 9.51-25.359 14.266-43.031 14.266-10.62 0-19.772-1.743-27.46-5.23-7.607-3.487-13.313-8.203-17.116-14.147-3.804-5.943-5.707-12.64-5.707-20.09 0-6.023 1.466-10.776 4.398-14.263 2.932-3.487 6.617-5.23 11.055-5.23 4.041 0 7.291 1.346 9.748 4.04 2.456 2.615 3.685 6.222 3.685 10.819 0 2.932-.634 5.427-1.902 7.488-1.268 1.981-3.486 3.844-6.656 5.588-3.408 1.822-5.112 3.566-5.112 5.23 0 2.378 1.19 5.07 3.567 8.082 2.456 2.932 6.021 5.31 10.697 7.133 4.755 1.743 10.738 2.615 17.95 2.615 12.441 0 21.636-3.052 27.58-9.154 6.022-6.181 9.032-16.046 9.032-29.598 0-14.185-2.575-24.25-7.726-30.193-5.072-6.023-12.64-9.035-22.705-9.035-2.695 0-6.062.317-10.104.95-3.249.476-5.587.714-7.013.714-2.378 0-4.24-.475-5.586-1.426-1.268-1.03-1.903-2.299-1.903-3.805 0-1.664.595-2.93 1.784-3.802 1.268-.951 3.288-1.428 6.062-1.428l6.537.238 5.707.238c10.065 0 17.631-2.575 22.703-7.726 5.072-5.151 7.61-13.117 7.61-23.895 0-13.234-2.418-22.624-7.252-28.172-4.834-5.626-12.046-8.439-21.635-8.439-8.797 0-15.81 1.584-21.041 4.754-5.23 3.17-7.846 6.102-7.846 8.797 0 1.743 1.506 4.081 4.518 7.013 4.28 3.963 6.42 8.084 6.42 12.364 0 3.249-1.19 5.982-3.567 8.2-2.377 2.22-5.43 3.33-9.154 3.33-3.962 0-7.21-1.507-9.746-4.519-2.457-3.01-3.686-7.21-3.686-12.6 0-8.4 3.01-15.848 9.034-22.347 8.558-9.193 20.803-13.789 36.732-13.789zm100.238 177.113h40.118l-13.633 32.653c15.75-13.536 41.551-5.701 40.775 18.586-.933 29.23-47.271 63.068-47.271 63.068s-48.01-35.059-47.131-63.068c.751-23.953 25.222-32.485 40.758-18.604l-13.616-32.635z"}}]})(props);
};
module.exports.GiCard4Clubs = function GiCard4Clubs (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119.436 36c-16.126 0-29.2 17.237-29.2 38.5v363c0 21.263 13.074 38.5 29.2 38.5h275.298c16.126 0 29.198-17.237 29.198-38.5v-363c0-21.263-13.072-38.5-29.198-38.5H119.436zm26.832 8.408v.002h.015c13.587.01 24.442 10.853 24.442 24.442 0 5.71-2.003 10.997-5.266 15.173 1.12-.158 2.232-.31 3.396-.31 13.595 0 24.458 11.157 24.458 24.752 0 13.594-10.863 24.752-24.458 24.752-5.76 0-11.08-2.048-15.294-5.422l12.609 30.193h-40.117l12.42-29.744c-4.12 3.115-9.233 4.973-14.776 4.973-13.594 0-24.752-11.16-24.752-24.754 0-13.595 11.158-24.752 24.752-24.752 1.059 0 2.058.184 3.082.312-3.215-4.16-5.248-9.509-5.248-15.173 0-13.589 11.15-24.434 24.737-24.444zM269.67 179.625h7.726v112.453h27.342v10.104h-27.342v25.32c0 2.219.872 4 2.616 5.348 2.536 1.822 5.468 2.734 8.797 2.734h10.103v8.916H232.94v-8.916h12.243c4.12 0 7.133-.872 9.035-2.615 1.981-1.744 2.972-4.28 2.972-7.608v-23.18h-67.283V290.77l79.764-111.145zm-12.48 32.213l-57.417 80.24h57.416v-80.24zm88.605 142.174h40.117l-12.611 30.193c4.215-3.374 9.535-5.422 15.295-5.422 13.594 0 24.459 11.158 24.459 24.752 0 13.595-10.865 24.752-24.46 24.752-1.163 0-2.275-.152-3.396-.31 3.263 4.176 5.266 9.462 5.266 15.173 0 13.589-10.853 24.433-24.44 24.442h-.017c-13.588-.01-24.735-10.853-24.735-24.442 0-5.665 2.033-11.013 5.248-15.173-1.023.128-2.025.312-3.084.312-13.594 0-24.751-11.159-24.751-24.754 0-13.594 11.157-24.752 24.752-24.752 5.542 0 10.655 1.858 14.775 4.973l-12.418-29.744z"}}]})(props);
};
module.exports.GiCard4Diamonds = function GiCard4Diamonds (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119.436 36c-16.126 0-29.2 17.237-29.2 38.5v363c0 21.263 13.074 38.5 29.2 38.5h275.298c16.126 0 29.198-17.237 29.198-38.5v-363c0-21.263-13.072-38.5-29.198-38.5H119.436zm26.882 3.717h.002l47.393 58.27-47.393 58.286-47.375-58.287 47.373-58.27zm124.436 139.908h7.726v112.453h27.34v10.104h-27.34v25.32c0 2.219.872 4.002 2.616 5.35 2.536 1.822 5.468 2.734 8.797 2.734h10.103v8.914h-65.975v-8.914h12.245c4.12 0 7.133-.872 9.035-2.615 1.981-1.744 2.97-4.28 2.97-7.608v-23.181h-67.28v-11.41l79.763-111.147zM258.27 211.84l-57.414 80.238h57.414V211.84zm107.39 140.683h.001l47.393 58.27-47.393 58.287-47.375-58.287 47.373-58.27z"}}]})(props);
};
module.exports.GiCard4Hearts = function GiCard4Hearts (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119.436 36c-16.126 0-29.2 17.237-29.2 38.5v363c0 21.263 13.074 38.5 29.2 38.5h275.298c16.126 0 29.198-17.237 29.198-38.5v-363c0-21.263-13.072-38.5-29.198-38.5H119.436zm57.214 16.174h.002c13.612-.318 26.502 9.855 27.073 28.043.976 31.09-47.738 52.945-52.31 70.015-4.998-18.649-51.416-37.573-52.452-70.015-.995-31.155 37.403-37.91 52.451-11.848 6.261-10.846 15.923-15.977 25.236-16.195zm94.104 127.451h7.726v112.453h27.34v10.104h-27.34v25.32c0 2.219.872 4.002 2.616 5.35 2.536 1.822 5.468 2.734 8.797 2.734h10.103v8.914h-65.975v-8.914h12.245c4.12 0 7.133-.872 9.035-2.615 1.981-1.744 2.97-4.28 2.97-7.608v-23.181h-67.28v-11.41l79.763-111.147zM258.27 211.84l-57.414 80.238h57.414V211.84zM360.73 361.77c4.572 17.07 53.287 38.923 52.31 70.013-.57 18.188-13.46 28.36-27.072 28.043h-.002c-9.313-.218-18.975-5.35-25.236-16.195-15.048 26.061-53.444 19.307-52.45-11.848 1.037-32.442 47.452-51.364 52.45-70.013z"}}]})(props);
};
module.exports.GiCard4Spades = function GiCard4Spades (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119.434 36c-16.126 0-29.2 17.237-29.2 38.5v363c0 21.263 13.074 38.5 29.2 38.5h275.3c16.126 0 29.198-17.237 29.198-38.5v-363c0-21.263-13.072-38.5-29.198-38.5h-275.3zm26.654 8.047s46.338 33.838 47.271 63.068c.776 24.287-25.024 32.122-40.775 18.586l13.633 32.653H126.1l13.613-32.635c-15.535 13.88-40.004 5.349-40.756-18.604-.88-28.01 47.13-63.068 47.13-63.068zM269.67 179.625h7.726v112.453h27.34v10.106h-27.34v25.318c0 2.219.872 4.002 2.616 5.35 2.536 1.822 5.468 2.734 8.797 2.734h10.103v8.916h-65.974v-8.916h12.244c4.12 0 7.133-.872 9.035-2.615 1.981-1.744 2.97-4.28 2.97-7.608v-23.18h-67.28v-11.412l79.763-111.146zm-12.483 32.215l-57.416 80.238h57.417V211.84zm88.59 141.808h40.118l-13.633 32.653c15.75-13.536 41.551-5.701 40.775 18.586-.933 29.23-47.271 63.068-47.271 63.068s-48.012-35.059-47.133-63.068c.751-23.953 25.222-32.485 40.758-18.604l-13.614-32.635z"}}]})(props);
};
module.exports.GiCard5Clubs = function GiCard5Clubs (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119.436 36c-16.126 0-29.2 17.237-29.2 38.5v363c0 21.263 13.074 38.5 29.2 38.5h275.298c16.126 0 29.198-17.237 29.198-38.5v-363c0-21.263-13.072-38.5-29.198-38.5H119.436zm26.832 8.408v.002h.015c13.587.01 24.442 10.853 24.442 24.442 0 5.71-2.003 10.997-5.266 15.173 1.12-.158 2.232-.31 3.396-.31 13.595 0 24.458 11.157 24.458 24.752 0 13.594-10.863 24.752-24.458 24.752-5.76 0-11.08-2.048-15.294-5.422l12.609 30.193h-40.117l12.42-29.744c-4.12 3.115-9.233 4.973-14.776 4.973-13.594 0-24.752-11.16-24.752-24.754 0-13.595 11.158-24.752 24.752-24.752 1.059 0 2.058.184 3.082.312-3.215-4.16-5.248-9.509-5.248-15.173 0-13.589 11.15-24.434 24.737-24.444zm63.61 132.127c20.05 4.597 36.415 6.895 49.095 6.895 5.943 0 11.531-.557 16.761-1.666 5.23-1.19 9.153-2.536 11.768-4.041 1.347-.714 2.219-1.07 2.615-1.07.793 0 1.19.594 1.19 1.783 0 2.773-1.784 6.46-5.35 11.056-3.566 4.517-8.44 8.122-14.621 10.817-6.102 2.694-13.156 4.04-21.16 4.04-9.272 0-20.328-1.426-33.166-4.279l-3.922 45.41c6.023-3.01 11.768-5.27 17.236-6.775 5.468-1.506 10.66-2.26 15.572-2.26 15.533 0 28.57 5.151 39.11 15.453 10.62 10.303 15.928 23.022 15.928 38.159 0 16.8-5.626 30.629-16.88 41.486-11.253 10.857-25.835 16.285-43.745 16.285-13.71 0-24.884-3.882-33.522-11.648-8.559-7.846-12.838-17.158-12.838-27.936 0-6.498 1.347-11.49 4.041-14.976 2.774-3.567 6.3-5.35 10.58-5.35 4.2 0 7.608 1.426 10.223 4.28 2.694 2.773 4.043 6.418 4.043 10.935 0 3.407-.674 6.063-2.022 7.965-1.267 1.902-3.645 3.486-7.132 4.754-3.487 1.347-5.23 2.893-5.23 4.636 0 2.536 1.188 5.35 3.566 8.44 2.377 3.011 5.944 5.509 10.699 7.49 4.834 1.902 10.342 2.852 16.523 2.852 12.125 0 21.358-3.765 27.697-11.293 6.42-7.529 9.63-19.772 9.63-36.73 0-15.454-3.37-26.747-10.106-33.88-6.736-7.132-15.334-10.699-25.795-10.699-4.755 0-9.509.872-14.264 2.615-4.755 1.744-9.51 4.359-14.265 7.846-.555 5.547-1.545 9.272-2.971 11.174-1.426 1.822-3.25 2.734-5.469 2.734-1.585 0-2.853-.554-3.804-1.664-.951-1.11-1.426-2.654-1.426-4.635 0-3.487 1.624-6.936 4.873-10.343.95-1.03 1.625-1.94 2.021-2.733l2.735-34.95c1.11-13.788 1.704-27.18 1.783-40.177zm135.917 177.477h40.117l-12.611 30.193c4.215-3.374 9.535-5.422 15.295-5.422 13.594 0 24.459 11.157 24.459 24.752 0 13.595-10.865 24.752-24.46 24.752-1.163 0-2.275-.152-3.396-.31 3.263 4.176 5.266 9.462 5.266 15.173 0 13.589-10.853 24.433-24.44 24.442h-.017c-13.588-.01-24.735-10.853-24.735-24.442 0-5.665 2.033-11.013 5.248-15.173-1.023.128-2.025.312-3.084.312-13.594 0-24.751-11.159-24.751-24.754 0-13.594 11.157-24.752 24.752-24.752 5.542 0 10.655 1.858 14.775 4.973l-12.418-29.744z"}}]})(props);
};
module.exports.GiCard5Diamonds = function GiCard5Diamonds (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119.436 36c-16.126 0-29.2 17.237-29.2 38.5v363.002c0 21.263 13.074 38.5 29.2 38.5h275.298c16.126 0 29.198-17.237 29.198-38.5V74.5c0-21.263-13.072-38.5-29.198-38.5H119.436zm26.884 3.719l47.393 58.27-47.393 58.286-47.375-58.287 47.375-58.27zm64.64 136.816c20.05 4.597 36.415 6.895 49.095 6.895 5.943 0 11.531-.555 16.761-1.664 5.23-1.19 9.153-2.536 11.768-4.041 1.347-.714 2.219-1.07 2.615-1.07.793 0 1.19.594 1.19 1.782 0 2.774-1.784 6.459-5.35 11.055-3.566 4.517-8.44 8.124-14.621 10.819-6.102 2.694-13.154 4.04-21.158 4.04-9.272 0-20.328-1.426-33.166-4.279l-3.924 45.41c6.023-3.011 11.768-5.271 17.236-6.777 5.468-1.506 10.66-2.258 15.573-2.258 15.532 0 28.569 5.151 39.109 15.453 10.62 10.303 15.93 23.022 15.93 38.159 0 16.8-5.628 30.629-16.881 41.486-11.253 10.857-25.834 16.285-43.744 16.285-13.71 0-24.884-3.882-33.522-11.648-8.559-7.846-12.838-17.158-12.838-27.936 0-6.498 1.347-11.491 4.041-14.978 2.774-3.567 6.3-5.348 10.58-5.348 4.2 0 7.608 1.426 10.223 4.28 2.694 2.773 4.041 6.418 4.041 10.935 0 3.407-.674 6.063-2.022 7.965-1.268 1.902-3.643 3.486-7.13 4.754-3.487 1.347-5.23 2.893-5.23 4.636 0 2.536 1.188 5.349 3.566 8.44 2.377 3.011 5.942 5.507 10.697 7.488 4.834 1.902 10.342 2.853 16.523 2.853 12.125 0 21.358-3.764 27.698-11.292 6.419-7.53 9.628-19.772 9.628-36.731 0-15.453-3.367-26.747-10.103-33.879-6.736-7.132-15.336-10.7-25.797-10.7-4.755 0-9.509.873-14.264 2.616-4.755 1.744-9.51 4.359-14.265 7.846-.555 5.547-1.545 9.272-2.97 11.174-1.427 1.822-3.25 2.734-5.47 2.734-1.585 0-2.851-.555-3.802-1.664-.951-1.11-1.428-2.656-1.428-4.637 0-3.487 1.626-6.934 4.875-10.342.95-1.03 1.623-1.94 2.02-2.732l2.734-34.95c1.11-13.788 1.704-27.182 1.783-40.179zm154.7 175.988h.002l47.393 58.272-47.393 58.287-47.375-58.287 47.373-58.272z"}}]})(props);
};
module.exports.GiCard5Hearts = function GiCard5Hearts (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119.436 36c-16.126 0-29.2 17.237-29.2 38.5v363c0 21.263 13.074 38.5 29.2 38.5h275.298c16.126 0 29.198-17.237 29.198-38.5v-363c0-21.263-13.072-38.5-29.198-38.5H119.436zm57.216 16.174c13.613-.319 26.504 9.854 27.075 28.043.976 31.09-47.74 52.945-52.313 70.015-4.997-18.649-51.413-37.573-52.45-70.015-.994-31.155 37.404-37.91 52.452-11.848 6.262-10.846 15.923-15.978 25.236-16.195zm34.31 124.361c20.05 4.597 36.415 6.895 49.095 6.895 5.943 0 11.529-.555 16.76-1.664 5.23-1.19 9.154-2.536 11.769-4.041 1.347-.714 2.219-1.07 2.615-1.07.793 0 1.188.594 1.188 1.782 0 2.774-1.782 6.459-5.348 11.055-3.566 4.517-8.44 8.124-14.621 10.819-6.102 2.694-13.156 4.04-21.16 4.04-9.272 0-20.328-1.426-33.166-4.279l-3.922 45.408c6.023-3.01 11.768-5.27 17.236-6.775 5.468-1.506 10.66-2.258 15.572-2.258 15.533 0 28.57 5.151 39.11 15.453 10.619 10.303 15.928 23.022 15.928 38.159 0 16.8-5.626 30.629-16.88 41.486-11.253 10.857-25.835 16.285-43.745 16.285-13.71 0-24.884-3.884-33.522-11.65-8.559-7.846-12.838-17.156-12.838-27.934 0-6.498 1.347-11.491 4.041-14.978 2.774-3.567 6.3-5.35 10.58-5.35 4.2 0 7.608 1.426 10.223 4.28 2.694 2.773 4.043 6.42 4.043 10.937 0 3.407-.674 6.06-2.022 7.963-1.268 1.902-3.646 3.488-7.132 4.756-3.487 1.347-5.23 2.893-5.23 4.636 0 2.536 1.188 5.349 3.566 8.44 2.377 3.011 5.944 5.507 10.699 7.488 4.834 1.902 10.342 2.853 16.523 2.853 12.125 0 21.358-3.764 27.697-11.292 6.42-7.53 9.63-19.774 9.63-36.733 0-15.453-3.37-26.745-10.106-33.877-6.736-7.132-15.334-10.7-25.795-10.7-4.755 0-9.509.873-14.264 2.616-4.755 1.744-9.51 4.359-14.265 7.846-.555 5.547-1.547 9.272-2.973 11.174-1.426 1.822-3.248 2.734-5.467 2.734-1.585 0-2.853-.555-3.804-1.664-.951-1.11-1.426-2.656-1.426-4.637 0-3.487 1.624-6.934 4.873-10.342.95-1.03 1.625-1.941 2.021-2.734l2.735-34.947c1.11-13.79 1.704-27.183 1.783-40.18zM360.73 361.77c4.572 17.07 53.289 38.923 52.312 70.013-.57 18.189-13.462 28.364-27.074 28.045v-.002c-9.314-.217-18.975-5.349-25.237-16.195-15.048 26.061-53.445 19.308-52.45-11.848 1.036-32.442 47.451-51.364 52.449-70.013z"}}]})(props);
};
module.exports.GiCard5Spades = function GiCard5Spades (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119.436 36c-16.126 0-29.2 17.237-29.2 38.5v363c0 21.263 13.074 38.5 29.2 38.5h275.298c16.126 0 29.198-17.237 29.198-38.5v-363c0-21.263-13.072-38.5-29.198-38.5H119.436zm26.654 8.045s46.338 33.838 47.271 63.068c.776 24.287-25.024 32.122-40.775 18.586l13.633 32.653h-40.117l13.613-32.633c-15.535 13.88-40.004 5.347-40.756-18.606-.88-28.01 47.13-63.068 47.13-63.068zm63.789 132.49c20.05 4.597 36.414 6.895 49.094 6.895 5.943 0 11.531-.555 16.761-1.664 5.23-1.19 9.153-2.538 11.768-4.043 1.347-.714 2.219-1.069 2.615-1.069.793 0 1.19.593 1.19 1.782 0 2.773-1.784 6.46-5.35 11.056-3.566 4.517-8.44 8.122-14.621 10.817-6.102 2.694-13.156 4.04-21.16 4.04-9.272 0-20.328-1.426-33.166-4.279l-3.922 45.41c6.023-3.01 11.768-5.27 17.236-6.775 5.468-1.506 10.66-2.26 15.572-2.26 15.533 0 28.57 5.151 39.11 15.453 10.62 10.303 15.928 23.022 15.928 38.159 0 16.8-5.626 30.629-16.88 41.486-11.253 10.857-25.833 16.287-43.743 16.287-13.71 0-24.886-3.884-33.524-11.65-8.559-7.846-12.838-17.158-12.838-27.936 0-6.498 1.347-11.49 4.041-14.976 2.774-3.567 6.3-5.35 10.58-5.35 4.2 0 7.608 1.426 10.223 4.28 2.694 2.773 4.043 6.418 4.043 10.935 0 3.407-.674 6.063-2.022 7.965-1.267 1.902-3.645 3.486-7.132 4.754-3.487 1.347-5.23 2.893-5.23 4.636 0 2.536 1.188 5.35 3.566 8.44 2.377 3.011 5.944 5.509 10.699 7.49 4.834 1.902 10.342 2.852 16.523 2.852 12.125 0 21.358-3.765 27.697-11.293 6.42-7.529 9.63-19.772 9.63-36.73 0-15.454-3.37-26.747-10.106-33.88-6.736-7.132-15.334-10.697-25.795-10.697-4.755 0-9.509.87-14.264 2.613-4.754 1.744-9.51 4.359-14.265 7.846-.555 5.547-1.544 9.274-2.971 11.176-1.426 1.822-3.25 2.732-5.469 2.732-1.585 0-2.853-.554-3.804-1.664-.951-1.11-1.426-2.654-1.426-4.635 0-3.487 1.624-6.934 4.873-10.342.95-1.03 1.625-1.941 2.021-2.734l2.735-34.95c1.11-13.788 1.704-27.18 1.783-40.177zm135.9 177.113h40.117l-13.632 32.653c15.75-13.536 41.551-5.701 40.775 18.586-.933 29.23-47.271 63.068-47.271 63.068s-48.012-35.059-47.133-63.068c.751-23.953 25.222-32.486 40.758-18.606l-13.614-32.633z"}}]})(props);
};
module.exports.GiCard6Clubs = function GiCard6Clubs (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119.436 36c-16.126 0-29.2 17.237-29.2 38.5v363c0 21.263 13.074 38.5 29.2 38.5h275.298c16.126 0 29.198-17.237 29.198-38.5v-363c0-21.263-13.072-38.5-29.198-38.5H119.436zm26.832 8.408v.002h.015c13.587.01 24.442 10.853 24.442 24.442 0 5.71-2.003 10.997-5.266 15.173 1.12-.158 2.232-.31 3.396-.31 13.595 0 24.458 11.157 24.458 24.752 0 13.594-10.863 24.752-24.458 24.752-5.76 0-11.08-2.048-15.294-5.422l12.609 30.193h-40.117l12.42-29.744c-4.12 3.115-9.233 4.973-14.776 4.973-13.594 0-24.752-11.16-24.752-24.754 0-13.595 11.158-24.752 24.752-24.752 1.059 0 2.058.184 3.082.312-3.215-4.16-5.248-9.509-5.248-15.173 0-13.589 11.15-24.434 24.737-24.444zm112.466 132.127c11.57 0 21.397 3.17 29.48 9.51 6.737 5.151 10.104 11.331 10.104 18.543 0 4.834-1.506 8.796-4.517 11.887-2.932 3.09-6.537 4.636-10.817 4.636-3.962 0-7.37-1.308-10.222-3.923-2.774-2.616-4.16-5.706-4.16-9.272 0-2.377.95-5.07 2.851-8.082 1.744-2.774 2.615-4.954 2.615-6.54 0-2.218-1.069-4.041-3.209-5.468-2.853-1.823-6.775-2.732-11.767-2.732-7.687 0-14.701 2.416-21.041 7.25s-11.728 13.155-16.166 24.963c-4.359 11.728-6.54 24.925-6.54 39.586 0 2.14.12 5.347.358 9.627 6.181-8.242 12.679-14.145 19.494-17.711 6.816-3.567 14.304-5.35 22.467-5.35 13.155 0 24.171 4.479 33.047 13.434 8.955 8.875 13.432 20.127 13.432 33.757 0 16.405-5.27 30.036-15.809 40.893-10.54 10.857-23.577 16.285-39.11 16.285-10.936 0-20.683-2.893-29.242-8.678-8.558-5.864-15.573-14.977-21.04-27.34-5.39-12.362-8.083-26.785-8.083-43.269 0-17.83 3.328-33.998 9.985-48.5 6.657-14.502 15.135-25.359 25.437-32.57 10.382-7.291 21.2-10.936 32.453-10.936zm-7.607 78.574c-9.906 0-18.03 3.605-24.37 10.817-6.26 7.132-9.39 17.196-9.39 30.193 0 14.106 3.05 24.885 9.153 32.334 6.102 7.45 13.868 11.174 23.298 11.174 9.352 0 16.88-3.527 22.586-10.58 5.706-7.053 8.559-17.592 8.559-31.62 0-14.898-2.655-25.676-7.965-32.333-5.23-6.657-12.52-9.985-21.871-9.985zm94.668 98.903h40.117l-12.611 30.193c4.215-3.374 9.535-5.422 15.295-5.422 13.594 0 24.459 11.158 24.459 24.752 0 13.595-10.865 24.752-24.46 24.752-1.163 0-2.275-.152-3.396-.31 3.263 4.176 5.266 9.462 5.266 15.173 0 13.589-10.853 24.433-24.44 24.442h-.017c-13.588-.01-24.735-10.853-24.735-24.442 0-5.665 2.033-11.013 5.248-15.173-1.023.128-2.025.312-3.084.312-13.594 0-24.751-11.159-24.751-24.754 0-13.594 11.157-24.752 24.752-24.752 5.542 0 10.655 1.858 14.775 4.973l-12.418-29.744z"}}]})(props);
};
module.exports.GiCard6Diamonds = function GiCard6Diamonds (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119.436 36c-16.126 0-29.2 17.237-29.2 38.5v363c0 21.263 13.074 38.5 29.2 38.5h275.298c16.126 0 29.198-17.237 29.198-38.5v-363c0-21.263-13.072-38.5-29.198-38.5H119.436zm26.882 3.717h.002l47.393 58.271-47.393 58.287-47.375-58.289 47.373-58.27zm113.498 136.818c11.57 0 21.398 3.17 29.48 9.51 6.737 5.151 10.106 11.333 10.106 18.545 0 4.834-1.506 8.796-4.517 11.887-2.932 3.09-6.54 4.636-10.819 4.636-3.962 0-7.37-1.308-10.222-3.924-2.774-2.615-4.16-5.705-4.16-9.271 0-2.377.951-5.073 2.853-8.084 1.744-2.774 2.615-4.952 2.615-6.537 0-2.22-1.07-4.042-3.21-5.469-2.853-1.823-6.776-2.734-11.768-2.734-7.687 0-14.701 2.418-21.041 7.252s-11.728 13.155-16.166 24.963c-4.359 11.728-6.537 24.923-6.537 39.584 0 2.14.117 5.35.355 9.628 6.182-8.241 12.68-14.144 19.496-17.71 6.816-3.567 14.305-5.35 22.467-5.35 13.155 0 24.17 4.477 33.045 13.432 8.955 8.875 13.434 20.129 13.434 33.76 0 16.404-5.271 30.035-15.811 40.892-10.54 10.857-23.577 16.285-39.11 16.285-10.936 0-20.683-2.893-29.242-8.678-8.558-5.864-15.57-14.977-21.039-27.34-5.389-12.362-8.084-26.785-8.084-43.269 0-17.83 3.328-33.998 9.985-48.5 6.657-14.502 15.137-25.359 25.44-32.57 10.38-7.291 21.197-10.938 32.45-10.938zm-7.607 78.574c-9.906 0-18.03 3.607-24.37 10.819-6.26 7.132-9.39 17.196-9.39 30.193 0 14.106 3.052 24.883 9.155 32.332 6.102 7.45 13.868 11.174 23.298 11.174 9.352 0 16.88-3.525 22.586-10.578 5.706-7.053 8.559-17.594 8.559-31.621 0-14.899-2.655-25.675-7.965-32.332-5.23-6.657-12.522-9.987-21.873-9.987zm113.451 97.414h.002l47.393 58.272-47.393 58.287-47.377-58.289 47.375-58.27z"}}]})(props);
};
module.exports.GiCard6Hearts = function GiCard6Hearts (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119.436 36c-16.126 0-29.2 17.237-29.2 38.5v363c0 21.263 13.074 38.5 29.2 38.5h275.298c16.126 0 29.198-17.237 29.198-38.5v-363c0-21.263-13.072-38.5-29.198-38.5H119.436zm57.216 16.174c13.613-.319 26.504 9.854 27.075 28.043.976 31.09-47.74 52.945-52.313 70.015-4.997-18.649-51.413-37.573-52.45-70.015-.994-31.155 37.404-37.907 52.452-11.846 6.262-10.846 15.923-15.978 25.236-16.195v-.002zm83.166 124.361c11.57 0 21.398 3.17 29.48 9.51 6.737 5.151 10.104 11.333 10.104 18.545 0 4.834-1.504 8.796-4.515 11.887-2.932 3.09-6.54 4.636-10.819 4.636-3.962 0-7.37-1.308-10.222-3.924-2.774-2.615-4.16-5.705-4.16-9.271 0-2.377.95-5.073 2.851-8.084 1.744-2.774 2.615-4.952 2.615-6.537 0-2.22-1.069-4.042-3.209-5.469-2.853-1.823-6.775-2.734-11.767-2.734-7.687 0-14.701 2.418-21.041 7.252s-11.728 13.155-16.166 24.963c-4.359 11.728-6.54 24.923-6.54 39.584 0 2.14.12 5.35.358 9.628 6.181-8.241 12.679-14.146 19.494-17.712 6.816-3.567 14.305-5.348 22.467-5.348 13.155 0 24.171 4.477 33.047 13.432 8.955 8.875 13.434 20.129 13.434 33.76 0 16.404-5.271 30.035-15.811 40.892-10.54 10.857-23.577 16.285-39.11 16.285-10.936 0-20.683-2.893-29.242-8.678-8.558-5.864-15.573-14.977-21.04-27.34-5.39-12.362-8.083-26.785-8.083-43.269 0-17.83 3.328-33.998 9.985-48.5 6.657-14.502 15.137-25.36 25.44-32.572 10.38-7.291 21.197-10.936 32.45-10.936zm-7.607 78.574c-9.906 0-18.03 3.607-24.37 10.819-6.26 7.132-9.39 17.196-9.39 30.193 0 14.106 3.05 24.883 9.153 32.332 6.102 7.45 13.87 11.174 23.3 11.174 9.351 0 16.878-3.525 22.584-10.578 5.706-7.053 8.559-17.594 8.559-31.621 0-14.899-2.653-25.675-7.963-32.332-5.23-6.657-12.522-9.987-21.873-9.987zm108.518 106.66c4.572 17.071 53.289 38.924 52.312 70.014-.57 18.189-13.462 28.364-27.074 28.045v-.002c-9.314-.217-18.975-5.349-25.237-16.195-15.048 26.061-53.445 19.308-52.45-11.848 1.036-32.442 47.451-51.364 52.449-70.013z"}}]})(props);
};
module.exports.GiCard6Spades = function GiCard6Spades (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119.436 36c-16.126 0-29.2 17.237-29.2 38.5v363c0 21.263 13.074 38.5 29.2 38.5h275.298c16.126 0 29.198-17.237 29.198-38.5v-363c0-21.263-13.072-38.5-29.198-38.5H119.436zm26.652 8.047s46.338 33.838 47.271 63.068c.776 24.287-25.024 32.122-40.775 18.586l13.633 32.653H126.1l13.613-32.635c-15.535 13.88-40.004 5.349-40.756-18.604-.88-28.01 47.13-63.068 47.13-63.068zm112.644 132.488c11.57 0 21.398 3.17 29.48 9.51 6.737 5.151 10.106 11.333 10.106 18.545 0 4.834-1.506 8.796-4.517 11.887-2.932 3.09-6.54 4.634-10.819 4.634-3.962 0-7.37-1.306-10.222-3.922-2.774-2.615-4.16-5.705-4.16-9.271 0-2.377.951-5.073 2.853-8.084 1.744-2.774 2.615-4.952 2.615-6.537 0-2.22-1.071-4.042-3.21-5.469-2.854-1.823-6.775-2.734-11.768-2.734-7.687 0-14.701 2.418-21.041 7.252s-11.728 13.155-16.166 24.963c-4.359 11.728-6.537 24.923-6.537 39.584 0 2.14.117 5.35.355 9.628 6.181-8.241 12.681-14.146 19.496-17.712 6.816-3.567 14.304-5.348 22.467-5.348 13.155 0 24.17 4.477 33.045 13.432 8.955 8.875 13.434 20.129 13.434 33.76 0 16.404-5.271 30.035-15.811 40.892-10.54 10.857-23.577 16.285-39.11 16.285-10.936 0-20.683-2.893-29.242-8.678-8.558-5.864-15.57-14.977-21.039-27.34-5.389-12.362-8.084-26.785-8.084-43.269 0-17.83 3.328-33.998 9.985-48.5 6.657-14.502 15.137-25.36 25.44-32.572 10.38-7.291 21.197-10.936 32.45-10.936zm-7.607 78.574c-9.906 0-18.03 3.607-24.37 10.819-6.26 7.132-9.39 17.196-9.39 30.193 0 14.106 3.052 24.883 9.155 32.332 6.102 7.45 13.868 11.174 23.298 11.174 9.352 0 16.88-3.525 22.586-10.578 5.706-7.053 8.559-17.594 8.559-31.621 0-14.899-2.655-25.675-7.965-32.332-5.23-6.657-12.522-9.987-21.873-9.987zm94.652 98.54h40.118L372.262 386.3c15.75-13.536 41.551-5.701 40.775 18.586-.933 29.23-47.271 63.068-47.271 63.068s-48.012-35.059-47.133-63.068c.751-23.953 25.222-32.485 40.758-18.604l-13.614-32.635z"}}]})(props);
};
module.exports.GiCard7Clubs = function GiCard7Clubs (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119.434 36c-16.126 0-29.198 17.237-29.198 38.5v363c0 21.263 13.072 38.5 29.198 38.5h275.3c16.126 0 29.198-17.237 29.198-38.5v-363c0-21.263-13.072-38.5-29.198-38.5h-275.3zm26.832 8.408v.002h.017c13.587.01 24.442 10.853 24.442 24.442 0 5.71-2.005 10.997-5.268 15.173 1.12-.158 2.233-.31 3.397-.31 13.594 0 24.457 11.157 24.457 24.752 0 13.594-10.863 24.752-24.457 24.752-5.76 0-11.08-2.048-15.295-5.422l12.609 30.193h-40.117l12.42-29.744c-4.12 3.115-9.233 4.973-14.776 4.973-13.594 0-24.75-11.16-24.75-24.754 0-13.595 11.156-24.752 24.75-24.752 1.059 0 2.06.184 3.084.312-3.215-4.16-5.25-9.509-5.25-15.173 0-13.589 11.15-24.434 24.737-24.444zm57.668 132.246c7.766 1.982 16.166 2.973 25.2 2.973h73.938v5.467c-10.857 19.099-18.98 35.265-24.369 48.5-5.389 13.155-9.47 25.755-12.244 37.8-2.774 12.046-4.595 26.074-5.467 42.083-.792 13.234-1.546 21.435-2.26 24.605-.713 3.09-2.179 5.469-4.398 7.133-2.14 1.743-4.953 2.615-8.44 2.615-3.962 0-7.052-1.346-9.27-4.04-2.22-2.695-3.33-6.936-3.33-12.722 0-5.15.913-11.568 2.735-19.255 1.823-7.767 5.982-19.337 12.48-34.711 8.639-20.605 16.128-36.812 22.468-48.62l16.404-30.193h-64.428c-4.755 0-8.322 1.664-10.7 4.992-2.297 3.329-5.07 13.275-8.32 29.838h-8.558l8.559-56.465zm141.86 177.36h40.118l-12.611 30.191c4.215-3.374 9.533-5.42 15.293-5.42 13.594 0 24.459 11.158 24.459 24.752 0 13.595-10.865 24.752-24.46 24.752-1.163 0-2.273-.154-3.394-.312 3.263 4.176 5.266 9.464 5.266 15.175 0 13.589-10.855 24.43-24.442 24.44h-.017c-13.587-.011-24.733-10.852-24.733-24.44 0-5.665 2.031-11.015 5.247-15.175-1.024.128-2.024.312-3.082.312-13.595 0-24.752-11.157-24.752-24.752 0-13.594 11.157-24.752 24.752-24.752 5.542 0 10.653 1.856 14.773 4.97l-12.416-29.741z"}}]})(props);
};
module.exports.GiCard7Diamonds = function GiCard7Diamonds (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119.436 36c-16.126 0-29.2 17.237-29.2 38.5v363c0 21.263 13.074 38.5 29.2 38.5h275.298c16.126 0 29.198-17.237 29.198-38.5v-363c0-21.263-13.072-38.5-29.198-38.5H119.436zm26.884 3.717h.002l47.393 58.271-47.393 58.287-47.377-58.289 47.375-58.27zm58.7 136.937c7.766 1.982 16.164 2.971 25.199 2.971h73.94v5.469c-10.858 19.099-18.981 35.265-24.37 48.5-5.389 13.155-9.47 25.755-12.244 37.8-2.774 12.046-4.595 26.074-5.467 42.083-.792 13.234-1.546 21.435-2.26 24.605-.713 3.09-2.18 5.469-4.398 7.133-2.14 1.743-4.953 2.615-8.44 2.615-3.962 0-7.052-1.346-9.271-4.04-2.219-2.695-3.328-6.937-3.328-12.722 0-5.15.91-11.568 2.732-19.255 1.823-7.767 5.984-19.337 12.483-34.711 8.638-20.605 16.127-36.812 22.466-48.62l16.405-30.193h-64.428c-4.755 0-8.322 1.664-10.7 4.992-2.297 3.329-5.07 13.275-8.32 29.838h-8.558l8.559-56.465zm160.642 175.87h.002l47.39 58.27-47.39 58.288-47.377-58.287 47.375-58.272z"}}]})(props);
};
module.exports.GiCard7Hearts = function GiCard7Hearts (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119.436 36c-16.126 0-29.2 17.237-29.2 38.5v363c0 21.263 13.074 38.5 29.2 38.5h275.298c16.126 0 29.196-17.237 29.196-38.5v-363c0-21.263-13.07-38.5-29.196-38.5H119.436zm57.214 16.174c13.613-.319 26.504 9.854 27.075 28.043.976 31.09-47.74 52.945-52.313 70.015-4.997-18.649-51.413-37.573-52.45-70.015-.994-31.155 37.404-37.907 52.452-11.846 6.262-10.846 15.923-15.978 25.236-16.195v-.002zm28.368 124.48c7.766 1.982 16.166 2.973 25.2 2.973h73.938v5.467c-10.857 19.099-18.98 35.265-24.369 48.5-5.389 13.155-9.47 25.755-12.244 37.8-2.774 12.046-4.595 26.074-5.467 42.083-.792 13.234-1.546 21.435-2.26 24.605-.713 3.09-2.18 5.469-4.398 7.133-2.14 1.743-4.953 2.615-8.44 2.615-3.962 0-7.052-1.346-9.271-4.04-2.219-2.695-3.328-6.936-3.328-12.722 0-5.15.912-11.568 2.734-19.255 1.823-7.767 5.982-19.337 12.48-34.711 8.639-20.605 16.128-36.812 22.468-48.62l16.404-30.193h-64.428c-4.755 0-8.322 1.664-10.7 4.992-2.297 3.329-5.07 13.275-8.32 29.838h-8.558l8.559-56.465zm155.71 185.116c4.573 17.07 53.288 38.925 52.311 70.015-.57 18.188-13.46 28.36-27.072 28.043h-.002c-9.313-.218-18.975-5.35-25.236-16.195-15.048 26.06-53.446 19.307-52.452-11.848 1.037-32.442 47.454-51.366 52.452-70.015z"}}]})(props);
};
module.exports.GiCard7Spades = function GiCard7Spades (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119.436 36c-16.126 0-29.2 17.237-29.2 38.5v363.002c0 21.263 13.074 38.5 29.2 38.5h275.298c16.126 0 29.198-17.237 29.198-38.5V74.5c0-21.263-13.072-38.5-29.198-38.5H119.436zm26.652 8.047s46.338 33.838 47.271 63.068c.776 24.287-25.024 32.122-40.775 18.586l13.633 32.653H126.1l13.615-32.635c-15.535 13.88-40.006 5.349-40.758-18.604-.88-28.01 47.13-63.068 47.13-63.068zm57.846 132.607c7.766 1.982 16.166 2.973 25.2 2.973h73.938v5.467c-10.857 19.099-18.98 35.265-24.369 48.5-5.389 13.155-9.468 25.757-12.242 37.802-2.774 12.046-4.597 26.072-5.469 42.08-.792 13.235-1.546 21.438-2.26 24.608-.713 3.09-2.177 5.467-4.396 7.13-2.14 1.744-4.955 2.616-8.441 2.616-3.963 0-7.053-1.346-9.272-4.04-2.219-2.695-3.328-6.935-3.328-12.72 0-5.15.912-11.57 2.734-19.257 1.823-7.767 5.982-19.337 12.48-34.711 8.639-20.605 16.128-36.812 22.468-48.62l16.404-30.193h-64.428c-4.755 0-8.322 1.664-10.7 4.992-2.297 3.329-5.07 13.275-8.32 29.838h-8.558l8.559-56.465zM345.777 353.65h40.118l-13.633 32.653c15.75-13.536 41.551-5.701 40.775 18.586-.933 29.23-47.271 63.068-47.271 63.068v-.002s-48.01-35.057-47.131-63.066c.751-23.953 25.22-32.487 40.756-18.606l-13.614-32.633z"}}]})(props);
};
module.exports.GiCard8Clubs = function GiCard8Clubs (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119.436 36c-16.126 0-29.2 17.237-29.2 38.5v363c0 21.263 13.074 38.5 29.2 38.5h275.298c16.126 0 29.198-17.237 29.198-38.5v-363c0-21.263-13.072-38.5-29.198-38.5H119.436zm26.832 8.408v.002h.015c13.587.01 24.442 10.853 24.442 24.442 0 5.71-2.003 10.997-5.266 15.173 1.12-.158 2.232-.31 3.396-.31 13.595 0 24.458 11.157 24.458 24.752 0 13.594-10.863 24.752-24.458 24.752-5.76 0-11.08-2.048-15.294-5.422l12.609 30.193h-40.117l12.42-29.744c-4.12 3.115-9.233 4.973-14.776 4.973-13.594 0-24.752-11.16-24.752-24.754 0-13.595 11.158-24.752 24.752-24.752 1.059 0 2.058.184 3.082.312-3.215-4.16-5.248-9.509-5.248-15.173 0-13.589 11.15-24.434 24.737-24.444zM248.63 176.533c9.906 0 18.504 1.704 25.795 5.112 7.37 3.407 12.958 8.043 16.762 13.908 3.883 5.864 5.824 12.006 5.824 18.426 0 14.898-9.392 27.3-28.174 37.207 12.68 4.596 21.834 10.619 27.46 18.068 5.627 7.37 8.44 16.285 8.44 26.746 0 12.759-4.081 23.895-12.244 33.404-10.54 12.284-25.558 18.424-45.053 18.424-17.196 0-30.788-4.12-40.773-12.361-9.985-8.321-14.977-18.663-14.977-31.026 0-9.272 2.853-17.355 8.559-24.25 5.785-6.973 15.73-12.878 29.836-17.712-20.842-8.955-31.264-22.784-31.264-41.487 0-12.125 4.676-22.546 14.028-31.263 9.43-8.797 21.358-13.196 35.78-13.196zm-.832 8.203c-10.382 0-18.465 2.536-24.25 7.608-5.785 4.992-8.678 11.53-8.678 19.613 0 8.004 2.496 14.384 7.488 19.139 5.072 4.755 17.515 10.422 37.327 17 8.32-4.755 13.908-9.431 16.761-14.028 2.853-4.675 4.28-10.778 4.28-18.306 0-9.906-2.815-17.553-8.442-22.942-5.626-5.389-13.788-8.084-24.486-8.084zm-8.797 81.07c-11.253 4.756-19.06 10.106-23.418 16.05-4.359 5.943-6.537 13.233-6.537 21.87 0 11.254 3.288 20.011 9.865 26.272 6.657 6.181 16.207 9.272 28.649 9.272 13.155 0 23.379-3.09 30.67-9.272 7.29-6.26 10.935-14.502 10.935-24.725 0-9.272-3.17-16.286-9.51-21.04-6.26-4.755-19.812-10.898-40.654-18.426zm106.793 88.206h40.117l-12.611 30.193c4.215-3.374 9.535-5.422 15.295-5.422 13.594 0 24.459 11.158 24.459 24.752 0 13.595-10.865 24.752-24.46 24.752-1.163 0-2.275-.152-3.396-.31 3.263 4.176 5.266 9.463 5.266 15.173 0 13.589-10.853 24.433-24.44 24.442h-.017c-13.588-.01-24.735-10.853-24.735-24.442 0-5.664 2.033-11.013 5.248-15.173-1.023.128-2.025.312-3.084.312-13.594 0-24.751-11.159-24.751-24.754 0-13.594 11.157-24.752 24.752-24.752 5.542 0 10.655 1.858 14.775 4.973l-12.418-29.744z"}}]})(props);
};
module.exports.GiCard8Diamonds = function GiCard8Diamonds (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119.436 36c-16.126 0-29.2 17.237-29.2 38.5v363c0 21.263 13.074 38.5 29.2 38.5h275.298c16.126 0 29.198-17.237 29.198-38.5v-363c0-21.263-13.072-38.5-29.198-38.5H119.436zm26.884 3.717l47.393 58.27-47.393 58.286-47.375-58.287 47.375-58.27zm103.395 136.816c9.906 0 18.504 1.706 25.795 5.113 7.37 3.408 12.956 8.044 16.76 13.909 3.883 5.864 5.826 12.004 5.826 18.424 0 14.898-9.392 27.3-28.174 37.207 12.68 4.596 21.832 10.619 27.459 18.068 5.626 7.37 8.441 16.285 8.441 26.746 0 12.759-4.081 23.894-12.244 33.404-10.54 12.284-25.558 18.424-45.053 18.424-17.196 0-30.788-4.12-40.773-12.361-9.985-8.321-14.979-18.663-14.979-31.026 0-9.272 2.853-17.355 8.559-24.25 5.785-6.973 15.732-12.878 29.838-17.712-20.842-8.955-31.264-22.784-31.264-41.487 0-12.125 4.676-22.546 14.028-31.263 9.43-8.797 21.358-13.196 35.78-13.196zm-.834 8.203c-10.382 0-18.463 2.536-24.248 7.608-5.785 4.992-8.678 11.532-8.678 19.615 0 8.004 2.496 14.382 7.488 19.137 5.072 4.755 17.515 10.422 37.327 17 8.32-4.755 13.906-9.431 16.76-14.028 2.852-4.675 4.279-10.778 4.279-18.306 0-9.906-2.813-17.553-8.44-22.942-5.626-5.389-13.79-8.084-24.488-8.084zm-8.795 81.07c-11.253 4.756-19.06 10.106-23.418 16.05-4.359 5.943-6.54 13.233-6.54 21.87 0 11.254 3.29 20.011 9.868 26.272 6.657 6.181 16.207 9.272 28.649 9.272 13.155 0 23.377-3.09 30.667-9.272 7.291-6.26 10.938-14.502 10.938-24.725 0-9.272-3.17-16.286-9.51-21.04-6.26-4.755-19.812-10.898-40.654-18.426zm125.576 86.717l47.393 58.27-47.393 58.287-47.375-58.287 47.375-58.27z"}}]})(props);
};
module.exports.GiCard8Hearts = function GiCard8Hearts (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119.436 36c-16.126 0-29.2 17.237-29.2 38.5v363c0 21.263 13.074 38.5 29.2 38.5h275.298c16.126 0 29.198-17.237 29.198-38.5v-363c0-21.263-13.072-38.5-29.198-38.5H119.436zm57.216 16.174c13.613-.319 26.504 9.854 27.075 28.043.976 31.09-47.74 52.945-52.313 70.015-4.997-18.649-51.413-37.573-52.45-70.015-.994-31.156 37.404-37.91 52.452-11.848 6.262-10.846 15.923-15.978 25.236-16.195zm73.063 124.361c9.906 0 18.504 1.704 25.795 5.111 7.37 3.408 12.958 8.044 16.761 13.909 3.884 5.864 5.825 12.004 5.825 18.424 0 14.898-9.392 27.3-28.174 37.207 12.68 4.596 21.834 10.619 27.46 18.068 5.628 7.37 8.44 16.287 8.44 26.748 0 12.759-4.081 23.893-12.244 33.402-10.54 12.284-25.558 18.426-45.053 18.426-17.196 0-30.788-4.121-40.773-12.363-9.985-8.321-14.977-18.663-14.977-31.026 0-9.272 2.853-17.355 8.559-24.25 5.785-6.973 15.73-12.878 29.836-17.712-20.842-8.955-31.264-22.784-31.264-41.487 0-12.125 4.676-22.546 14.028-31.263 9.43-8.797 21.358-13.194 35.78-13.194zm-.832 8.201c-10.382 0-18.465 2.536-24.25 7.608-5.785 4.992-8.678 11.532-8.678 19.615 0 8.004 2.496 14.384 7.488 19.139 5.072 4.755 17.515 10.42 37.327 16.998 8.32-4.755 13.908-9.431 16.761-14.028 2.853-4.675 4.28-10.778 4.28-18.306 0-9.906-2.815-17.553-8.442-22.942-5.626-5.389-13.788-8.084-24.486-8.084zm-8.797 81.07c-11.253 4.756-19.06 10.106-23.418 16.05-4.359 5.943-6.537 13.234-6.537 21.873 0 11.253 3.287 20.008 9.865 26.269 6.657 6.181 16.207 9.272 28.649 9.272 13.155 0 23.379-3.09 30.67-9.272 7.29-6.26 10.935-14.502 10.935-24.725 0-9.272-3.17-16.286-9.51-21.04-6.26-4.755-19.812-10.898-40.654-18.426zm120.643 95.964c4.572 17.07 53.289 38.923 52.312 70.013-.57 18.189-13.462 28.364-27.074 28.045v-.002c-9.314-.217-18.975-5.349-25.237-16.195-15.048 26.061-53.445 19.307-52.45-11.848 1.036-32.442 47.451-51.364 52.449-70.013z"}}]})(props);
};
module.exports.GiCard8Spades = function GiCard8Spades (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119.436 36c-16.126 0-29.2 17.237-29.2 38.5v363c0 21.263 13.074 38.5 29.2 38.5h275.298c16.126 0 29.198-17.237 29.198-38.5v-363c0-21.263-13.072-38.5-29.198-38.5H119.436zm26.652 8.047s46.338 33.838 47.271 63.068c.776 24.287-25.024 32.122-40.775 18.586l13.633 32.653h-40.115l13.613-32.635c-15.535 13.88-40.006 5.349-40.758-18.604-.88-28.01 47.13-63.068 47.13-63.068zm102.54 132.488c9.907 0 18.507 1.704 25.798 5.111 7.37 3.408 12.956 8.044 16.76 13.909 3.883 5.864 5.826 12.006 5.826 18.425 0 14.9-9.392 27.302-28.174 37.208 12.68 4.596 21.832 10.618 27.459 18.068 5.626 7.37 8.441 16.285 8.441 26.746 0 12.759-4.081 23.893-12.244 33.402-10.54 12.284-25.558 18.426-45.053 18.426-17.196 0-30.788-4.121-40.773-12.363-9.985-8.321-14.979-18.663-14.979-31.026 0-9.272 2.853-17.355 8.56-24.25 5.784-6.973 15.73-12.876 29.837-17.71-20.842-8.956-31.264-22.784-31.264-41.487 0-12.125 4.676-22.546 14.028-31.264 9.43-8.796 21.356-13.195 35.779-13.195zm-.831 8.203c-10.382 0-18.463 2.536-24.248 7.608-5.785 4.992-8.678 11.53-8.678 19.613 0 8.004 2.496 14.384 7.488 19.139 5.072 4.755 17.515 10.42 37.327 16.998 8.32-4.755 13.906-9.43 16.76-14.026 2.852-4.675 4.279-10.778 4.279-18.306 0-9.906-2.813-17.555-8.44-22.944-5.626-5.389-13.79-8.082-24.488-8.082zm-8.795 81.07c-11.253 4.755-19.06 10.104-23.418 16.047-4.359 5.944-6.54 13.235-6.54 21.874 0 11.253 3.29 20.01 9.868 26.271 6.657 6.181 16.207 9.271 28.649 9.271 13.155 0 23.377-3.09 30.668-9.271 7.29-6.26 10.937-14.504 10.937-24.727 0-9.272-3.17-16.284-9.51-21.039-6.26-4.754-19.812-10.897-40.654-18.425zm106.777 87.84h40.116l-13.633 32.653c15.75-13.536 41.551-5.701 40.775 18.586-.933 29.23-47.271 63.068-47.271 63.068s-48.01-35.057-47.131-63.066c.751-23.953 25.222-32.487 40.758-18.606l-13.614-32.635z"}}]})(props);
};
module.exports.GiCard9Clubs = function GiCard9Clubs (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119.436 36c-16.126 0-29.2 17.237-29.2 38.5v363c0 21.263 13.074 38.5 29.2 38.5h275.298c16.126 0 29.198-17.237 29.198-38.5v-363c0-21.263-13.072-38.5-29.198-38.5H119.436zm26.832 8.408v.002h.015c13.587.01 24.442 10.853 24.442 24.442 0 5.71-2.003 10.997-5.266 15.173 1.12-.158 2.232-.31 3.396-.31 13.595 0 24.458 11.157 24.458 24.752 0 13.594-10.863 24.752-24.458 24.752-5.76 0-11.08-2.048-15.294-5.422l12.609 30.193h-40.117l12.42-29.744c-4.12 3.115-9.233 4.973-14.776 4.973-13.594 0-24.752-11.16-24.752-24.754 0-13.595 11.158-24.752 24.752-24.752 1.059 0 2.058.184 3.082.312-3.215-4.16-5.248-9.509-5.248-15.173 0-13.589 11.15-24.434 24.737-24.444zm99.271 132.127c16.404 0 30.076 6.815 41.012 20.445 10.936 13.631 16.404 32.77 16.404 57.416 0 20.446-3.052 37.722-9.154 51.829-6.023 14.026-14.027 24.488-24.012 31.382-9.985 6.816-21.238 10.223-33.76 10.223-12.125 0-21.634-2.655-28.529-7.965-6.815-5.389-10.223-11.808-10.223-19.258 0-4.913 1.387-8.875 4.16-11.886 2.853-3.012 6.42-4.518 10.7-4.518 3.883 0 7.17 1.309 9.865 3.924 2.694 2.615 4.043 5.745 4.043 9.39 0 2.616-1.229 5.508-3.686 8.678-1.505 1.982-2.26 3.685-2.26 5.112 0 2.219 1.31 4.16 3.924 5.824 2.616 1.585 6.815 2.377 12.6 2.377 8.242 0 15.493-2.258 21.754-6.776 6.26-4.596 11.334-12.085 15.217-22.466 3.883-10.461 5.824-23.973 5.824-40.536l-.238-10.58c-5.151 7.767-11.174 13.632-18.069 17.594-6.894 3.883-14.62 5.824-23.18 5.824-11.887 0-22.705-4.16-32.452-12.48-9.669-8.321-14.502-20.566-14.502-36.733 0-15.77 5.35-29.162 16.048-40.177 10.778-11.095 23.615-16.643 38.514-16.643zm.357 8.559c-8.875 0-16.167 3.724-21.873 11.174-5.705 7.37-8.558 18.503-8.558 33.402 0 13.63 2.853 23.815 8.558 30.55 5.706 6.657 13.155 9.985 22.348 9.985 9.114 0 16.76-3.605 22.941-10.816 6.261-7.212 9.393-17.316 9.393-30.313 0-13.472-3.25-24.17-9.748-32.096-6.419-7.924-14.105-11.886-23.06-11.886zm99.899 168.918h40.117l-12.611 30.193c4.215-3.374 9.535-5.422 15.295-5.422 13.594 0 24.459 11.158 24.459 24.752 0 13.595-10.865 24.752-24.46 24.752-1.163 0-2.275-.152-3.396-.31 3.263 4.176 5.266 9.462 5.266 15.173 0 13.589-10.853 24.433-24.44 24.442h-.017c-13.588-.01-24.735-10.853-24.735-24.442 0-5.665 2.033-11.013 5.248-15.173-1.023.128-2.025.312-3.084.312-13.594 0-24.751-11.159-24.751-24.754 0-13.594 11.157-24.752 24.752-24.752 5.542 0 10.655 1.858 14.775 4.973l-12.418-29.744z"}}]})(props);
};
module.exports.GiCard9Diamonds = function GiCard9Diamonds (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119.436 36c-16.126 0-29.2 17.237-29.2 38.5v363c0 21.263 13.074 38.5 29.2 38.5h275.298c16.126 0 29.198-17.237 29.198-38.5v-363c0-21.263-13.072-38.5-29.198-38.5H119.436zm26.882 3.717h.002l47.393 58.27-47.393 58.286-47.375-58.287 47.373-58.27zm100.305 136.816c16.404 0 30.074 6.817 41.01 20.447 10.936 13.631 16.404 32.768 16.404 57.415 0 20.445-3.05 37.721-9.152 51.828-6.023 14.027-14.027 24.488-24.012 31.382-9.985 6.816-21.239 10.223-33.76 10.223-12.125 0-21.634-2.653-28.529-7.963-6.815-5.389-10.225-11.808-10.225-19.258 0-4.913 1.389-8.875 4.162-11.886 2.853-3.012 6.418-4.518 10.698-4.518 3.883 0 7.173 1.307 9.867 3.922 2.694 2.615 4.04 5.745 4.04 9.39 0 2.616-1.228 5.508-3.685 8.678-1.505 1.982-2.257 3.685-2.257 5.112 0 2.219 1.306 4.162 3.921 5.826 2.616 1.585 6.817 2.377 12.602 2.377 8.242 0 15.493-2.258 21.754-6.776 6.26-4.596 11.332-12.085 15.215-22.466 3.883-10.461 5.824-23.973 5.824-40.536l-.236-10.58c-5.152 7.767-11.174 13.632-18.069 17.594-6.894 3.883-14.623 5.824-23.181 5.824-11.888 0-22.704-4.161-32.452-12.482-9.668-8.321-14.501-20.564-14.501-36.73 0-15.77 5.348-29.165 16.046-40.18 10.778-11.095 23.617-16.643 38.516-16.643zm.356 8.56c-8.876 0-16.168 3.725-21.874 11.175-5.705 7.37-8.558 18.503-8.558 33.402 0 13.63 2.853 23.815 8.558 30.55 5.706 6.657 13.157 9.985 22.35 9.985 9.114 0 16.76-3.605 22.941-10.816 6.261-7.212 9.391-17.316 9.391-30.313 0-13.472-3.248-24.17-9.746-32.096-6.42-7.924-14.107-11.886-23.062-11.886zm118.681 167.43h.002l47.393 58.27-47.393 58.287-47.377-58.287 47.375-58.27z"}}]})(props);
};
module.exports.GiCard9Hearts = function GiCard9Hearts (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119.436 36c-16.126 0-29.2 17.237-29.2 38.5v363.002c0 21.263 13.074 38.498 29.2 38.498h275.298c16.126 0 29.198-17.235 29.198-38.498V74.5c0-21.263-13.072-38.5-29.198-38.5H119.436zm57.214 16.174c13.613-.319 26.504 9.856 27.075 28.045.976 31.09-47.738 52.943-52.31 70.013-4.998-18.649-51.416-37.571-52.452-70.013-.995-31.156 37.403-37.91 52.451-11.848 6.262-10.846 15.925-15.978 25.238-16.195l-.002-.002zm69.973 124.361c16.404 0 30.074 6.817 41.01 20.447 10.936 13.631 16.404 32.768 16.404 57.414 0 20.446-3.05 37.722-9.152 51.829-6.023 14.026-14.027 24.488-24.012 31.382-9.985 6.816-21.239 10.223-33.76 10.223-12.125 0-21.634-2.655-28.529-7.965-6.815-5.389-10.223-11.806-10.223-19.256 0-4.913 1.387-8.877 4.16-11.888 2.853-3.012 6.418-4.516 10.698-4.516 3.883 0 7.173 1.307 9.867 3.922 2.694 2.615 4.04 5.745 4.04 9.39 0 2.616-1.226 5.508-3.683 8.678-1.505 1.982-2.26 3.685-2.26 5.112 0 2.219 1.31 4.16 3.924 5.824 2.616 1.585 6.815 2.379 12.6 2.379 8.242 0 15.493-2.258 21.754-6.776 6.26-4.596 11.332-12.085 15.215-22.466 3.883-10.461 5.826-23.975 5.826-40.538l-.238-10.578c-5.152 7.767-11.174 13.63-18.069 17.592-6.894 3.883-14.62 5.826-23.18 5.826-11.887 0-22.705-4.161-32.452-12.482-9.669-8.321-14.502-20.566-14.502-36.733 0-15.77 5.348-29.162 16.046-40.177 10.778-11.095 23.617-16.643 38.516-16.643zm.356 8.559c-8.876 0-16.166 3.724-21.872 11.174-5.705 7.37-8.558 18.505-8.558 33.404 0 13.63 2.853 23.813 8.558 30.549 5.706 6.656 13.155 9.986 22.348 9.986 9.114 0 16.76-3.607 22.941-10.818 6.261-7.212 9.393-17.316 9.393-30.313 0-13.472-3.25-24.169-9.748-32.094-6.42-7.924-14.107-11.888-23.062-11.888zm113.75 176.676c4.572 17.07 53.287 38.925 52.31 70.015-.57 18.188-13.46 28.36-27.072 28.043h-.002c-9.313-.218-18.975-5.35-25.236-16.195-15.048 26.06-53.444 19.307-52.45-11.848 1.037-32.442 47.452-51.366 52.45-70.015z"}}]})(props);
};
module.exports.GiCard9Spades = function GiCard9Spades (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119.436 36c-16.126 0-29.2 17.237-29.2 38.5v363c0 21.263 13.074 38.5 29.2 38.5h275.298c16.126 0 29.198-17.237 29.198-38.5v-363c0-21.263-13.072-38.5-29.198-38.5H119.436zm26.654 8.045s46.338 33.84 47.271 63.07c.776 24.287-25.024 32.12-40.775 18.584l13.633 32.653h-40.117l13.613-32.633c-15.535 13.88-40.006 5.347-40.758-18.606-.88-28.01 47.133-63.066 47.133-63.066v-.002zm99.45 132.49c16.403 0 30.075 6.815 41.01 20.445 10.937 13.631 16.405 32.77 16.405 57.416 0 20.446-3.052 37.722-9.154 51.829-6.023 14.026-14.027 24.486-24.012 31.38-9.985 6.816-21.238 10.225-33.76 10.225-12.125 0-21.634-2.655-28.529-7.965-6.815-5.389-10.223-11.808-10.223-19.258 0-4.913 1.387-8.875 4.16-11.886 2.853-3.012 6.42-4.518 10.7-4.518 3.883 0 7.17 1.307 9.865 3.922 2.694 2.615 4.043 5.747 4.043 9.393 0 2.615-1.229 5.507-3.686 8.677-1.505 1.982-2.257 3.685-2.257 5.112 0 2.219 1.306 4.16 3.921 5.824 2.616 1.585 6.817 2.377 12.602 2.377 8.242 0 15.491-2.258 21.752-6.776 6.26-4.596 11.334-12.085 15.217-22.466 3.883-10.461 5.824-23.973 5.824-40.536l-.238-10.58c-5.151 7.767-11.174 13.632-18.069 17.594-6.894 3.883-14.62 5.824-23.18 5.824-11.887 0-22.703-4.16-32.45-12.48-9.669-8.321-14.504-20.566-14.504-36.733 0-15.77 5.35-29.164 16.048-40.18 10.778-11.094 23.615-16.64 38.514-16.64zm.356 8.559c-8.875 0-16.167 3.724-21.873 11.174-5.705 7.37-8.558 18.503-8.558 33.402 0 13.63 2.853 23.815 8.558 30.55 5.706 6.657 13.155 9.985 22.348 9.985 9.114 0 16.762-3.605 22.943-10.816 6.261-7.212 9.391-17.316 9.391-30.313 0-13.472-3.25-24.17-9.748-32.096-6.419-7.924-14.105-11.886-23.06-11.886zm99.883 168.554h40.116l-13.633 32.653c15.75-13.536 41.551-5.701 40.775 18.586-.933 29.23-47.27 63.068-47.27 63.068s-48.011-35.059-47.132-63.068c.751-23.953 25.222-32.485 40.758-18.604l-13.614-32.635z"}}]})(props);
};
module.exports.GiCardAceClubs = function GiCardAceClubs (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119.436 36c-16.126 0-29.2 17.237-29.2 38.5v363c0 21.263 13.074 38.5 29.2 38.5h275.298c16.126 0 29.198-17.237 29.198-38.5v-363c0-21.263-13.072-38.5-29.198-38.5H119.436zm26.832 8.408v.002h.015c13.587.01 24.442 10.853 24.442 24.442 0 5.71-2.003 10.997-5.266 15.173 1.12-.158 2.232-.31 3.396-.31 13.595 0 24.458 11.157 24.458 24.752 0 13.594-10.863 24.752-24.458 24.752-5.76 0-11.08-2.048-15.294-5.422l12.609 30.193h-40.117l12.42-29.744c-4.12 3.115-9.233 4.973-14.776 4.973-13.594 0-24.752-11.16-24.752-24.754 0-13.595 11.158-24.752 24.752-24.752 1.059 0 2.058.184 3.082.312-3.215-4.16-5.248-9.509-5.248-15.173 0-13.589 11.15-24.434 24.737-24.444zm95.466 120.596h7.965l63.121 160.834c2.536 6.498 7.727 9.748 15.573 9.748h5.468v8.916h-70.134v-8.916h5.586c7.29 0 12.443-.792 15.455-2.377 2.06-1.11 3.09-2.813 3.09-5.111 0-1.348-.278-2.774-.833-4.28l-14.62-37.326h-69.423l-8.2 21.397c-2.14 5.705-3.212 10.222-3.212 13.55 0 3.884 1.784 7.213 5.35 9.987 3.645 2.774 8.916 4.16 15.81 4.16h5.944v8.916h-63.715v-8.916c6.815 0 12.204-1.466 16.166-4.399 3.962-3.01 7.607-8.676 10.936-16.998l59.673-149.185zm-3.447 33.879l-31.5 78.336h62.17l-30.67-78.336zm107.508 155.129h40.117l-12.611 30.193c4.215-3.374 9.535-5.422 15.295-5.422 13.594 0 24.459 11.157 24.459 24.752 0 13.595-10.865 24.752-24.46 24.752-1.163 0-2.275-.152-3.396-.31 3.263 4.176 5.266 9.462 5.266 15.173 0 13.589-10.853 24.433-24.44 24.442h-.017c-13.588-.01-24.735-10.853-24.735-24.442 0-5.665 2.033-11.013 5.248-15.173-1.023.128-2.025.312-3.084.312-13.594 0-24.751-11.159-24.751-24.754 0-13.594 11.157-24.752 24.752-24.752 5.542 0 10.655 1.858 14.775 4.973l-12.418-29.744z"}}]})(props);
};
module.exports.GiCardAceDiamonds = function GiCardAceDiamonds (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119.436 36c-16.126 0-29.2 17.237-29.2 38.5v363c0 21.263 13.074 38.5 29.2 38.5h275.298c16.126 0 29.198-17.237 29.198-38.5v-363c0-21.263-13.072-38.5-29.198-38.5H119.436zm26.884 3.717h.002l47.39 58.27-47.39 58.286-47.377-58.287 47.375-58.27zm96.5 125.287h7.963l63.121 160.834c2.536 6.498 7.727 9.748 15.573 9.748h5.468v8.916h-70.134v-8.916h5.587c7.291 0 12.442-.792 15.454-2.377 2.06-1.11 3.09-2.815 3.09-5.113 0-1.347-.278-2.774-.833-4.28l-14.62-37.324h-69.423l-8.2 21.397c-2.14 5.706-3.21 10.222-3.21 13.55 0 3.884 1.782 7.213 5.348 9.987 3.645 2.774 8.916 4.16 15.81 4.16h5.944v8.916h-63.715v-8.916c6.815 0 12.204-1.466 16.166-4.399 3.962-3.011 7.61-8.676 10.937-16.998l59.674-149.185zm-3.447 33.879l-31.502 78.336h62.17l-30.668-78.336zm126.29 153.64l47.392 58.27-47.393 58.287-47.375-58.287 47.375-58.27z"}}]})(props);
};
module.exports.GiCardAceHearts = function GiCardAceHearts (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119.436 36c-16.126 0-29.2 17.237-29.2 38.5v363c0 21.263 13.074 38.5 29.2 38.5h275.298c16.126 0 29.198-17.237 29.198-38.5v-363c0-21.263-13.072-38.5-29.198-38.5H119.436zm57.214 16.174h.002c13.612-.318 26.502 9.855 27.073 28.043.976 31.09-47.738 52.945-52.31 70.015-4.998-18.649-51.414-37.573-52.45-70.015-.995-31.155 37.401-37.91 52.45-11.848 6.26-10.846 15.922-15.977 25.235-16.195zm66.17 112.83h7.963l63.121 160.834c2.536 6.498 7.727 9.748 15.573 9.748h5.468v8.916h-70.134v-8.916h5.587c7.291 0 12.442-.792 15.454-2.377 2.06-1.11 3.09-2.815 3.09-5.113 0-1.347-.278-2.774-.833-4.28l-14.62-37.324h-69.423l-8.2 21.397c-2.14 5.706-3.21 10.222-3.21 13.55 0 3.884 1.782 7.213 5.348 9.987 3.645 2.774 8.916 4.16 15.81 4.16h5.944v8.916h-63.715v-8.916c6.815 0 12.204-1.466 16.166-4.399 3.962-3.011 7.61-8.676 10.937-16.998l59.674-149.185zm-3.447 33.879l-31.502 78.336h62.17l-30.668-78.336zM360.73 361.77c4.572 17.07 53.289 38.923 52.312 70.013-.57 18.188-13.463 28.361-27.074 28.043h-.002c-9.313-.218-18.973-5.35-25.235-16.195-15.048 26.061-53.445 19.308-52.45-11.848 1.036-32.442 47.451-51.364 52.449-70.013z"}}]})(props);
};
module.exports.GiCardAceSpades = function GiCardAceSpades (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119.436 36c-16.126 0-29.2 17.237-29.2 38.5v363c0 21.263 13.074 38.5 29.2 38.5h275.298c16.126 0 29.198-17.237 29.198-38.5v-363c0-21.263-13.072-38.5-29.198-38.5H119.436zm26.654 8.047s46.338 33.838 47.271 63.068c.776 24.287-25.024 32.122-40.775 18.586l13.633 32.653h-40.117l13.613-32.635c-15.535 13.88-40.006 5.349-40.758-18.604-.88-28.01 47.133-63.068 47.133-63.068zm95.646 120.957h7.963l63.121 160.834c2.536 6.498 7.727 9.748 15.573 9.748h5.468v8.916h-70.134v-8.916h5.587c7.291 0 12.442-.792 15.454-2.377 2.06-1.11 3.09-2.813 3.09-5.111 0-1.347-.278-2.774-.833-4.28l-14.62-37.326h-69.423l-8.2 21.397c-2.14 5.706-3.21 10.222-3.21 13.55 0 3.884 1.782 7.213 5.348 9.987 3.645 2.774 8.916 4.16 15.81 4.16h5.944v8.916h-63.715v-8.916c6.815 0 12.204-1.466 16.166-4.399 3.962-3.011 7.61-8.676 10.938-16.998l59.673-149.185zm-3.447 33.879l-31.502 78.338h62.17l-30.668-78.338zm107.49 154.765h40.116l-13.633 32.653c15.75-13.536 41.551-5.701 40.775 18.586-.933 29.23-47.27 63.068-47.27 63.068s-48.011-35.058-47.132-63.068c.751-23.953 25.222-32.485 40.758-18.604l-13.614-32.635z"}}]})(props);
};
module.exports.GiCardBurn = function GiCardBurn (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M280.693 64.92c-5.164-.024-11.614 1.387-18.687 6.205-55.605 39.039-112.172 76.494-169.584 112.826-10.2 6.621-9.75 16.6 1.017 22.27l128.75 67.761c5.384 2.835 22.414 2.056 32.614-4.564l169.834-110.232c10.199-6.622 9.75-16.598-1.014-22.268-44.669-23.51-85.78-45.116-130.578-68.865 0 0-4.803-3.099-12.352-3.133zm6.416 27.547l-13.504 69.37 113.612-14.685-2.84 15.22-113.773 14.878-13.672 70.232-25.643 3.53 13.838-70.43-117.033 15.305 3.205-15.655 116.865-15.105 13.668-69.565 25.277-3.095zm41.246 146.324l-65.74 42.674c-14.563 9.45-37.135 10.479-52.5 2.389L175.29 265.53l-87.236 41.375c-10.983 5.203-10.69 12.999.66 17.354l121.242 46.617v.006c11.35 4.368 29.494 3.66 40.477-1.535l166.992-79.196c10.985-5.194 10.68-12.996-.664-17.353l-88.405-34.008zm93.614 65.094l-165.393 78.44c-14.544 6.88-36.751 7.734-51.775 1.958L83.81 337.76c-6.4 4.962-4.722 11.122 4.902 14.812l121.242 46.625h.002c11.349 4.363 29.494 3.663 40.477-1.533l166.992-79.193c8.922-4.218 10.398-10.162 4.543-14.586zm0 28.318l-165.393 78.44c-14.544 6.874-36.751 7.729-51.775 1.959L83.81 366.078c-6.4 4.963-4.722 11.125 4.902 14.815l121.242 46.625h.002c11.349 4.362 29.494 3.66 40.477-1.534l166.992-79.2c8.922-4.22 10.398-10.165 4.543-14.58zm-.002 28.32l-165.393 78.434c-14.544 6.88-36.75 7.735-51.773 1.959L83.81 394.4c-6.4 4.96-4.721 11.119 4.902 14.809l121.242 46.623v-.002c11.35 4.37 29.494 3.663 40.477-1.533l166.994-79.193c8.922-4.22 10.396-10.164 4.54-14.58zm-3.871 30.153l-161.522 76.6c-14.544 6.88-36.75 7.737-51.773 1.96L87.924 424.293c-10.853 5.201-10.52 12.949.789 17.289l121.24 46.62h.002c11.35 4.366 29.492 3.66 40.475-1.534l166.996-79.193c10.534-4.98 10.684-12.363.67-16.8z"}}]})(props);
};
module.exports.GiCardDiscard = function GiCardDiscard (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M150.79 479.797l-85.27-185.08c-3.13-6.79-.15-14.862 6.634-17.993l129.163-59.51c6.783-3.12 14.862-.15 17.987 6.646l85.283 185.067c3.13 6.802.15 14.863-6.646 18L168.79 486.43c-6.795 3.144-14.868.15-18-6.633zm26.17-69.31l15.318-44.522 44.522 15.32 7.66-22.253-44.523-15.318 15.325-44.522-22.252-7.66-15.325 44.516-44.515-15.324-7.66 22.258 44.516 15.324-15.324 44.522zm106.07-211.05c47.9-85.625-53.11-105.304-102.586-62.593l-38.9 51.353C105.95 210 97.853 175.98 109.226 158.424l54.106-73.515 97.158-52.146c7.108-5.2 17.838-8.133 32.767-8.445l194.467 1.463.866 112.044-107.304-7.725c1.818 43.394-42.734 53.08-66.683 106.905l-13.813 46.38c-30.217-10.16-41.29-34.367-17.76-83.95zm-129.828-3.077l39.046-51.33c12.434-10.477 29.51-17.675 46.92-17.375-15.264 16.008-20.158 25.557-23.475 39.046-8 19.775-17.74 29.69-30.366 23.296-10.712 10.322-21.412 14.87-32.125 6.364z"}}]})(props);
};
module.exports.GiCardDraw = function GiCardDraw (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M209.955 488.202l-121.242-46.62c-11.308-4.34-11.643-12.087-.79-17.288L204.8 469.236c15.024 5.777 37.23 4.92 51.774-1.96l161.522-76.6c10.014 4.436 9.864 11.818-.67 16.798L250.43 486.668c-10.983 5.195-29.128 5.902-40.477 1.534zm0-32.37L88.713 409.21C79.09 405.52 77.41 399.36 83.81 394.4l120.99 46.517c15.024 5.776 37.23 4.92 51.774-1.96l165.393-78.433c5.855 4.417 4.38 10.36-4.542 14.58l-166.993 79.193c-10.983 5.196-29.128 5.903-40.477 1.534zm0-28.314L88.713 380.892c-9.624-3.69-11.302-9.85-4.902-14.813l120.99 46.523c15.024 5.77 37.23 4.914 51.774-1.96l165.393-78.438c5.855 4.416 4.38 10.36-4.542 14.58l-166.993 79.2c-10.983 5.194-29.128 5.895-40.477 1.533zm0-28.32L88.713 352.572c-9.624-3.69-11.302-9.85-4.902-14.812l120.99 46.524c15.024 5.776 37.23 4.92 51.774-1.96l165.393-78.44c5.855 4.424 4.38 10.368-4.542 14.586l-166.993 79.194c-10.983 5.196-29.128 5.897-40.477 1.534zm0-28.32L88.713 324.26c-11.35-4.355-11.643-12.15-.66-17.353l87.236-41.376 34.826 18.323c15.365 8.09 37.937 7.06 52.5-2.39l65.74-42.672 88.404 34.007c11.344 4.357 11.65 12.16.665 17.354l-166.993 79.195c-10.983 5.195-29.128 5.902-40.477 1.534zm6.85-99.73L93.44 206.22c-10.767-5.67-11.217-15.647-1.018-22.268l105.11-68.228h25.845l.015 64.962h58.664v-64.962H332.2l-27.487-41.39 118.91 62.584c10.763 5.67 11.212 15.646 1.013 22.268L254.803 269.418c-10.2 6.62-27.23 7.4-37.997 1.73zm21.637-105.523V100.67h-34.845l49.13-79.74 49.12 79.74H267v64.955h-28.558z"}}]})(props);
};
module.exports.GiCardExchange = function GiCardExchange (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M258.148 20.822c-1.112.008-2.226.026-3.343.055-39.32 1.041-81.507 15.972-123.785 50.404l-6.028 4.91-5.732-5.25c-12.644-11.578-20.276-27.633-25.653-43.716-8.974 36.98-14.631 81.385-9.232 114.523 18.065.908 45.409-2.177 73.7-7.818 17.858-3.561 36.048-8.126 53.064-13.072-13.419-2.911-25.896-6.882-38.143-12.082l-16.088-6.832 14.906-9.127c46.367-28.393 80.964-40.686 120.235-35.553 33.105 4.327 69.357 20.867 119.066 47.271-25.373-36.314-62.243-64.737-104.728-76.994-15.402-4.443-31.553-6.828-48.239-6.719zM346 116c-46.667 0-46.666 0-46.666 46.666V349.4c0 9.596.007 17.19.414 23.242a664.804 664.804 0 0 1 50.656-12.223c24.649-4.915 48.367-8.224 67.916-8.41 6.517-.062 12.571.224 18.041.912l6.31.793 1.358 6.213c2.464 11.265 3.673 23.447 3.914 36.059 38.032-.19 38.057-3.06 38.057-46.65V162.665C486 116 486 116 439.334 116a226.98 226.98 0 0 1 3.978 7.64l12.624 25.536-25.004-13.648c-13.085-7.143-25.164-13.632-36.452-19.528zm-281.943.016c-38.032.19-38.057 3.06-38.057 46.65V349.4C26 396 26 396 72.666 396a226.98 226.98 0 0 1-3.978-7.64l-12.624-25.536 25.004 13.649c13.085 7.142 25.164 13.632 36.452 19.527H166c46.667 0 46.666 0 46.666-46.666V162.666c0-9.626-.006-17.24-.416-23.304a664.811 664.811 0 0 1-50.654 12.22c-32.865 6.554-64.077 10.25-85.957 7.498l-6.31-.793-1.358-6.213c-2.464-11.265-3.673-23.446-3.914-36.058zm354.619 254.078c-17.543.25-40.826 3.206-64.75 7.977-17.859 3.56-36.05 8.125-53.065 13.072 13.419 2.91 25.896 6.881 38.143 12.082l16.088 6.832-14.906 9.127c-46.367 28.392-80.964 40.685-120.235 35.553-33.105-4.327-69.357-20.868-119.066-47.272 25.373 36.315 62.243 64.738 104.728 76.994 52.573 15.166 113.872 6.343 175.367-43.74l6.028-4.91 5.732 5.25c12.644 11.579 20.276 27.633 25.653 43.717 8.974-36.981 14.631-81.386 9.232-114.524-2.788-.14-5.748-.204-8.95-.158z"}}]})(props);
};
module.exports.GiCardJackClubs = function GiCardJackClubs (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119.436 36c-16.126 0-29.2 17.237-29.2 38.5v363c0 21.263 13.074 38.5 29.2 38.5h275.298c16.126 0 29.198-17.237 29.198-38.5v-363c0-21.263-13.072-38.5-29.198-38.5H119.436zm26.832 8.408v.002h.015c13.587.01 24.442 10.853 24.442 24.442 0 5.71-2.003 10.997-5.266 15.173 1.12-.158 2.232-.312 3.396-.312 13.595 0 24.458 11.16 24.458 24.754 0 13.594-10.863 24.752-24.458 24.752-5.76 0-11.08-2.048-15.294-5.422l12.609 30.191h-40.117l12.42-29.742c-4.12 3.115-9.233 4.973-14.776 4.973-13.594 0-24.752-11.162-24.752-24.756 0-13.595 11.158-24.75 24.752-24.75 1.059 0 2.058.184 3.082.312-3.215-4.16-5.248-9.509-5.248-15.173 0-13.589 11.15-24.434 24.737-24.444zm80.966 124.28h77.743v8.916H293.92c-4.359 0-7.489.791-9.39 2.376-1.823 1.585-2.735 3.884-2.735 6.895v113.998c0 8.797-2.139 16.762-6.418 23.895-4.28 7.053-10.54 12.678-18.781 16.878-8.242 4.121-17.554 6.182-27.936 6.182-14.106 0-25.637-4.121-34.592-12.363-8.955-8.321-13.433-18.463-13.433-30.43 0-8.876 2.26-15.97 6.777-21.28 4.517-5.309 10.063-7.964 16.64-7.964 5.39 0 9.828 1.744 13.315 5.23 3.487 3.408 5.23 7.767 5.23 13.077 0 4.596-1.426 8.48-4.279 11.65-2.853 3.09-6.142 4.635-9.867 4.635-1.426 0-3.407-.395-5.943-1.188-2.14-.634-3.566-.95-4.28-.95-1.347 0-2.416.554-3.208 1.663-.872 1.11-1.31 2.773-1.31 4.992 0 5.944 2.973 11.372 8.917 16.286 6.023 4.834 13.392 7.252 22.11 7.252 9.905 0 17.711-3.408 23.417-10.223 5.706-6.895 8.559-16.484 8.559-28.768V186.875c0-3.09-1.07-5.389-3.21-6.895-2.06-1.585-5.624-2.376-10.696-2.376h-15.573v-8.917zm118.56 185.324h40.118l-12.611 30.193c4.215-3.374 9.535-5.422 15.295-5.422 13.594 0 24.459 11.158 24.459 24.752 0 13.595-10.865 24.752-24.46 24.752-1.163 0-2.275-.152-3.396-.31 3.263 4.176 5.266 9.462 5.266 15.173 0 13.589-10.853 24.433-24.44 24.442h-.017c-13.588-.01-24.735-10.853-24.735-24.442 0-5.665 2.033-11.013 5.248-15.173-1.023.128-2.025.312-3.084.312-13.594 0-24.751-11.159-24.751-24.754 0-13.594 11.157module.exports={A:{A:{"2":"J D E F A B FC"},B:{"1":"P Q R S T U V W X Y Z a b c d e i j k l m n o p q r s t u v f w H","2":"C K L G M N O"},C:{"1":"u v f w H zB 0B","2":"0 1 2 3 4 5 6 7 8 9 GC vB I x J D E F A B C K L G M N O y g z AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB wB bB xB cB dB eB fB gB hB iB jB kB lB mB h nB oB pB qB rB P Q R yB S T U V W X Y Z a b c d e i j k l m n o p q r s t HC IC"},D:{"1":"LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB wB bB xB cB dB eB fB gB hB iB jB kB lB mB h nB oB pB qB rB P Q R S T U V W X Y Z a b c d e i j k l m n o p q r s t u v f w H zB 0B JC","2":"0 1 2 3 4 5 6 7 8 9 I x J D E F A B C K L G M N O y g z AB BB CB DB EB FB GB HB IB JB KB"},E:{"2":"I x J D E F A B C K L G KC 1B LC MC NC OC 2B sB tB 3B PC QC 4B 5B 6B 7B uB 8B 9B AC BC CC RC"},F:{"1":"8 9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB h nB oB pB qB rB P Q R yB S T U V W X Y Z a b c d e","2":"0 1 2 3 4 5 6 7 F B C G M N O y g z SC TC UC VC sB DC WC tB"},G:{"2":"E 1B XC EC YC ZC aC bC cC dC eC fC gC hC iC jC kC lC mC nC oC pC qC 4B 5B 6B 7B uB 8B 9B AC BC CC"},H:{"2":"rC"},I:{"1":"H","2":"vB I sC tC uC vC EC wC xC"},J:{"2":"D A"},K:{"1":"h","2":"A B C sB DC tB"},L:{"1":"H"},M:{"2":"f"},N:{"2":"A B"},O:{"1":"yC"},P:{"1":"I g zC 0C 1C 2C 3C 2B 4C 5C 6C 7C 8C uB 9C AD BD"},Q:{"1":"3B"},R:{"1":"CD"},S:{"2":"DD ED"}},B:5,C:"Web MIDI API"};
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      key - The name of the parameter.\n *\n * @returns The value for the given key as a number.\n *\n * @public\n */\nexport function getNumber(remoteConfig: RemoteConfig, key: string): number {\n  return getValue(getModularInstance(remoteConfig), key).asNumber();\n}\n\n/**\n * Gets the value for the given key as a string.\n * Convenience method for calling <code>remoteConfig.getValue(key).asString()</code>.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @param key - The name of the parameter.\n *\n * @returns The value for the given key as a string.\n *\n * @public\n */\nexport function getString(remoteConfig: RemoteConfig, key: string): string {\n  return getValue(getModularInstance(remoteConfig), key).asString();\n}\n\n/**\n * Gets the {@link Value} for the given key.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @param key - The name of the parameter.\n *\n * @returns The value for the given key.\n *\n * @public\n */\nexport function getValue(remoteConfig: RemoteConfig, key: string): Value {\n  const rc = getModularInstance(remoteConfig) as RemoteConfigImpl;\n  if (!rc._isInitializationComplete) {\n    rc._logger.debug(\n      `A value was requested for key \"${key}\" before SDK initialization completed.` +\n        ' Await on ensureInitialized if the intent was to get a previously activated value.'\n    );\n  }\n  const activeConfig = rc._storageCache.getActiveConfig();\n  if (activeConfig && activeConfig[key] !== undefined) {\n    return new ValueImpl('remote', activeConfig[key]);\n  } else if (rc.defaultConfig && rc.defaultConfig[key] !== undefined) {\n    return new ValueImpl('default', String(rc.defaultConfig[key]));\n  }\n  rc._logger.debug(\n    `Returning static value for key \"${key}\".` +\n      ' Define a default or remote value if this is unintentional.'\n  );\n  return new ValueImpl('static');\n}\n\n/**\n * Defines the log level to use.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @param logLevel - The log level to set.\n *\n * @public\n */\nexport function setLogLevel(\n  remoteConfig: RemoteConfig,\n  logLevel: RemoteConfigLogLevel\n): void {\n  const rc = getModularInstance(remoteConfig) as RemoteConfigImpl;\n  switch (logLevel) {\n    case 'debug':\n      rc._logger.logLevel = FirebaseLogLevel.DEBUG;\n      break;\n    case 'silent':\n      rc._logger.logLevel = FirebaseLogLevel.SILENT;\n      break;\n    default:\n      rc._logger.logLevel = FirebaseLogLevel.ERROR;\n  }\n}\n\n/**\n * Dedupes and returns an array of all the keys of the received objects.\n */\nfunction getAllKeys(obj1: {} = {}, obj2: {} = {}): string[] {\n  return Object.keys({ ...obj1, ...obj2 });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { StorageCache } from '../storage/storage_cache';\nimport {\n  FetchResponse,\n  RemoteConfigFetchClient,\n  FetchRequest\n} from './remote_config_fetch_client';\nimport { Storage } from '../storage/storage';\nimport { Logger } from '@firebase/logger';\n\n/**\n * Implements the {@link RemoteConfigClient} abstraction with success response caching.\n *\n * <p>Comparable to the browser's Cache API for responses, but the Cache API requires a Service\n * Worker, which requires HTTPS, which would significantly complicate SDK installation. Also, the\n * Cache API doesn't support matching entries by time.\n */\nexport class CachingClient implements RemoteConfigFetchClient {\n  constructor(\n    private readonly client: RemoteConfigFetchClient,\n    private readonly storage: Storage,\n    private readonly storageCache: StorageCache,\n    private readonly logger: Logger\n  ) {}\n\n  /**\n   * Returns true if the age of the cached fetched configs is less than or equal to\n   * {@link Settings#minimumFetchIntervalInSeconds}.\n   *\n   * <p>This is comparable to passing `headers = { 'Cache-Control': max-age <maxAge> }` to the\n   * native Fetch API.\n   *\n   * <p>Visible for testing.\n   */\n  isCachedDataFresh(\n    cacheMaxAgeMillis: number,\n    lastSuccessfulFetchTimestampMillis: number | undefined\n  ): boolean {\n    // Cache can only be fresh if it's populated.\n    if (!lastSuccessfulFetchTimestampMillis) {\n      this.logger.debug('Config fetch cache check. Cache unpopulated.');\n      return false;\n    }\n\n    // Calculates age of cache entry.\n    const cacheAgeMillis = Date.now() - lastSuccessfulFetchTimestampMillis;\n\n    const isCachedDataFresh = cacheAgeMillis <= cacheMaxAgeMillis;\n\n    this.logger.debug(\n      'Config fetch cache check.' +\n        ` Cache age millis: ${cacheAgeMillis}.` +\n        ` Cache max age millis (minimumFetchIntervalMillis setting): ${cacheMaxAgeMillis}.` +\n        ` Is cache hit: ${isCachedDataFresh}.`\n    );\n\n    return isCachedDataFresh;\n  }\n\n  async fetch(request: FetchRequest): Promise<FetchResponse> {\n    // Reads from persisted storage to avoid cache miss if callers don't wait on initialization.\n    const [lastSuccessfulFetchTimestampMillis, lastSuccessfulFetchResponse] =\n      await Promise.all([\n        this.storage.getLastSuccessfulFetchTimestampMillis(),\n        this.storage.getLastSuccessfulFetchResponse()\n      ]);\n\n    // Exits early on cache hit.\n    if (\n      lastSuccessfulFetchResponse &&\n      this.isCachedDataFresh(\n        request.cacheMaxAgeMillis,\n        lastSuccessfulFetchTimestampMillis\n      )\n    ) {\n      return lastSuccessfulFetchResponse;\n    }\n\n    // Deviates from pure decorator by not honoring a passed ETag since we don't have a public API\n    // that allows the caller to pass an ETag.\n    request.eTag =\n      lastSuccessfulFetchResponse && lastSuccessfulFetchResponse.eTag;\n\n    // Falls back to service on cache miss.\n    const response = await this.client.fetch(request);\n\n    // Fetch throws for non-success responses, so success is guaranteed here.\n\n    const storageOperations = [\n      // Uses write-through cache for consistency with synchronous public API.\n      this.storageCache.setLastSuccessfulFetchTimestampMillis(Date.now())\n    ];\n\n    if (response.status === 200) {\n      // Caches response only if it has changed, ie non-304 responses.\n      storageOperations.push(\n        this.storage.setLastSuccessfulFetchResponse(response)\n      );\n    }\n\n    await Promise.all(storageOperations);\n\n    return response;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Attempts to get the most accurate browser language setting.\n *\n * <p>Adapted from getUserLanguage in packages/auth/src/utils.js for TypeScript.\n *\n * <p>Defers default language specification to server logic for consistency.\n *\n * @param navigatorLanguage Enables tests to override read-only {@link NavigatorLanguage}.\n */\nexport function getUserLanguage(\n  navigatorLanguage: NavigatorLanguage = navigator\n): string {\n  return (\n    // Most reliable, but only supported in Chrome/Firefox.\n    (navigatorLanguage.languages && navigatorLanguage.languages[0]) ||\n    // Supported in most browsers, but returns the language of the browser\n    // UI, not the language set in browser settings.\n    navigatorLanguage.language\n    // Polyfill otherwise.\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FetchResponse,\n  RemoteConfigFetchClient,\n  FirebaseRemoteConfigObject,\n  FetchRequest\n} from './remote_config_fetch_client';\nimport { ERROR_FACTORY, ErrorCode } from '../errors';\nimport { getUserLanguage } from '../language';\nimport { _FirebaseInstallationsInternal } from '@firebase/installations';\n\n/**\n * Defines request body parameters required to call the fetch API:\n * https://firebase.google.com/docs/reference/remote-config/rest\n *\n * <p>Not exported because this file encapsulates REST API specifics.\n *\n * <p>Not passing User Properties because Analytics' source of truth on Web is server-side.\n */\ninterface FetchRequestBody {\n  // Disables camelcase linting for request body params.\n  /* eslint-disable camelcase*/\n  sdk_version: string;\n  app_instance_id: string;\n  app_instance_id_token: string;\n  app_id: string;\n  language_code: string;\n  /* eslint-enable camelcase */\n}\n\n/**\n * Implements the Client abstraction for the Remote Config REST API.\n */\nexport class RestClient implements RemoteConfigFetchClient {\n  constructor(\n    private readonly firebaseInstallations: _FirebaseInstallationsInternal,\n    private readonly sdkVersion: string,\n    private readonly namespace: string,\n    private readonly projectId: string,\n    private readonly apiKey: string,\n    private readonly appId: string\n  ) {}\n\n  /**\n   * Fetches from the Remote Config REST API.\n   *\n   * @throws a {@link ErrorCode.FETCH_NETWORK} error if {@link GlobalFetch#fetch} can't\n   * connect to the network.\n   * @throws a {@link ErrorCode.FETCH_PARSE} error if {@link Response#json} can't parse the\n   * fetch response.\n   * @throws a {@link ErrorCode.FETCH_STATUS} error if the service returns an HTTP error status.\n   */\n  async fetch(request: FetchRequest): Promise<FetchResponse> {\n    const [installationId, installationToken] = await Promise.all([\n      this.firebaseInstallations.getId(),\n      this.firebaseInstallations.getToken()\n    ]);\n\n    const urlBase =\n      window.FIREBASE_REMOTE_CONFIG_URL_BASE ||\n      'https://firebaseremoteconfig.googleapis.com';\n\n    const url = `${urlBase}/v1/projects/${this.projectId}/namespaces/${this.namespace}:fetch?key=${this.apiKey}`;\n\n    const headers = {\n      'Content-Type': 'application/json',\n      'Content-Encoding': 'gzip',\n      // Deviates from pure decorator by not passing max-age header since we don't currently have\n      // service behavior using that header.\n      'If-None-Match': request.eTag || '*'\n    };\n\n    const requestBody: FetchRequestBody = {\n      /* eslint-disable camelcase */\n      sdk_version: this.sdkVersion,\n      app_instance_id: installationId,\n      app_instance_id_token: installationToken,\n      app_id: this.appId,\n      language_code: getUserLanguage()\n      /* eslint-enable camelcase */\n    };\n\n    const options = {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(requestBody)\n    };\n\n    // This logic isn't REST-specific, but shimming abort logic isn't worth another decorator.\n    const fetchPromise = fetch(url, options);\n    const timeoutPromise = new Promise((_resolve, reject) => {\n      // Maps async event listener to Promise API.\n      request.signal.addEventListener(() => {\n        // Emulates https://heycam.github.io/webidl/#aborterror\n        const error = new Error('The operation was aborted.');\n        error.name = 'AbortError';\n        reject(error);\n      });\n    });\n\n    let response;\n    try {\n      await Promise.race([fetchPromise, timeoutPromise]);\n      response = await fetchPromise;\n    } catch (originalError) {\n      let errorCode = ErrorCode.FETCH_NETWORK;\n      if ((originalError as Error)?.name === 'AbortError') {\n        errorCode = ErrorCode.FETCH_TIMEOUT;\n      }\n      throw ERROR_FACTORY.create(errorCode, {\n        originalErrorMessage: (originalError as Error)?.message\n      });\n    }\n\n    let status = response.status;\n\n    // Normalizes nullable header to optional.\n    const responseEtag = response.headers.get('ETag') || undefined;\n\n    let config: FirebaseRemoteConfigObject | undefined;\n    let state: string | undefined;\n\n    // JSON parsing throws SyntaxError if the response body isn't a JSON string.\n    // Requesting application/json and checking for a 200 ensures there's JSON data.\n    if (response.status === 200) {\n      let responseBody;\n      try {\n        responseBody = await response.json();\n      } catch (originalError) {\n        throw ERROR_FACTORY.create(ErrorCode.FETCH_PARSE, {\n          originalErrorMessage: (originalError as Error)?.message\n        });\n      }\n      config = responseBody['entries'];\n      state = responseBody['state'];\n    }\n\n    // Normalizes based on legacy state.\n    if (state === 'INSTANCE_STATE_UNSPECIFIED') {\n      status = 500;\n    } else if (state === 'NO_CHANGE') {\n      status = 304;\n    } else if (state === 'NO_TEMPLATE' || state === 'EMPTY_CONFIG') {\n      // These cases can be fixed remotely, so normalize to safe value.\n      config = {};\n    }\n\n    // Normalize to exception-based control flow for non-success cases.\n    // Encapsulates HTTP specifics in this class as much as possible. Status is still the best for\n    // differentiating success states (200 from 304; the state body param is undefined in a\n    // standard 304).\n    if (status !== 304 && status !== 200) {\n      throw ERROR_FACTORY.create(ErrorCode.FETCH_STATUS, {\n        httpStatus: status\n      });\n    }\n\n    return { status, eTag: responseEtag, config };\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  RemoteConfigAbortSignal,\n  RemoteConfigFetchClient,\n  FetchResponse,\n  FetchRequest\n} from './remote_config_fetch_client';\nimport { ThrottleMetadata, Storage } from '../storage/storage';\nimport { ErrorCode, ERROR_FACTORY } from '../errors';\nimport { FirebaseError, calculateBackoffMillis } from '@firebase/util';\n\n/**\n * Supports waiting on a backoff by:\n *\n * <ul>\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\n *       request appear the same.</li>\n * </ul>\n *\n * <p>Visible for testing.\n */\nexport function setAbortableTimeout(\n  signal: RemoteConfigAbortSignal,\n  throttleEndTimeMillis: number\n): Promise<void> {\n  return new Promise((resolve, reject) => {\n    // Derives backoff from given end time, normalizing negative numbers to zero.\n    const backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\n\n    const timeout = setTimeout(resolve, backoffMillis);\n\n    // Adds liste'use strict';

var GetIntrinsic = require('get-intrinsic');

var $TypeError = GetIntrinsic('%TypeError%');

var $byteLength = require('array-buffer-byte-length');

var isArrayBuffer = require('is-array-buffer');

var availableTypedArrays = require('available-typed-arrays')();

// https://262.ecma-international.org/6.0/#sec-isdetachedbuffer

module.exports = function IsDetachedBuffer(arrayBuffer) {
	if (!isArrayBuffer(arrayBuffer)) {
		throw new $TypeError('Assertion failed: `arrayBuffer` must be an Object with an [[ArrayBufferData]] internal slot');
	}
	if ($byteLength(arrayBuffer) === 0) {
		try {
			new global[availableTypedArrays[0]](arrayBuffer); // eslint-disable-line no-new
		} catch (error) {
			return !!error && error.name === 'TypeError';
		}
	}
	return false;
};
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 /**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Auth } from '../../model/public_types';
export interface CreateAuthUriRequest {
    identifier: string;
    continueUri: string;
    tenantId?: string;
}
export interface CreateAuthUriResponse {
    signinMethods: string[];
}
export declare function createAuthUri(auth: Auth, request: CreateAuthUriRequest): Promise<CreateAuthUriResponse>;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ner, rather than sets onabort, because signal is a shared object.\n    signal.addEventListener(() => {\n      clearTimeout(timeout);\n\n      // If the request completes before this timeout, the rejection has no effect.\n      reject(\n        ERROR_FACTORY.create(ErrorCode.FETCH_THROTTLE, {\n          throttleEndTimeMillis\n        })\n      );\n    });\n  });\n}\n\ntype RetriableError = FirebaseError & { customData: { httpStatus: string } };\n/**\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\n */\nfunction isRetriableError(e: Error): e is RetriableError {\n  if (!(e instanceof FirebaseError) || !e.customData) {\n    return false;\n  }\n\n  // Uses string index defined by ErrorData, which FirebaseError implements.\n  const httpStatus = Number(e.customData['httpStatus']);\n\n  return (\n    httpStatus === 429 ||\n    httpStatus === 500 ||\n    httpStatus === 503 ||\n    httpStatus === 504\n  );\n}\n\n/**\n * Decorates a Client with retry logic.\n *\n * <p>Comparable to CachingClient, but uses backoff logic instead of cache max age and doesn't cache\n * responses (because the SDK has no use for error responses).\n */\nexport class RetryingClient implements RemoteConfigFetchClient {\n  constructor(\n    private readonly client: RemoteConfigFetchClient,\n    private readonly storage: Storage\n  ) {}\n\n  async fetch(request: FetchRequest): Promise<FetchResponse> {\n    const throttleMetadata = (await this.storage.getThrottleMetadata()) || {\n      backoffCount: 0,\n      throttleEndTimeMillis: Date.now()\n    };\n\n    return this.attemptFetch(request, throttleMetadata);\n  }\n\n  /**\n   * A recursive helper for attempting a fetch request repeatedly.\n   *\n   * @throws any non-retriable errors.\n   */\n  async attemptFetch(\n    request: FetchRequest,\n    { throttleEndTimeMillis, backoffCount }: ThrottleMetadata\n  ): Promise<FetchResponse> {\n    // Starts with a (potentially zero) timeout to support resumption from stored state.\n    // Ensures the throttle end time is honored if the last attempt timed out.\n    // Note the SDK will never make a request if the fetch timeout expires at this point.\n    await setAbortableTimeout(request.signal, throttleEndTimeMillis);\n\n    try {\n      const response = await this.client.fetch(request);\n\n      // Note the SDK only clears throttle state if response is success or non-retriable.\n      await this.storage.deleteThrottleMetadata();\n\n      return response;\n    } catch (e) {\n      if (!isRetriableError(e as Error)) {\n        throw e;\n      }\n\n      // Increments backoff state.\n      const throttleMetadata = {\n        throttleEndTimeMillis:\n          Date.now() + calculateBackoffMillis(backoffCount),\n        backoffCount: backoffCount + 1\n      };\n\n      // Persists state.\n      await this.storage.setThrottleMetadata(throttleMetadata);\n\n      return this.attemptFetch(request, throttleMetadata);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport {\n  RemoteConfig as RemoteConfigType,\n  FetchStatus,\n  RemoteConfigSettings\n} from './public_types';\nimport { StorageCache } from './storage/storage_cache';\nimport { RemoteConfigFetchClient } from './client/remote_config_fetch_client';\nimport { Storage } from './storage/storage';\nimport { Logger } from '@firebase/logger';\n\nconst DEFAULT_FETCH_TIMEOUT_MILLIS = 60 * 1000; // One minute\nconst DEFAULT_CACHE_MAX_AGE_MILLIS = 12 * 60 * 60 * 1000; // Twelve hours.\n\n/**\n * Encapsulates business logic mapping network and storage dependencies to the public SDK API.\n *\n * See {@link https://github.com/FirebasePrivate/firebase-js-sdk/blob/master/packages/firebase/index.d.ts|interface documentation} for method descriptions.\n */\nexport class RemoteConfig implements RemoteConfigType {\n  /**\n   * Tracks completion of initialization promise.\n   * @internal\n   */\n  _isInitializationComplete = false;\n\n  /**\n   * De-duplicates initialization calls.\n   * @internal\n   */\n  _initializePromise?: Promise<void>;\n\n  settings: RemoteConfigSettings = {\n    fetchTimeoutMillis: DEFAULT_FETCH_TIMEOUT_MILLIS,\n    minimumFetchIntervalMillis: DEFAULT_CACHE_MAX_AGE_MILLIS\n  };\n\n  defaultConfig: { [key: string]: string | number | boolean } = {};\n\n  get fetchTimeMillis(): number {\n    return this._storageCache.getLastSuccessfulFetchTimestampMillis() || -1;\n  }\n\n  get lastFetchStatus(): FetchStatus {\n    return this._storageCache.getLastFetchStatus() || 'no-fetch-yet';\n  }\n\n  constructor(\n    // Required by FirebaseServiceFactory interface.\n    readonly app: FirebaseApp,\n    // JS doesn't support private yet\n    // (https://github.com/tc39/proposal-class-fields#private-fields), so we hint using an\n    // underscore prefix.\n    /**\n     * @internal\n     */\n    readonly _client: RemoteConfigFetchClient,\n    /**\n     * @internal\n     */\n    readonly _storageCache: StorageCache,\n    /**\n     * @internal\n     */\n    readonly _storage: Storage,\n    /**\n     * @internal\n     */\n    readonly _logger: Logger\n  ) {}\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FetchStatus } from '@firebase/remote-config-types';\nimport {\n  FetchResponse,\n  FirebaseRemoteConfigObject\n} from '../client/remote_config_fetch_client';\nimport { ERROR_FACTORY, ErrorCode } from '../errors';\nimport { FirebaseError } from '@firebase/util';\n\n/**\n * Converts an error event associated with a {@link IDBRequest} to a {@link FirebaseError}.\n */\nfunction toFirebaseError(event: Event, errorCode: ErrorCode): FirebaseError {\n  const originalError = (event.target as IDBRequest).error || undefined;\n  return ERROR_FACTORY.create(errorCode, {\n    originalErrorMessage: originalError && (originalError as Error)?.message\n  });\n}\n\n/**\n * A general-purpose store keyed by app + namespace + {@link\n * ProjectNamespaceKeyFieldValue}.\n *\n * <p>The Remote Config SDK can be used with multiple app installations, and each app can interact\n * with multiple namespaces, so this store uses app (ID + name) and namespace as common parent keys\n * for a set of key-value pairs. See {@link Storage#createCompositeKey}.\n *\n * <p>Visible for testing.\n */\nexport const APP_NAMESPACE_STORE = 'app_namespace_store';\n\nconst DB_NAME = 'firebase_remote_config';\nconst DB_VERSION = 1;\n\n/**\n * Encapsulates metadata concerning throttled fetch requests.\n */\nexport interface ThrottleMetadata {\n  // The number of times fetch has backed off. Used for resuming backoff after a timeout.\n  backoffCount: number;\n  // The Unix timestamp in milliseconds when callers can retry a request.\n  throttleEndTimeMillis: number;\n}\n\n/**\n * Provides type-safety for the \"key\" field used by {@link APP_NAMESPACE_STORE}.\n *\n * <p>This seems like a small price to avoid potentially subtle bugs caused by a typo.\n */\ntype ProjectNamespaceKeyFieldValue =\n  | 'active_config'\n  | 'active_config_etag'\n  | 'last_fetch_status'\n  | 'last_successful_fetch_timestamp_millis'\n  | 'last_successful_fetch_response'\n  | 'settings'\n  | 'throttle_metadata';\n\n// Visible for testing.\nexport function openDatabase(): Promise<IDBDatabase> {\n  return new Promise((resolve, reject) => {\n    try {\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n      request.onerror = event => {\n        reject(toFirebaseError(event, ErrorCode.STORAGE_OPEN));\n      };\n      request.onsuccess = event => {\n        resolve((event.target as IDBOpenDBRequest).result);\n      };\n      request.onupgradeneeded = event => {\n        const db = (event.target as IDBOpenDBRequest).result;\n\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (event.oldVersion) {\n          case 0:\n            db.createObjectStore(APP_NAMESPACE_STORE, {\n              keyPath: 'compositeKey'\n            });\n        }\n      };\n    } catch (error) {\n      reject(\n        ERROR_FACTORY.create(ErrorCode.STORAGE_OPEN, {\n          originalErrorMessage: (error as Error)?.message\n        })\n      );\n    }\n  });\n}\n\n/**\n * Abstracts data persistence.\n */\nexport class Storage {\n  /**\n   * @param appId enables storage segmentation by app (ID + name).\n   * @param appName enables storage segmentation by app (ID + name).\n   * @param namespace enables storage segmentation by namespace.\n   */\n  constructor(\n    private readonly appId: string,\n    private readonly appName: string,\n    private readonly namespace: string,\n    private readonly openDbPromise = openDatabase()\n  ) {}\n\n  getLastFetchStatus(): Promise<FetchStatus | undefined> {\n    return this.get<FetchStatus>('last_fetch_status');\n  }\n\n  setLastFetchStatus(status: FetchStatus): Promise<void> {\n    return this.set<FetchStatus>('last_fetch_status', status);\n  }\n\n  // This is comparable to a cache entry timestamp. If we need to expire other data, we could\n  // consider adding timestamp to all storage records and an optional max age arg to getters.\n  getLastSuccessfulFetchTimestampMillis(): Promise<number | undefined> {\n    return this.get<number>('last_successful_fetch_timestamp_millis');\n  }\n\n  setLastSuccessfulFetchTimestampMillis(timestamp: number): Promise<void> {\n    return this.set<number>(\n      'last_successful_fetch_timestamp_millis',\n      timestamp\n    );\n  }\n\n  getLastSuccessfulFetchResponse(): Promise<FetchResponse | undefined> {\n    return this.get<FetchResponse>('last_successful_fetch_response');\n  }\n\n  setLastSuccessfulFetchResponse(response: FetchResponse): Promise<void> {\n    return this.set<FetchResponse>('last_successful_fetch_response', response);\n  }\n\n  getActiveConfig(): Promise<FirebaseRemoteConfigObject | undefined> {\n    return this.get<FirebaseRemoteConfigObject>('active_config');\n  }\n\n  setActiveConfig(config: FirebaseRemoteConfigObject): Promise<void> {\n    return this.set<FirebaseRemoteConfigObject>('active_config', config);\n  }\n\n  getActiveConfigEtag(): Promise<string | undefined> {\n    return this.get<string>('active_config_etag');\n  }\n\n  setActiveConfigEtag(etag: string): Promise<void> {\n    return this.set<string>('active_config_etag', etag);\n  }\n\n  getThrottleMetadata(): Promise<ThrottleMetadata | undefined> {\n    return this.get<ThrottleMetadata>('throttle_metadata');\n  }\n\n  setThrottleMetadata(metadata: ThrottleMetadata): Promise<void> {\n    return this.set<ThrottleMetadata>('throttle_metadata', metadata);\n  }\n\n  deleteThrottleMetadata(): Promise<void> {\n    return this.delete('throttle_metadata');\n  }\n\n  async get<T>(key: ProjectNamespaceKeyFieldValue): Promise<T | undefined> {\n    const db = await this.openDbPromise;\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([APP_NAMESPACE_STORE], 'readonly');\n      const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n      const compositeKey = this.createCompositeKey(key);\n      try {\n        const request = objectStore.get(compositeKey);\n        request.onerror = event => {\n          reject(toFirebaseError(event, ErrorCode.STORAGE_GET));\n        };\n        request.onsuccess = event => {\n          const result = (event.target as IDBRequest).result;\n          if (result) {\n            resolve(result.value);\n          } else {\n            resolve(undefined);\n          }\n        };\n      } catch (e) {\n        reject(\n          ERROR_FACTORY.create(ErrorCode.STORAGE_GET, {\n            originalErrorMessage: (e as Error)?.message\n          })\n        );\n      }\n    });\n  }\n\n  async set<T>(key: ProjectNamespaceKeyFieldValue, value: T): Promise<void> {\n    const db = await this.openDbPromise;\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');\n      const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n      const compositeKey = this.createCompositeKey(key);\n      try {\n        const request = objectStore.put({\n          compositeKey,\n          value\n        });\n        request.onerror = (event: Event) => {\n          reject(toFirebaseError(event, ErrorCode.STORAGE_SET));\n        };\n        request.onsuccess = () => {\n          resolve();\n        };\n      } catch (e) {\n        reject(\n          ERROR_FACTORY.create(ErrorCode.STORAGE_SET, {\n            originalErrorMessage: (e as Error)?.message\n          })\n        );\n      }\n    });\n  }\n\n  async delete(key: ProjectNamespaceKeyFieldValue): Promise<void> {\n    const db = await this.openDbPromise;\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');\n      const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n      const compositeKey = this.createCompositeKey(key);\n      try {\n        const request = objectStore.delete(compositeKey);\n        request.onerror = (event: Event) => {\n          reject(toFirebaseError(event, ErrorCode.STORAGE_DELETE));\n        };\n        request.onsuccess = () => {\n          resolve();\n        };\n      } catch (e) {\n        reject(\n          ERROR_FACTORY.create(ErrorCode.STORAGE_DELETE, {\n            originalErrorMessage: (e as Error)?.message\n          })\n        );\n      }\n    });\n  }\n\n  // Facilitates composite key functionality (which is unsupported in IE).\n  createCompositeKey(key: ProjectNamespaceKeyFieldValue): string {\n    return [this.appId, this.appName, this.namespace, key].join();\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FetchStatus } from '@firebase/remote-config-types';\nimport { FirebaseRemoteConfigObject } from '../client/remote_config_fetch_client';\nimport { Storage } from './storage';\n\n/**\n * A memory cache layer over storage to support the SDK's synchronous read requirements.\n */\nexport class StorageCache {\n  constructor(private readonly storage: Storage) {}\n\n  /**\n   * Memory caches.\n   */\n  private lastFetchStatus?: FetchStatus;\n  private lastSuccessfulFetchTimestampMillis?: number;\n  private activeConfig?: FirebaseRemoteConfigObject;\n\n  /**\n   * Memory-only getters\n   */\n  getLastFetchStatus(): FetchStatus | undefined {\n    return this.lastFetchStatus;\n  }\n\n  getL-24.752 24.752-24.752 5.542 0 10.655 1.858 14.775 4.973l-12.418-29.744z"}}]})(props);
};
module.exports.GiCardJackDiamonds = function GiCardJackDiamonds (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119.436 36c-16.126 0-29.2 17.237-29.2 38.5v363c0 21.263 13.074 38.5 29.2 38.5h275.298c16.126 0 29.198-17.237 29.198-38.5v-363c0-21.263-13.072-38.5-29.198-38.5H119.436zm26.884 3.717l47.393 58.27-47.393 58.286-47.375-58.287 47.375-58.27zm81.996 128.972h77.743v8.915h-11.055c-4.359 0-7.489.793-9.39 2.378-1.823 1.585-2.735 3.883-2.735 6.895v113.998c0 8.797-2.139 16.76-6.418 23.893-4.28 7.053-10.541 12.68-18.783 16.88-8.242 4.121-17.552 6.182-27.934 6.182-14.106 0-25.637-4.121-34.592-12.363-8.955-8.321-13.433-18.465-13.433-30.432 0-8.876 2.258-15.968 6.775-21.277 4.517-5.31 10.065-7.965 16.643-7.965 5.389 0 9.827 1.744 13.314 5.23 3.487 3.408 5.23 7.767 5.23 13.077 0 4.596-1.426 8.478-4.279 11.648-2.853 3.09-6.142 4.637-9.867 4.637-1.426 0-3.407-.397-5.943-1.19-2.14-.634-3.566-.95-4.28-.95-1.347 0-2.418.556-3.21 1.665-.872 1.11-1.307 2.773-1.307 4.992 0 5.944 2.972 11.372 8.916 16.286 6.023 4.834 13.392 7.251 22.11 7.251 9.905 0 17.711-3.409 23.417-10.224 5.706-6.895 8.559-16.482 8.559-28.766V186.877c0-3.09-1.07-5.389-3.21-6.895-2.06-1.585-5.626-2.378-10.698-2.378h-15.573v-8.915zm137.346 183.834l47.393 58.27-47.393 58.287-47.375-58.287 47.375-58.27z"}}]})(props);
};
module.exports.GiCardJackHearts = function GiCardJackHearts (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119.436 36c-16.126 0-29.2 17.237-29.2 38.5v363c0 21.263 13.074 38.5 29.2 38.5h275.298c16.126 0 29.198-17.237 29.198-38.5v-363c0-21.263-13.072-38.5-29.198-38.5H119.436zm57.214 16.174h.002c13.612-.318 26.502 9.855 27.073 28.043.976 31.09-47.738 52.945-52.31 70.015-4.998-18.649-51.414-37.573-52.45-70.015-.995-31.155 37.401-37.909 52.45-11.848 6.26-10.845 15.922-15.977 25.235-16.195zm51.666 116.515h77.743v8.915h-11.055c-4.359 0-7.489.793-9.39 2.378-1.823 1.585-2.735 3.883-2.735 6.895v113.998c0 8.797-2.139 16.76-6.418 23.893-4.28 7.053-10.541 12.68-18.783 16.88-8.242 4.121-17.552 6.182-27.934 6.182-14.106 0-25.637-4.121-34.592-12.363-8.955-8.321-13.433-18.465-13.433-30.432 0-8.876 2.258-15.968 6.775-21.277 4.517-5.31 10.065-7.965 16.643-7.965 5.389 0 9.827 1.744 13.314 5.23 3.487 3.408 5.23 7.767 5.23 13.077 0 4.596-1.426 8.478-4.279 11.648-2.853 3.09-6.142 4.637-9.867 4.637-1.426 0-3.407-.397-5.943-1.19-2.14-.634-3.566-.95-4.28-.95-1.347 0-2.416.554-3.208 1.663-.872 1.11-1.31 2.775-1.31 4.994 0 5.944 2.973 11.372 8.917 16.286 6.023 4.834 13.392 7.25 22.11 7.25 9.905 0 17.711-3.408 23.417-10.223 5.706-6.895 8.559-16.484 8.559-28.768v-112.57c0-3.09-1.07-5.389-3.21-6.895-2.06-1.585-5.626-2.378-10.698-2.378h-15.573v-8.915zM360.73 361.77c4.572 17.071 53.289 38.924 52.312 70.014-.57 18.189-13.462 28.362-27.074 28.043-9.314-.217-18.975-5.349-25.237-16.195-15.048 26.061-53.445 19.307-52.45-11.848 1.036-32.442 47.451-51.364 52.449-70.013z"}}]})(props);
};
module.exports.GiCardJackSpades = function GiCardJackSpades (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119.436 36c-16.126 0-29.2 17.237-29.2 38.5v363c0 21.263 13.074 38.5 29.2 38.5h275.298c16.126 0 29.198-17.237 29.198-38.5v-363c0-21.263-13.072-38.5-29.198-38.5H119.436zm26.654 8.047s46.336 33.838 47.27 63.068c.775 24.287-25.025 32.12-40.776 18.584l13.633 32.653h-40.115l13.613-32.633c-15.535 13.88-40.006 5.347-40.758-18.606-.88-28.01 47.133-63.066 47.133-63.066zm81.142 124.642h77.743v8.916H293.92c-4.359 0-7.489.792-9.39 2.377-1.823 1.585-2.735 3.883-2.735 6.895v113.998c0 8.797-2.139 16.76-6.418 23.893-4.28 7.053-10.541 12.68-18.783 16.88-8.242 4.121-17.552 6.182-27.934 6.182-14.106 0-25.637-4.121-34.592-12.363-8.955-8.321-13.433-18.465-13.433-30.432 0-8.876 2.258-15.968 6.775-21.277 4.517-5.31 10.065-7.965 16.643-7.965 5.389 0 9.827 1.744 13.314 5.23 3.487 3.408 5.23 7.767 5.23 13.077 0 4.596-1.426 8.478-4.279 11.648-2.853 3.09-6.142 4.637-9.867 4.637-1.426 0-3.407-.397-5.943-1.19-2.14-.634-3.566-.95-4.28-.95-1.347 0-2.416.556-3.208 1.665-.872 1.11-1.31 2.773-1.31 4.992 0 5.944 2.973 11.372 8.917 16.286 6.023 4.834 13.392 7.251 22.11 7.251 9.905 0 17.711-3.409 23.417-10.224 5.706-6.895 8.559-16.482 8.559-28.766V186.877c0-3.09-1.07-5.389-3.21-6.895-2.06-1.585-5.626-2.377-10.698-2.377h-15.573v-8.916zM345.78 353.65h40.116L372.262 386.3c15.75-13.536 41.551-5.701 40.775 18.586-.933 29.23-47.271 63.068-47.271 63.068s-48.01-35.059-47.131-63.068c.751-23.953 25.222-32.485 40.758-18.604l-13.614-32.635z"}}]})(props);
};
module.exports.GiCardJoker = function GiCardJoker (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119.436 36c-16.126 0-29.2 17.237-29.2 38.5v363c0 21.263 13.074 38.5 29.2 38.5h275.298c16.126 0 29.198-17.237 29.198-38.5v-363c0-21.263-13.072-38.5-29.198-38.5zm26.369 10.951l11.002 32.856 34.648.312-27.848 20.617 10.41 33.05-28.212-20.114-28.215 20.113L128 100.736 100.152 80.12l34.649-.312zM363.979 161.84c7.127 9.459 12.739 20.689 16.832 32.04 3.8 10.544 6.197 21.211 6.668 31.02-.163 19.015-3.915 23.274-14.557 36.934l-6.703-11.48c-10.85-13.106-30.779-48.4-47.383-43.672-6.521 6.11-8.996 13.37-10.313 20.802 2.898 8.8 4.477 18.43 4.477 28.516 0 15.293-3.615 29.54-9.996 41.416 22.643 4.537 57.927 19.332 57.973 39.223-.27 3.783-1.835 7.68-4.362 10.42-10.743 12.528-36.958 4.125-45.2 10.072.796 6.947 4.112 14.118 4.355 20.174.136 4.36-1.768 10.58-6.508 13.996-5.67 4.087-12.968 4.551-18.52 3.045C279.94 392.226 272 379.649 256 377c-13.544 3.491-22.412 13.87-34.742 17.346-5.552 1.506-12.85 1.042-18.52-3.045-4.74-3.417-6.644-9.636-6.508-13.996-.058-7.142 4.107-13.794 4.356-20.174-15.741-7.788-33.816 1.97-45.201-10.072-2.527-2.74-4.093-6.637-4.362-10.42 6.146-27.341 35.374-34.684 57.973-39.223C202.615 285.54 199 271.293 199 256c0-11.489 2.047-22.385 5.764-32.135-2.357-7.923-3.441-15.988-9.438-22.441-8.758-.925-14.079 6.897-17.842 12.63-11.683 19.5-18.718 30.606-32.88 46.192-16.604-23.4-19.314-49.29-13.157-70.988 6.065-20.331 19.17-38.798 37.926-47.924 21.216-9.766 39.872-10.03 58.885.203 5.163-13.053 10.4-25.65 18.035-36.209 9.625-13.31 23.8-25.631 43.707-25.295 38.8.656 73.993 51.156 73.979 81.807zm-72.22-63.893c-35.759 2.409-44.771 44.746-55.189 71.29l-9.447-7.087c-18.428-12.31-31.076-13.732-49.875-4.63-12.924 6.288-23.701 20.62-28.553 36.882-3.38 11.329-3.765 23.225-.949 33.645 9.45-13.549 15.806-30.08 28.317-39.178 7.486-7.975 26.27-8.498 35.45 3.897 4.838 7.02 7.437 14.54 9.5 22.234h72.165c.592-1.944 1.067-3.762 2.017-6.033 2.956-7.064 7.765-16.266 18.395-19.504 18.09-3.862 32.494 7.106 43.498 18.514 4.517 4.717 8.492 9.696 12.098 14.517-.69-6.798-2.477-14.651-5.31-22.508-13.127-36.707-37.889-51.031-70.386-32.011 2.556-16.423 16.87-35.72 46.25-26.962-9.094-17.135-30.355-42.471-47.98-43.066zM220.644 233c-2.31 6.965-3.643 14.753-3.643 23 0 15.85 4.892 30.032 12.26 39.855C236.628 305.68 245.988 311 256 311c10.012 0 19.372-5.32 26.74-15.145C290.108 286.032 295 271.85 295 256c0-8.247-1.334-16.035-3.643-23zM232 280h48s-8 14-24 14-24-14-24-14zm-11.14 33.566c-13.86 3.34-50.369 8.9-51.842 21.42 9.621 1.947 20.446.838 28.998 2.235 5.993 1.018 12.82 3.323 17.285 9.517 3.375 4.683 3.577 10.103 3.037 14.21-.543 5.89-3.317 10.557-3.975 16.32 15.955-2.59 28.264-17.532 41.637-18.268 16-.702 29.313 17.402 41.637 18.268-.893-5.59-3.262-11.158-3.975-16.32-.54-4.107-.338-9.527 3.037-14.21 4.465-6.194 11.292-8.5 17.285-9.517 9.742-2.229 19.975.396 28.998-2.235-5.77-13.125-39.813-19.454-51.841-21.42C281.665 323.01 269.45 329 256 329c-13.452 0-25.665-5.991-35.14-15.434zm117.122 64.649l28.213 20.113 28.215-20.113L384 411.264l27.848 20.617-34.649.312-11.004 32.856-11.002-32.856-34.648-.312 27.848-20.617z"}}]})(props);
};
module.exports.GiCardKingClubs = function GiCardKingClubs (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119.436 36c-16.126 0-29.2 17.237-29.2 38.5v363c0 21.263 13.074 38.5 29.2 38.5h275.298c16.126 0 29.198-17.237 29.198-38.5v-363c0-21.263-13.072-38.5-29.198-38.5H119.436zm26.832 8.408v.002h.015c13.587.01 24.442 10.853 24.442 24.442 0 5.71-2.003 10.997-5.266 15.173 1.12-.158 2.232-.31 3.396-.31 13.595 0 24.458 11.157 24.458 24.752 0 13.594-10.863 24.752-24.458 24.752-5.76 0-11.08-2.048-15.294-5.422l12.609 30.193h-40.117l12.42-29.744c-4.12 3.115-9.233 4.973-14.776 4.973-13.594 0-24.752-11.16-24.752-24.754 0-13.595 11.158-24.752 24.752-24.752 1.059 0 2.059.184 3.082.312-3.215-4.16-5.248-9.509-5.248-15.173 0-13.589 11.15-24.434 24.737-24.444zM159.95 168.69h80.358v8.916H223.19c-3.645 0-6.458.95-8.44 2.852-1.98 1.902-2.972 4.32-2.972 7.252v81.664l66.213-70.728c3.804-4.121 5.705-8.004 5.705-11.649 0-2.774-1.308-5.032-3.924-6.775-2.615-1.744-6.894-2.616-12.837-2.616h-4.873v-8.916h72.154v8.916h-5.586c-4.834 0-10.145 1.427-15.93 4.28s-11.133 6.815-16.047 11.886l-40.773 42.438 58.367 86.062c3.25 4.835 6.617 8.282 10.104 10.342 3.486 1.981 7.608 2.973 12.363 2.973h6.418v8.916h-79.287v-8.916h9.033c6.577 0 10.936-.555 13.076-1.664 2.219-1.11 3.328-2.496 3.328-4.16 0-1.506-.475-3.012-1.426-4.518l-48.5-71.324-27.578 29.6v43.27c0 2.693.792 4.674 2.377 5.942 2.536 1.902 5.548 2.854 9.035 2.854h17.118v8.916H159.95v-8.916h15.453c3.963 0 6.895-.792 8.797-2.377 1.902-1.664 2.854-3.805 2.854-6.42V186.4c0-2.773-1.072-4.912-3.211-6.418-2.14-1.585-5.745-2.377-10.817-2.377h-13.076v-8.916zm185.844 185.323h40.117l-12.611 30.193c4.215-3.374 9.534-5.422 15.295-5.422 13.594 0 24.459 11.158 24.459 24.752 0 13.595-10.865 24.752-24.46 24.752-1.163 0-2.275-.152-3.396-.31 3.263 4.176 5.266 9.462 5.266 15.173 0 13.589-10.853 24.433-24.44 24.442h-.017c-13.588-.01-24.735-10.853-24.735-24.442 0-5.665 2.033-11.013 5.248-15.173-1.023.128-2.025.312-3.084.312-13.594 0-24.751-11.159-24.751-24.754 0-13.594 11.157-24.752 24.752-24.752 5.542 0 10.655 1.858 14.775 4.973l-12.418-29.744z"}}]})(props);
};
module.exports.GiCardKingDiamonds = function GiCardKingDiamonds (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119.436 36c-16.126 0-29.2 17.237-29.2 38.5v363c0 21.263 13.074 38.5 29.2 38.5h275.298c16.126 0 29.198-17.237 29.198-38.5v-363c0-21.263-13.072-38.5-29.198-38.5H119.436zm26.884 3.717l47.393 58.27-47.393 58.286-47.375-58.287 47.375-58.27zm14.715 128.972h80.358v8.916h-17.118c-3.645 0-6.458.95-8.44 2.852-1.98 1.902-2.972 4.32-2.972 7.252v81.664l66.213-70.728c3.804-4.121 5.705-8.004 5.705-11.649 0-2.774-1.308-5.032-3.924-6.775-2.615-1.744-6.894-2.616-12.837-2.616h-4.874v-8.916h72.155v8.916h-5.586c-4.834 0-10.145 1.427-15.93 4.28s-11.133 6.815-16.047 11.886l-40.773 42.438 58.367 86.062c3.25 4.835 6.617 8.282 10.104 10.342 3.486 1.981 7.608 2.973 12.363 2.973h6.418v8.914H264.93v-8.914h9.033c6.577 0 10.936-.555 13.076-1.664 2.219-1.11 3.328-2.496 3.328-4.16 0-1.506-.475-3.012-1.426-4.518l-48.5-71.324-27.578 29.6v43.27c0 2.693.792 4.674 2.377 5.942 2.536 1.902 5.549 2.854 9.035 2.854h17.118v8.914h-80.358v-8.914h15.453c3.963 0 6.895-.792 8.797-2.377 1.902-1.664 2.854-3.805 2.854-6.42V186.4c0-2.773-1.072-4.912-3.211-6.418-2.14-1.585-5.745-2.377-10.817-2.377h-13.076v-8.916zm204.627 183.834l47.393 58.27-47.393 58.287-47.375-58.287 47.375-58.27z"}}]})(props);
};
module.exports.GiCardKingHearts = function GiCardKingHearts (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119.436 36c-16.126 0-29.2 17.237-29.2 38.5v363c0 21.263 13.074 38.5 29.2 38.5h275.298c16.126 0 29.198-17.237 29.198-38.5v-363c0-21.263-13.072-38.5-29.198-38.5H119.436zm57.214 16.174h.002c13.612-.318 26.502 9.855 27.073 28.043.976 31.09-47.738 52.945-52.31 70.015-4.998-18.649-51.414-37.573-52.45-70.015-.995-31.156 37.401-37.91 52.45-11.848 6.26-10.846 15.922-15.977 25.235-16.195zm-15.615 116.515h80.358v8.916h-17.118c-3.645 0-6.458.95-8.44 2.852-1.98 1.902-2.972 4.32-2.972 7.252v81.664l66.213-70.728c3.804-4.121 5.705-8.004 5.705-11.649 0-2.774-1.308-5.032-3.924-6.775-2.615-1.744-6.894-2.616-12.837-2.616h-4.874v-8.916h72.155v8.916h-5.586c-4.834 0-10.145 1.427-15.93 4.28s-11.133 6.815-16.047 11.886l-40.773 42.438 58.367 86.062c3.25 4.835 6.617 8.282 10.104 10.342 3.486 1.981 7.608 2.973 12.363 2.973h6.418v8.914H264.93v-8.914h9.033c6.577 0 10.936-.555 13.076-1.664 2.219-1.11 3.328-2.496 3.328-4.16 0-1.506-.475-3.012-1.426-4.518l-48.5-71.324-27.578 29.6v43.27c0 2.693.792 4.674 2.377 5.942 2.536 1.902 5.549 2.854 9.035 2.854h17.118v8.914h-80.358v-8.914h15.453c3.963 0 6.895-.792 8.797-2.377 1.902-1.664 2.854-3.805 2.854-6.42V186.4c0-2.773-1.072-4.912-3.211-6.418-2.14-1.585-5.745-2.377-10.817-2.377h-13.076v-8.916zM360.73 361.77c4.572 17.071 53.289 38.924 52.312 70.014-.57 18.188-13.463 28.361-27.074 28.043h-.002c-9.313-.218-18.973-5.35-25.235-16.195-15.048 26.061-53.445 19.308-52.45-11.848 1.036-32.442 47.451-51.364 52.449-70.013z"}}]})(props);
};
module.exports.GiCardKingSpades = function GiCardKingSpades (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119.436 36c-16.126 0-29.2 17.237-29.2 38.5v363c0 21.263 13.074 38.5 29.2 38.5h275.298c16.126 0 29.198-17.237 29.198-38.5v-363c0-21.263-13.072-38.5-29.198-38.5H119.436zm26.654 8.047s46.336 33.837 47.27 63.068c.775 24.287-25.025 32.122-40.776 18.586l13.633 32.653h-40.115l13.613-32.635c-15.535 13.88-40.006 5.347-40.758-18.606-.88-28.01 47.133-63.066 47.133-63.066zm13.861 124.642h80.358v8.916H223.19c-3.645 0-6.458.95-8.44 2.852-1.98 1.902-2.972 4.32-2.972 7.252v81.664l66.213-70.728c3.804-4.121 5.705-8.004 5.705-11.649 0-2.774-1.308-5.032-3.924-6.775-2.615-1.744-6.894-2.616-12.837-2.616h-4.873v-8.916h72.154v8.916h-5.586c-4.834 0-10.145 1.427-15.93 4.28s-11.133 6.815-16.047 11.886l-40.773 42.438 58.367 86.062c3.25 4.835 6.617 8.282 10.104 10.342 3.486 1.981 7.608 2.973 12.363 2.973h6.418v8.914h-79.287v-8.914h9.033c6.577 0 10.936-.555 13.076-1.664 2.219-1.11 3.328-2.496 3.328-4.16 0-1.506-.475-3.012-1.426-4.518l-48.5-71.324-27.578 29.6v43.27c0 2.693.792 4.674 2.377 5.942 2.536 1.902 5.548 2.854 9.035 2.854h17.118v8.914H159.95v-8.914h15.453c3.963 0 6.895-.792 8.797-2.377 1.902-1.664 2.854-3.805 2.854-6.42V186.4c0-2.773-1.072-4.912-3.211-6.418-2.14-1.585-5.745-2.377-10.817-2.377h-13.076v-8.916zM345.78 353.65h40.116L372.262 386.3c15.75-13.536 41.551-5.701 40.775 18.586-.933 29.23-47.271 63.068-47.271 63.068s-48.01-35.059-47.131-63.068c.751-23.953 25.222-32.484 40.758-18.604l-13.614-32.635z"}}]})(props);
};
module.exports.GiCardPick = function GiCardPick (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M331.088 488.95l-101.23-47.053c-6.698-3.122-9.62-11.094-6.503-17.815l71.63-154.11c3.117-6.71 11.1-9.624 17.804-6.508l101.23 47.066c6.71 3.115 9.62 11.088 6.51 17.797l-71.64 154.11c-3.12 6.714-11.098 9.618-17.802 6.514zM86.8 472.134L19.596 316.04c-2.927-6.797.218-14.686 7.004-17.607l33.275-14.328 41.578 156.25c3.99 14.937 19.32 23.84 34.267 19.864l33.14-8.823-64.445 27.752c-6.798 2.92-14.687-.22-17.614-7.017zm28.774-35.535L71.87 272.362c-1.905-7.152 2.362-14.498 9.502-16.398l28.89-7.683-3.475 25.864c-2.06 15.313 8.68 29.423 24.01 31.488l67.774 9.135-27.586 92.934c-2.845 9.578-.313 19.486 5.83 26.472l-44.847 11.926c-7.146 1.906-14.493-2.35-16.393-9.5zm92.055-4.043l-13.603-4.042c-7.1-2.112-11.14-9.565-9.034-16.664l48.364-162.92c2.112-7.1 9.577-11.14 16.658-9.04l41.667 12.38.006-.006.112.035-.118-.03c-4.19 2.76-7.677 6.68-9.937 11.547L210.1 417.944c-2.194 4.733-2.96 9.772-2.47 14.61zm-4.846-131.957l-70.033-9.44c-7.328-.992-12.48-7.743-11.494-15.078l22.695-168.43c.987-7.33 7.75-12.48 15.06-11.496l110.65 14.912c7.322.99 12.48 7.748 11.488 15.07l-13.96 103.622-13.02-3.866c-14.828-4.408-30.412 4.066-34.808 18.878l-16.576 55.828zm253.322-8.668l-7.253-15.94 37.418-16.98 7.23 15.95-37.394 16.97zm-9.353-27.805l-32.792-72.222c11.484-2.738 22.354-7.624 32.026-14.41l32.726 72.133-31.96 14.5zm-83.41-88.155c-41.006-16.174-61.152-62.585-44.977-103.603 16.18-40.993 62.603-61.15 103.603-44.977 41.01 16.18 61.15 62.604 44.982 103.62-16.187 40.995-62.604 61.147-103.61 44.96zm86.378-51.78c12.434-31.488-3.038-67.135-34.55-79.563-31.493-12.427-67.14 3.045-79.58 34.544-12.427 31.5 3.05 67.16 34.557 79.58 31.5 12.43 67.146-3.043 79.574-34.56zm-30.106-16.96c1.96-22.547-12.634-42.758-33.676-48.653 3.86-.732 7.9-.956 12.014-.602 24.27 2.1 42.292 23.492 40.197 47.768-2.078 23.94-22.914 41.79-46.766 40.274 15.366-6.48 26.702-21.03 28.23-38.787z"}}]})(props);
};
module.exports.GiCardPickup = function GiCardPickup (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M272.824 24.318c-14.929.312-25.66 3.246-32.767 8.446L142.899 84.91l-54.106 73.514C77.42 175.98 85.518 210 121.112 188.197l38.9-51.351c49.476-42.711 150.484-23.032 102.586 62.591-23.53 49.582-12.457 73.79 17.76 83.95l13.812-46.381c23.95-53.825 68.502-63.51 66.684-106.905l107.303 7.725-.866-112.045zm-54.09 103.338c-17.41-.3-34.485 6.898-46.92 17.375l-39.044 51.33c10.713 8.506 21.413 3.959 32.125-6.363 12.626 6.394 22.365-3.522 30.365-23.297 3.317-13.489 8.21-23.037 23.475-39.045zm-32.617 88.324a13.49 13.49 0 0 0-5.232 1.235l-129.164 59.51c-6.784 3.13-9.763 11.202-6.633 17.992l85.27 185.08c3.132 6.783 11.205 9.779 18 6.635l129.15-59.504c6.796-3.137 9.777-11.198 6.647-18L198.87 223.86c-2.343-5.097-7.473-8.043-12.754-7.88zm-29.767 50.06c7.794.113 14.913 2.053 21.092 5.847 10.758 6.604 18.63 20.93 19.644 35.754.698 10.184-1.712 17.837-12.553 39.873-3.879 7.885-5.634 15.27-5.072 21.355.46 4.973.786 5.855 3.639 9.844l3.135 4.38-1.754.98c-.965.538-7.097 3.1-13.627 5.693-6.918 2.746-12.316 4.496-12.934 4.193-.583-.286-2.352-2.62-3.931-5.188-7.525-12.227-7.225-27.53.878-44.627 6.655-14.04 8.47-19.966 7.952-25.974-.815-9.44-6.743-16.478-14.834-17.617-6.021-.848-10.668.553-18.912 5.703-8.298 5.183-13.941 10.708-19.055 18.656-1.8 2.797-3.407 5.053-3.57 5.014-.164-.04-3.206-7.256-6.758-16.037l-6.46-15.967 3.23-3.666c5.809-6.598 11.758-11.166 22.226-17.065 13.44-7.573 26.273-11.314 37.664-11.15zm33.308 133.048c6.463.125 12.18 3.215 15.7 8.963 4.296 7.015 4.185 13.838-.334 20.752-2.89 4.42-8.953 8.313-15.04 9.654-15.132 3.335-28.038-9.343-23.726-23.307 1.817-5.885 5.325-9.937 11.273-13.02 4.104-2.125 8.25-3.117 12.127-3.042z"}}]})(props);
};
module.exports.GiCardPlay = function GiCardPlay (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M272.824 24.318c-14.929.312-25.66 3.246-32.767 8.446L142.898 84.91l-54.105 73.514C77.42 175.98 85.517 210 121.111 188.197l38.9-51.351c49.476-42.711 150.485-23.032 102.587 62.591-23.53 49.582-12.457 73.79 17.76 83.95l13.812-46.381c23.949-53.825 68.502-63.51 66.684-106.904l107.302 7.724-.865-112.045-194.467-1.463zm-54.09 103.338c-17.41-.3-34.486 6.898-46.92 17.375l-39.044 51.33c10.713 8.506 21.413 3.96 32.125-6.363 12.626 6.394 22.365-3.522 30.365-23.297 3.317-13.489 8.21-23.037 23.474-39.045zm-32.617 88.324a13.49 13.49 0 0 0-5.232 1.235L51.72 276.725c-6.784 3.13-9.763 11.202-6.633 17.992l85.27 185.08c3.131 6.783 11.204 9.779 18 6.635l129.15-59.504c6.796-3.137 9.776-11.198 6.646-18L198.871 223.86c-2.344-5.097-7.474-8.043-12.754-7.88z"}}]})(props);
};
module.exports.GiCardQueenClubs = function GiCardQueenClubs (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119.436 36c-16.126 0-29.2 17.237-29.2 38.5v363c0 21.263 13.074 38.5 29.2 38.5h275.298c16.126 0 29.198-17.237 29.198-38.5v-363c0-21.263-13.072-38.5-29.198-38.5H119.436zm26.832 8.408v.002h.015c13.587.01 24.442 10.853 24.442 24.442 0 5.71-2.003 10.997-5.266 15.173 1.12-.158 2.232-.31 3.396-.31 13.595 0 24.458 11.157 24.458 24.752 0 13.594-10.863 24.752-24.458 24.752-5.76 0-11.08-2.048-15.294-5.422l12.609 30.193h-40.117l12.42-29.744c-4.12 3.115-9.233 4.973-14.776 4.973-13.594 0-24.752-11.16-24.752-24.754 0-13.595 11.158-24.752 24.752-24.752 1.059 0 2.058.184 3.082.312-3.215-4.16-5.248-9.509-5.248-15.173 0-13.589 11.15-24.434 24.737-24.444zm98.558 120.596c14.978 0 28.647 3.804 41.01 11.412 12.363 7.529 22.27 18.385 29.719 32.57 7.449 14.106 11.174 29.916 11.174 47.43 0 16.008-2.933 30.274-8.797 42.795-5.785 12.521-14.898 23.972-27.34 34.353 1.268 3.25 2.654 7.688 4.16 13.315 2.774 10.54 5.429 17.394 7.965 20.564 2.536 3.17 5.428 4.754 8.678 4.754 3.011 0 5.586-1.703 7.726-5.111 2.219-3.329 3.408-8.914 3.567-16.76h7.132c-.079 14.265-2.854 24.764-8.322 31.5-5.468 6.736-12.6 10.106-21.396 10.106-8.163 0-14.82-3.29-19.971-9.868-5.072-6.498-8.44-19.018-10.104-37.562-4.438 1.11-8.717 1.941-12.838 2.496-4.12.555-8.044.832-11.77.832-14.74 0-28.37-3.804-40.892-11.412-12.442-7.687-22.346-18.663-29.716-32.928-7.291-14.344-10.938-30.51-10.938-48.5 0-25.518 8.283-47.31 24.846-65.379 15.057-16.404 33.76-24.607 56.107-24.607zm.356 9.035c-9.827 0-18.663 2.773-26.508 8.32-7.766 5.548-13.869 14.226-18.307 26.034-4.358 11.728-6.537 27.698-6.537 47.906 0 14.264 1.307 26.507 3.922 36.73 2.615 10.223 6.697 19.93 12.244 29.123-.158-3.645-.238-6.576-.238-8.795 0-9.826 3.132-17.91 9.392-24.25 6.34-6.34 14.621-9.51 24.844-9.51 10.302 0 18.94 3.448 25.914 10.342 5.23 5.23 10.144 14.304 14.74 27.221 4.28-8.083 7.41-16.839 9.391-26.27 1.981-9.43 2.97-21.24 2.97-35.425 0-19.97-2.178-35.74-6.536-47.31-4.359-11.65-10.501-20.248-18.426-25.796-7.925-5.547-16.88-8.32-26.865-8.32zm-1.545 114.83c-7.45 0-13.552 2.378-18.307 7.133-4.755 4.755-7.13 10.895-7.13 18.424 0 7.45 2.93 14.503 8.794 21.16 5.627 2.457 11.532 3.685 17.713 3.685 4.755 0 9.231-.594 13.432-1.783a46.815 46.815 0 0 0 11.888-5.23c-.158-14.265-2.021-24.606-5.588-31.026-4.517-8.241-11.451-12.363-20.802-12.363zm102.158 65.143h40.117l-12.611 30.193c4.215-3.374 9.535-5.422 15.295-5.422 13.594 0 24.459 11.158 24.459 24.752 0 13.595-10.865 24.752-24.46 24.752-1.163 0-2.275-.152-3.396-.31 3.263 4.176 5.266 9.462 5.266 15.173 0 13.589-10.853 24.433-24.44 24.442h-.017c-13.588-.01-24.735-10.853-24.735-24.442 0-5.665 2.033-11.013 5.248-15.173-1.023.128-2.025.312-3.084.312-13.594 0-24.751-11.159-24.751-24.754 0-13.594 11.157-24.752 24.752-24.752 5.542 0 10.655 1.858 14.775 4.973l-12.418-29.744z"}}]})(props);
};
module.exports.GiCardQueenDiamonds = function GiCardQueenDiamonds (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119.436 36c-16.126 0-29.2 17.237-29.2 38.5v363c0 21.263 13.074 38.5 29.2 38.5h275.298c16.126 0 29.198-17.237 29.198-38.5v-363c0-21.263-13.072-38.5-29.198-38.5H119.436zm26.884 3.717h.002l47.393 58.271-47.393 58.287-47.377-58.289 47.375-58.27zm99.59 125.287c14.978 0 28.65 3.804 41.012 11.412 12.363 7.529 22.267 18.387 29.717 32.572 7.45 14.106 11.175 29.916 11.175 47.43 0 16.008-2.932 30.272-8.796 42.793-5.786 12.521-14.9 23.972-27.342 34.353 1.268 3.25 2.656 7.688 4.162 13.315 2.774 10.54 5.427 17.394 7.963 20.564 2.536 3.17 5.428 4.756 8.678 4.756 3.01 0 5.586-1.703 7.726-5.111 2.22-3.329 3.408-8.916 3.566-16.762h7.133c-.079 14.265-2.852 24.766-8.32 31.502-5.468 6.736-12.602 10.104-21.398 10.104-8.163 0-14.82-3.29-19.971-9.868-5.072-6.498-8.44-19.018-10.104-37.562-4.438 1.11-8.717 1.941-12.838 2.496-4.12.555-8.042.832-11.767.832-14.74 0-28.372-3.804-40.893-11.412-12.442-7.687-22.348-18.663-29.718-32.928-7.291-14.344-10.936-30.51-10.936-48.5 0-25.518 8.28-47.31 24.844-65.379 15.057-16.404 33.76-24.607 56.107-24.607zm.358 9.035c-9.827 0-18.663 2.773-26.508 8.32-7.767 5.548-13.87 14.226-18.307 26.034-4.359 11.728-6.539 27.698-6.539 47.906 0 14.264 1.309 26.507 3.924 36.73 2.615 10.223 6.697 19.933 12.244 29.125-.158-3.645-.238-6.578-.238-8.797 0-9.826 3.13-17.91 9.39-24.25 6.34-6.34 14.621-9.51 24.844-9.51 10.302 0 18.94 3.448 25.914 10.342 5.23 5.23 10.144 14.304 14.74 27.221 4.28-8.083 7.41-16.839 9.391-26.27 1.981-9.43 2.973-21.238 2.973-35.423 0-19.97-2.179-35.743-6.537-47.313-4.359-11.65-10.501-20.247-18.426-25.795-7.925-5.547-16.88-8.32-26.865-8.32zm-1.545 114.83c-7.45 0-13.552 2.378-18.307 7.133-4.755 4.755-7.133 10.897-7.133 18.426 0 7.45 2.933 14.501 8.797 21.158 5.627 2.457 11.53 3.685 17.711 3.685 4.755 0 9.233-.594 13.434-1.783a46.804 46.804 0 0 0 11.886-5.23c-.158-14.265-2.02-24.606-5.586-31.026-4.517-8.241-11.451-12.363-20.802-12.363zm120.94 63.654h.001l47.39 58.272-47.39 58.287-47.377-58.289 47.375-58.27z"}}]})(props);
};
module.exports.GiCardQueenHearts = function GiCardQueenHearts (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119.436 36c-16.126 0-29.2 17.237-29.2 38.5v363c0 21.263 13.074 38.5 29.2 38.5h275.298c16.126 0 29.198-17.237 29.198-38.5v-363c0-21.263-13.072-38.5-29.198-38.5H119.436zm57.214 16.174h.002c13.612-.318 26.502 9.855 27.073 28.043.976 31.09-47.738 52.945-52.31 70.015-4.998-18.649-51.414-37.573-52.45-70.015-.995-31.156 37.401-37.91 52.45-11.848 6.26-10.846 15.922-15.977 25.235-16.195zm69.26 112.83c14.978 0 28.647 3.804 41.01 11.412 12.363 7.529 22.27 18.385 29.719 32.57 7.449 14.106 11.173 29.916 11.173 47.43 0 16.008-2.932 30.274-8.796 42.795-5.786 12.521-14.898 23.972-27.34 34.353 1.268 3.25 2.654 7.688 4.16 13.315 2.774 10.54 5.429 17.394 7.965 20.564 2.536 3.17 5.428 4.754 8.678 4.754 3.01 0 5.586-1.703 7.726-5.111 2.219-3.329 3.408-8.914 3.566-16.76h7.133c-.079 14.265-2.854 24.764-8.322 31.5-5.468 6.736-12.6 10.106-21.396 10.106-8.163 0-14.82-3.29-19.971-9.868-5.072-6.498-8.44-19.018-10.104-37.562-4.438 1.11-8.717 1.941-12.838 2.496-4.12.555-8.044.832-11.77.832-14.74 0-28.37-3.804-40.892-11.412-12.442-7.687-22.346-18.663-29.716-32.928-7.291-14.344-10.936-30.51-10.936-48.5 0-25.518 8.28-47.31 24.844-65.379 15.057-16.404 33.76-24.607 56.107-24.607zm.358 9.035c-9.827 0-18.665 2.773-26.51 8.32-7.767 5.548-13.869 14.226-18.307 26.034-4.358 11.728-6.537 27.698-6.537 47.906 0 14.264 1.307 26.507 3.922 36.73 2.615 10.223 6.697 19.93 12.244 29.123-.158-3.645-.238-6.576-.238-8.795 0-9.826 3.132-17.91 9.392-24.25 6.34-6.34 14.621-9.51 24.844-9.51 10.302 0 18.94 3.448 25.914 10.342 5.23 5.23 10.144 14.304 14.74 27.221 4.28-8.083 7.41-16.839 9.391-26.27 1.981-9.43 2.973-21.24 2.973-35.425 0-19.97-2.18-35.74-6.54-47.31-4.358-11.65-10.5-20.248-18.425-25.796-7.925-5.547-16.878-8.32-26.863-8.32zm-1.547 114.83c-7.45 0-13.552 2.378-18.307 7.133-4.755 4.755-7.13 10.895-7.13 18.424 0 7.45 2.932 14.503 8.796 21.16 5.627 2.457 11.53 3.685 17.711 3.685 4.755 0 9.232-.594 13.432-1.783a46.815 46.815 0 0 0 11.888-5.23c-.158-14.265-2.021-24.606-5.588-31.026-4.517-8.241-11.451-12.363-20.802-12.363zm116.008 72.9c4.572 17.071 53.289 38.924 52.312 70.014-.57 18.189-13.464 28.364-27.076 28.045l.002-.002c-9.314-.217-18.975-5.349-25.237-16.195-15.048 26.061-53.445 19.307-52.45-11.848 1.036-32.442 47.451-51.364 52.449-70.013z"}}]})(props);
};
module.exports.GiCardQueenSpades = function GiCardQueenSpades (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M119.436 36c-16.126 0-29.2 17.237-29.2 38.5v363c0 21.263 13.074 38.5 29.2 38.5h275.298c16.126 0 29.198-17.237 29.198-38.5v-363c0-21.263-13.072-38.5-29.198-38.5H119.436zm26.654 8.045s46.336 33.84 47.27 63.07c.775 24.287-25.025 32.12-40.776 18.584l13.633 32.653h-40.115l13.613-32.633c-15.535 13.88-40.006 5.347-40.758-18.606-.88-28.01 47.133-63.066 47.133-63.066v-.002zm98.736 120.959c14.978 0 28.647 3.804 41.01 11.412 12.363 7.529 22.27 18.385 29.719 32.57 7.449 14.106 11.174 29.916 11.174 47.43 0 16.008-2.933 30.274-8.797 42.795-5.785 12.521-14.898 23.972-27.34 34.353 1.268 3.25 2.654 7.688 4.16 13.315 2.774 10.54 5.429 17.394 7.965 20.564 2.536 3.17 5.428 4.754 8.678 4.754 3.011 0 5.586-1.703 7.726-5.111 2.219-3.329 3.408-8.914 3.567-16.76h7.132c-.079 14.265-2.854 24.764-8.322 31.5-5.468 6.736-12.6 10.106-21.396 10.106-8.163 0-14.82-3.29-19.971-9.868-5.072-6.498-8.44-19.018-10.104-37.562-4.438 1.11-8.717 1.941-12.838 2.496-4.12.555-8.044.832-11.77.832-14.74 0-28.37-3.804-40.892-11.412-12.442-7.687-22.346-18.663-29.716-32.928-7.291-14.344-10.936-30.51-10.936-48.5 0-25.518 8.28-47.31 24.844-65.379 15.057-16.404 33.76-24.607 56.107-24.607zm.356 9.035c-9.827 0-18.663 2.773-26.508 8.32-7.766 5.548-13.869 14.226-18.307 26.034-4.358 11.728-6.537 27.698-6.537 47.906 0 14.264 1.307 26.507 3.922 36.73 2.615 10.223 6.697 19.93 12.244 29.123-.158-3.645-.238-6.576-.238-8.795 0-9.826 3.132-17.91 9.392-24.25 6.34-6.34 14.621-9.51 24.844-9.51 10.302 0 18.94 3.448 25.914 10.342 5.23 5.23 10.144 14.304 14.74 27.221 4.28-8.083 7.41-16.839 9.391-26.27 1.981-9.43 2.973-21.24 2.973-35.425 0-19.97-2.18-35.74-6.54-47.31-4.358-11.65-10.5-20.248-18.425-25.796-7.925-5.547-16.88-8.32-26.865-8.32zm-1.545 114.83c-7.45 0-13.552 2.378-18.307 7.133-4.755 4.755-7.13 10.895-7.13 18.424 0 7.45 2.932 14.503 8.796 21.16 5.627 2.457 11.53 3.685 17.711 3.685 4.755 0 9.232-.594 13.432-1.783a46.814 46.814 0 0 0 11.888-5.23c-.158-14.265-2.021-24.606-5.588-31.026-4.517-8.241-11.451-12.363-20.802-12.363zm102.142 64.78h40.116L372.262 386.3c15.75-13.536 41.551-5.701 40.775 18.586-.933 29.23-47.271 63.068-47.271 63.068s-48.01-35.059-47.131-63.068c.751-23.953 25.222-32.484 40.758-18.604l-13.614-32.635z"}}]})(props);
};
module.exports.GiCardRandom = function GiCardRandom (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M386.688 487.75l-119.236-55.423c-7.898-3.673-11.334-13.065-7.66-20.976l84.374-181.523c3.667-7.904 13.07-11.334 20.963-7.667l119.24 55.434c7.9 3.673 11.33 13.065 7.656 20.964l-84.37 181.524c-3.678 7.904-13.076 11.334-20.968 7.667zM98.95 467.945L19.79 284.09c-3.448-8.007.255-17.302 8.25-20.744l39.196-16.872 48.975 184.044c4.694 17.588 22.755 28.078 40.36 23.39l39.032-10.386-75.907 32.686c-8.007 3.443-17.296-.255-20.744-8.262zm33.89-41.86L81.362 232.638c-2.24-8.42 2.78-17.078 11.19-19.312l34.033-9.052-4.098 30.465c-2.422 18.036 10.224 34.652 28.285 37.087l79.828 10.758-32.497 109.467c-3.345 11.28-.37 22.948 6.866 31.18l-52.82 14.05c-8.42 2.24-17.07-2.77-19.31-11.196zm108.428-4.76l-16.02-4.76c-8.36-2.49-13.12-11.267-10.644-19.627l56.97-191.9c2.484-8.36 11.28-13.12 19.622-10.65l49.073 14.583.008-.005.12.044-.133-.034c-4.93 3.254-9.04 7.868-11.705 13.605l-84.38 181.53c-2.587 5.586-3.486 11.517-2.915 17.218zm-5.707-155.43l-82.486-11.117c-8.633-1.166-14.704-9.12-13.538-17.758l26.73-198.39c1.16-8.633 9.125-14.698 17.74-13.538l130.327 17.563c8.627 1.166 14.692 9.125 13.532 17.752L311.42 182.46l-15.33-4.552c-17.467-5.197-35.826 4.784-41.004 22.232l-19.525 65.755zm-5.19-31.46c4.67-3.055 7.474-7.438 8.42-13.145.936-5.633-.357-10.617-3.866-14.945-3.51-4.414-8.39-7.14-14.656-8.178-6.344-1.057-11.93-.073-16.75 2.956-4.826 3.03-7.692 7.316-8.615 12.87-.898 5.386.425 10.42 3.97 15.082 3.565 4.504 8.525 7.285 14.863 8.34 6.35 1.057 11.893.062 16.634-2.98zm25.978-81.243c4.693-2.726 8.888-5.434 12.598-8.117 3.703-2.684 6.915-5.586 9.635-8.725 2.72-3.13 4.967-6.573 6.733-10.307 1.76-3.74 3.048-8.032 3.85-12.865 1.262-7.62 1.02-14.358-.735-20.234-1.75-5.87-4.693-10.94-8.833-15.22-4.135-4.27-9.24-7.753-15.318-10.43-6.07-2.684-12.804-4.633-20.174-5.86-7.692-1.28-15.3-1.602-22.815-.977-7.516.614-14.63 2.247-21.346 4.88l-5.95 35.802c6.813-4.25 13.77-7.104 20.855-8.567 7.09-1.475 13.726-1.7 19.913-.668 21.467 4.092 19.44 24.898 8.76 34.03-5.652 4.473-11.334 8.802-15.942 11.345-10.48 5.914-27.69 23.125-22.542 45.145l31.284 5.202c-7.11-17.757 11.663-29.462 20.028-34.434z"}}]})(props);
};
module.exports.GiCardboardBoxClosed = function GiCardboardBoxClosed (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M256 73.32L74.6 155.1l82.3 37.1 173.2-85.5L256 73.32zm95.4 42.98l-173.2 85.5 77.8 35.1 181.4-81.8-86-38.8zM61.7 169v182L247 434.6v-182L61.7 169zm388.6 0L265 252.6v182L450.3 351V169z"}}]})(props);
};
module.exports.GiCardboardBox = function GiCardboardBox (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M185.424 52.607L30.404 130.04l55.375 55.317 155.017-77.43-55.373-55.32zm141.152 0l-55.373 55.32 155.018 77.43 55.376-55.316-155.02-77.433zM256 120.45l-9 4.497v142.715l9 4.496 9-4.496V124.947l-9-4.496zM86.482 207.605l-57.59 71.917 139.545 77.45 72.358-72.286-154.313-77.08zm339.036 0l-154.313 77.08 72.358 72.287 139.544-77.45-57.59-71.916zM247 303.93l-75.436 75.36-78.562-43.6v44.058L247 456.67V303.93zm18 0v152.74l153.998-76.922v-44.06l-78.562 43.603L265 303.93z"}}]})(props);
};
module.exports.GiCargoCrane = function GiCargoCrane (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M306.875 18.22c-.47-.002-.935.014-1.406.03-.158.005-.313.024-.47.03-1.583.056-3.176.204-4.78.47-3.61.597-7.01 1.7-10.158 3.22L49.595 120.062c-.918.42-1.808.877-2.688 1.343-.598.318-1.2.63-1.78.97-13.697 7.67-22.918 21.836-24.188 37.655-.058.635-.094 1.27-.125 1.907-.363 7.292.943 14.76 4.156 21.844 10.908 24.058 39.464 34.588 64.25 23.407l.093-.03L321.375 90.968l.156-.095.158-.063c19.685-8.925 28.3-31.436 19.656-50.5-6.28-13.85-19.92-22.07-34.47-22.093zm.28 18.718c8.924.308 16.542 6.77 18.064 15.968 1.737 10.51-5.208 20.23-15.72 21.97-10.512 1.738-20.2-5.21-21.938-15.72-1.738-10.51 5.208-20.23 15.72-21.968 1.313-.218 2.6-.295 3.874-.25zM354 86.656c-5.762 8.854-14.006 16.267-24.28 21-.108.05-.206.108-.314.156l-16.47 8.25 57.533 97.907c7.09-11.768 19.637-19.107 33.06-19.845 1.59-.087 3.18-.07 4.783.03L354 86.656zM67.906 135.03c.484-.005.96.015 1.438.032 13.393.478 24.876 10.217 27.156 24 2.606 15.75-7.873 30.426-23.625 33.032-15.752 2.606-30.426-7.906-33.03-23.656-2.607-15.75 7.903-30.395 23.655-33 1.477-.245 2.955-.387 4.406-.407zm60.188 73.595l-16.813 8.438 7.814 21.625-50.78-8.22-.064-.187c-7.272-.066-14.432-1.293-21.22-3.593l59.5 163.344-.405.783.75.187 16.906 46.406c4.612-4.79 9.704-9.125 15.22-12.875l-10.28-28.217 51.624 12.562h.03c3.962-.504 8-.78 12.095-.78 2.655 0 5.272.128 7.874.342l-72.25-199.812zm277.437 4.094c-.365 0-.73.012-1.092.03-8.72.434-16.66 5.983-19.844 14.78-4.244 11.733 1.706 24.414 13.437 28.657 11.733 4.244 24.445-1.705 28.69-13.437 4.243-11.734-1.707-24.412-13.44-28.656-2.565-.93-5.186-1.376-7.75-1.375zm39.158 9.81c2.728 8.395 2.806 17.714-.407 26.595-.456 1.264-.994 2.497-1.56 3.688l27.936 5-4.375 51.25-19.405 11.562 9.563 16.063 23.53-14.032 4.126-2.437.406-4.783 6.313-73.937.937-10.78-2.03.124-45.033-8.313zm-80.094 12.376l-44 26.78-.094.033v.03l-.063.03.157.158 4.47 9.5 31.498 67.187 2.032 4.344 4.72.874 26.905 5 3.436-18.375-22.22-4.126-21.467-45.813 26.842-16.186c-7.77-7.738-12.248-18.393-12.218-29.438zM75.656 250.594l35.156 5.687-18.593 39.845-16.564-45.53zm52.406 12.906l18.344 50.78-37.812-9.06 19.47-41.72zm-26.093 59.344l35.31 8.47-19.03 36.31-16.28-44.78zm52.968 15.03l18.093 49.97-39.28-9.53 21.188-40.44zm37.53 88.907c-39.29 0-71.475 29.325-76.062 67.345h22.5c4.46-25.5 26.83-45.03 53.563-45.03 26.73 0 49.074 19.53 53.53 45.03h22.5c-4.587-38.02-36.74-67.344-76.03-67.344zm0 41c-16.555 0-30.22 11.145-34.312 26.345h68.594c-4.092-15.2-17.725-26.344-34.28-26.344z"}}]})(props);
};
module.exports.GiCargoCrate = function GiCargoCrate (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M247 16v89h9c14.9 0 23 11.7 23.8 23.6.4 6-1.2 11.5-4.7 15.4-3.5 4-9.1 7-19.1 7-5 0-11.1-2.8-15.6-7.4-4.6-4.5-7.4-10.6-7.4-15.6h-18c0 11 5.2 20.9 12.6 28.4 7.5 7.4 17.4 12.6 28.4 12.6 14 0 25.4-5 32.5-13 7.2-8.1 10-18.6 9.3-28.6-1.2-17.5-13.4-35.18-32.8-39.42V16h-18zm-47.9 140.5L61.34 247h32.7l114.86-75.5-9.8-15zm113.8 0l-9.8 15L418 247h32.6l-137.7-90.5zM41 265v222h430V265H41zm38 23h18v176H79V288zm48 0h18v176h-18V288zm48 0h18v176h-18V288zm48 0h18v176h-18V288zm48 0h18v176h-18V288zm48 0h18v176h-18V288zm48 0h18v176h-18V288zm48 0h18v176h-18V288z"}}]})(props);
};
module.exports.GiCargoShip = function GiCargoShip (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M80 23v18h23v14h18V41h23V23zm-8.2 50L42.38 279H135V144.5H95.5v-49H135V73zM185 137v46h78v-46zm96 0v46h78v-46zm96 0v46h78v-46zm-192 64v46h78v-46zm96 0v46h78v-46zm96 0v46h78v-46zm-192 64v46h78v-46zm96 0v46h19.3l32-32H359v-14zm96 0v14h78v-14zM27.22 297l24.11 108.5C76.75 398.1 105.7 391 128 391c24.2 0 46.2 8.6 67.2 16.6 21 8 41 15.4 60.8 15.4 19.8 0 39.8-7.4 60.8-15.4 19-7.2 38.9-15 60.5-16.4l-44.1-14.7 5.6-17 36.2 12V345h-17v-18h17v-30h-35.3l-32 32H154.4l-16-32zM393 297v30h17v18h-17v26.5l36.2-12 5.6 17-44 14.7c12.1.7 25.7 3.1 39.4 6.2 5.4-7.1 10.8-15.3 16.1-24 14.9-24.9 28.2-53.9 36.8-76.4zM128 407c-24.2 0-56.26 8.3-83.09 16.4-10.02 3-19.26 6-26.91 8.7v19c8.36-3 19.57-6.7 32.11-10.5C76.28 432.7 108.2 425 128 425c19.8 0 39.8 7.4 60.8 15.4s43 16.6 67.2 16.6c24.2 0 46.2-8.6 67.2-16.6 21-8 41-15.4 60.8-15.4 19.8 0 51.7 7.7 77.9 15.6 12.5 3.8 23.7 7.5 32.1 10.5v-19c-7.7-2.6-16.9-5.7-26.9-8.7-26.8-8.1-58.9-16.4-83.1-16.4-24.2 0-46.2 8.6-67.2 16.6-21 8-41 15.4-60.8 15.4-19.8 0-39.8-7.4-60.8-15.4S152.2 407 128 407zm0 36c-24.2 0-56.26 8.3-83.09 16.4-10.02 3-19.26 6-26.91 8.7v19c8.36-3 19.57-6.7 32.11-10.5C76.28 468.7 108.2 461 128 461c19.8 0 39.8 7.4 60.8 15.4s43 16.6 67.2 16.6c24.2 0 46.2-8.6 67.2-16.6 21-8 41-15.4 60.8-15.4 19.8 0 51.7 7.7 77.9 15.6 12.5 3.8 23.7 7.5 32.1 10.5v-19c-7.7-2.6-16.9-5.7-26.9-8.7-26.8-8.1-58.9-16.4-83.1-16.4-24.2 0-46.2 8.6-67.2 16.6-21 8-41 15.4-60.8 15.4-19.8 0-39.8-7.4-60.8-15.4S152.2 443 128 443z"}}]})(props);
};
module.exports.GiCarillon = function GiCarillon (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M385.094 18.03l4.25 37.814h-.22l3.063 27.343h.22L438.25 492.25h66.563V364.344L427.156 18.03h-42.062zm-296.625.095L10.812 364.47v127.905h66.562L123.25 83.187h.03l3.064-27.343h-.03l4.217-37.72H88.47zm56.718 37.72l-3.063 27.343h105.75v32c-10.452 4.037-17.97 14.21-17.97 26 0 4.962 1.337 9.633 3.657 13.687-9.215 3.742-16.44 10.183-23.375 19.97-12.268 17.314-22.33 46.215-33.406 87.56-9.713 36.27-23.063 54.097-32.81 66.908-9.75 12.81-15.285 19-15.282 40.03 0 3.104 1.746 6.535 7.78 10.938 6.036 4.405 15.845 8.82 28.126 12.408 24.56 7.173 58.89 11.304 94.594 11.312 35.703.008 70.067-4.083 94.625-11.25 12.278-3.583 22.092-8.004 28.125-12.406 6.032-4.402 7.75-7.86 7.75-10.97-.004-21.03-5.53-27.217-15.282-40.03-9.75-12.813-23.118-30.638-32.844-66.906-11.087-41.35-21.13-70.242-33.406-87.563-7.51-10.597-15.365-17.26-25.72-20.844 2.032-3.853 3.19-8.22 3.19-12.843 0-12.21-8.035-22.717-19.063-26.437V83.187h106.812l-3.063-27.343H145.188zM257.78 132c5.17 0 9.158 4.017 9.158 9.188 0 5.17-3.987 9.156-9.157 9.156s-9.155-3.986-9.155-9.156S252.61 132 257.78 132zm9.75 35.25c29.084 10.748 41.874 57.507 49.283 89.406 15.208 65.5 48.59 77.5 48.53 110.188-2.848 2.364-7.698 5.03-13.75 7.156-7.64 2.684-16.88 4.66-25.812 6.094 3.806-40.826-29.81-52.602-29.31-104.594.522-54.635-14.517-90.058-33.658-106.938 1.63-.302 3.2-.736 4.72-1.312zm17.345 254.78c-8.423.444-17.01.66-25.688.658-7.31-.002-14.548-.182-21.687-.5.75 12.437 11.06 22.28 23.688 22.28 12.683.003 23.022-9.923 23.687-22.437z"}}]})(props);
};
module.exports.GiCarnivalMask = function GiCarnivalMask (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M411.37 124.355c3.16 13.036 3.345 25.696 1.355 37.852-19.596 15.54-40.52 28.885-59.733 38.029l-1.36-.457c24.217-19.204 45.7-42.1 59.737-75.424zm-310.74 0c14.039 33.324 35.521 56.22 59.737 75.424-.455.154-.908.305-1.36.457-19.212-9.144-40.136-22.488-59.732-38.03-1.99-12.155-1.805-24.815 1.356-37.85zm367.022 11.137c-2.128 12.273-5.158 25.783-8.697 38.996C435.647 198.164 409.74 207.91 384 207.91c-1.774 0-3.725-.191-5.824-.53 31.882-17.768 64.556-43.5 89.476-71.888zm-423.304 0c24.92 28.389 57.594 54.12 89.476 71.889-2.099.338-4.05.529-5.824.529-25.74 0-51.647-9.745-74.955-33.422-3.539-13.213-6.57-26.723-8.697-38.996zm453.25 17.885c-7.066 35.468-21.193 73.969-43.196 106.25C421.706 307.597 372.623 373.844 304 368c-16 0-32-64-48-64s-32 64-48 64c-68.623 5.844-117.706-60.404-150.402-108.373-22.003-32.281-36.13-70.782-43.196-106.25C45.948 203.484 86.801 225.91 128 225.91c21.913 0 39.477-12.627 61.64-18.28 11.082-2.825 21.409-3.978 30.04-2.163 8.01 1.683 20.862 5.71 36.32 14.517 15.458-8.806 28.31-12.834 36.32-14.517 8.631-1.815 18.958-.662 30.04 2.164 22.163 5.652 39.727 18.279 61.64 18.279 41.2 0 82.052-22.426 113.598-72.533zm-147.244 95.535c-28.264-.086-62.951 5.168-62.346 12.435 5.812 69.834 97.853 16 97.976-3.693.039-6.125-16.292-8.683-35.63-8.742zm-188.708 0c-19.338.059-35.669 2.617-35.63 8.742.123 19.694 92.164 73.527 97.976 3.693.605-7.267-34.082-12.521-62.346-12.435zm251.292 107.597a256.804 256.804 0 0 0 14.63 6.62c16.182 6.737 35.272 12.676 56.069 16.693-5.14 1.657-10.72 3.207-17.07 4.342-19.914 3.559-44.712 4.621-69.042 2.095-12.442-1.291-24.758-3.542-36.261-6.787 18.97-4.771 36.193-12.712 51.673-22.963zm-313.875 0c15.48 10.251 32.702 18.192 51.673 22.963-11.503 3.245-23.82 5.496-36.261 6.787-24.33 2.526-49.128 1.464-69.041-2.095-6.352-1.135-11.93-2.685-17.07-4.342 20.796-4.017 39.886-9.956 56.068-16.693a256.8 256.8 0 0 0 14.63-6.62z"}}]})(props);
};
module.exports.GiCarnivoreMouth = function GiCarnivoreMouth (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M35.344 47.063c3.72 50.664 10.165 99.533 100.28 92.656-2.466-81.82-50.998-87.873-100.28-92.657zm412.094 8.78l-4.188 84.938c66.643-15.697 37.995-78.956 4.188-84.936zM285.875 170.47c-.567-.002-1.14.013-1.72.06-1.54.13-3.135.45-4.75.907-12.91 3.67-26.198 18.925-24.5 39.125.694 8.22 11.438 30.375 22.44 48.094 4.454 7.176 8.508 13.076 12.186 18.47 2.647-6.54 5.605-13.978 8.69-22.688 3.656-10.332 7.185-21.38 9.467-31.125 2.283-9.746 3.055-18.44 2.438-22.188-2.44-14.78-7.734-22.812-13.063-26.813-3.497-2.625-7.216-3.837-11.187-3.843zm68.72 2.25c-3.975-.05-7.713 1.114-11.22 3.686-5.345 3.92-10.69 11.883-13.25 26.625-.65 3.734.05 12.412 2.25 22.19 2.2 9.776 5.617 20.9 9.188 31.28 3.017 8.774 5.967 16.262 8.562 22.844 3.72-5.338 7.776-11.18 12.28-18.28 11.138-17.554 22.068-39.538 22.845-47.752v-.062c1.868-20.184-11.325-35.658-24.22-39.5-1.61-.48-3.178-.79-4.717-.938-.578-.055-1.152-.086-1.72-.093zm75.686 18.75c-.54-.02-1.09-.005-1.624.03-1.424.094-2.836.37-4.22.844-5.527 1.89-11.996 7.37-17.436 20.625-1.08 2.63-2.367 13.09-2.156 25.343.21 12.252 1.36 26.844 2.812 40.75 1.258 12.043 2.666 22.74 3.938 31.937 4.414-5.49 8.972-11.096 14.28-18.063 14.252-18.7 29.51-41.82 32.095-50.03 5.855-18.6-3.784-38.863-16-47.157-4.01-2.72-7.91-4.156-11.69-4.28zm-219.436 3.31c-3.782.075-7.695 1.464-11.72 4.126-12.262 8.112-22.052 28.226-16.343 46.906 1.13 3.7 5.977 12.356 12.564 21.657 6.586 9.3 14.868 19.74 22.937 29.436 6.238 7.496 11.668 13.632 16.814 19.47.62-9.29 1.314-19.916 1.78-31.97.55-14.162.813-28.992.376-41.5-.437-12.508-2.057-23.222-3.28-26.28-5.332-13.334-11.754-18.905-17.282-20.876-1.383-.493-2.795-.793-4.22-.906-.533-.043-1.084-.073-1.624-.063zm-66.375 32.407c-2.453.017-5.087.63-7.94 1.875-11.406 4.987-22.748 20.613-20.686 37.188.77 6.195 10.784 23.992 21.062 37.813 3.69 4.96 6.898 8.8 10.063 12.687 2.096-5.953 4.4-12.534 6.78-20.28 2.916-9.493 5.668-19.585 7.375-28.345 1.703-8.74 2.02-16.468 1.47-19.125-.002-.006 0-.025 0-.03-2.577-12.177-7.183-17.677-11.345-20.032-2.083-1.18-4.33-1.767-6.78-1.75zm24.155 121.282c-3.992 2.06-7.825 3.972-12.53 6.655-14.032 8-29.33 19.6-32.157 24.344-7.848 13.17-3.97 30.466 3.812 38.78 3.89 4.157 7.944 5.888 12.25 5.438 4.306-.45 10.18-3.32 16.906-12.72v-.03c1.37-1.912 4.006-8.585 5.813-16.688 1.806-8.103 3.206-17.8 4.25-27 .805-7.108 1.236-13.094 1.655-18.78zm223.844 5.686c-.895 7.812-1.907 16.832-2.75 27.156-.983 12-1.712 24.705-1.72 35.625-.008 10.92.98 20.412 2.188 24.032 4.544 13.623 10.658 19.552 16.062 21.842 5.404 2.29 11.33 1.567 17.688-2.125 12.714-7.383 23.674-26.89 19.062-45.875l-.063-.218c-.91-3.428-5.07-10.897-11.156-18.75-6.19-7.99-14.148-16.756-21.967-24.78-6.416-6.585-12.142-12.018-17.344-16.908zm-163.97 17c-5.757 4.13-12.516 9.088-19.688 14.813-8.564 6.835-17.29 14.394-24.062 21.436-6.77 7.042-11.36 13.99-12.22 16.97-5.408 18.723 4.71 38.753 17.126 46.75 6.208 3.997 12.142 4.993 17.625 2.968 5.485-2.026 11.82-7.648 16.94-21.03 2.968-7.76 4.864-34.22 4.81-56.69-.02-9.613-.282-17.953-.53-25.218zm49.5 14.03c-3.595 5.436-7.53 11.398-11.875 18.627-10.72 17.833-21.096 40.096-21.656 48.312-1.385 20.22 12.17 35.375 25.155 38.906 6.492 1.767 12.315.985 17.563-3.06 5.247-4.048 10.42-12.138 12.625-26.94.56-3.742-.38-12.405-2.813-22.124-2.434-9.72-6.086-20.772-9.906-31.062-3.232-8.706-6.34-16.137-9.094-22.656zm62.28.845c-2.487 6.602-5.313 14.09-8.186 22.876-3.407 10.416-6.642 21.58-8.688 31.375-2.045 9.798-2.614 18.49-1.906 22.22 2.793 14.716 8.295 22.628 13.72 26.5 5.422 3.872 11.278 4.457 17.686 2.47 12.816-3.98 25.754-19.555 23.563-39.72-.89-8.187-12.166-30.082-23.595-47.53-4.625-7.063-8.786-12.887-12.594-18.19z"}}]})(props);
};
module.exports.GiCarnivorousPlant = function GiCarnivorousPlant (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M260.252 29.83c-1.173-.01-2.345-.003-3.516.018-15.608.282-30.968 3.33-44.71 10.203-29.86 14.93-47.942 38.91-53.255 61.995-4.703 20.442-.065 39.793 15.7 54.012 44.847-57.15 108.49-91.395 155.475-109.645-13.033-6.054-28.6-11.46-45.144-14.312-8.09-1.396-16.34-2.203-24.548-2.27zm95.853 26.29l-1.26.42c-4.97 1.656-10.29 3.558-15.868 5.694l33.955 28.65c-5.9-12.806-12.63-26.41-16.827-34.765zm-41.98 16.566c-6.224 2.856-12.62 5.986-19.113 9.375l26.267 21.928-7.155-31.302zm20.648 9.556l8.018 35.078c7.872-2.74 15.732-5.547 23.585-8.414l-31.602-26.664zm-63.11 13.002c-7.805 4.763-15.627 9.92-23.352 15.48l28.053 16.176-4.7-31.656zm19.208 6.807l4.566 30.747c7.82-2.373 15.625-4.84 23.416-7.39l-27.98-23.356zm87.528 21.507c-60.87 22.443-122.75 41.984-187.195 51.957 11.394 13.965 29.036 23.11 49.475 27.61 25.326 5.58 54.222 3.755 76.476-3.663 22.008-7.335 40.552-22.244 51.358-38.452 8.73-13.097 12.104-26.365 9.886-37.45zm-139.275 2.65l-4.018 22.69c10.154-2.305 20.27-4.81 30.346-7.51l-26.327-15.18zm-19.668 7.846c-7.66 6.975-15.054 14.41-22.023 22.35 6.243-1.06 12.467-2.212 18.675-3.446l3.348-18.904zm-39.037 56.703c-2.14 5.79-4.03 11.735-5.47 17.728-2.922 12.143-4.647 24.74.17 37.76 6.585 17.802 22.853 28.142 37.896 31.912 15.042 3.77 30.214 3.44 44.193 3.442 13.98 0 26.77.376 34.5 2.474 7.153 1.942 8.95 2.96 10.61 7.922-.072.134-.01-.04-.174.264-.903 1.663-3.53 5.016-7.598 8.676-5.883 5.29-14.55 11.262-24.162 17.035-24.288.58-30.506-5.795-41.12-14.107l-11.097 14.17c6.312 4.943 14 10.76 25.473 14.406-8.186 4.046-15.986 7.626-22.626 10.56h77.357c7.303-4.77 14.19-9.85 20.247-15.3 5.977-5.374 11.27-11.087 15.17-18.276 3.9-7.19 6.304-16.948 3.477-26.522-5.36-18.145-21.255-29.536-36.125-33.572-14.87-4.036-29.893-3.73-43.93-3.732-14.035 0-27.078-.265-35.442-2.362-8.365-2.096-10.693-3.555-12.885-9.48-.578-1.563-1-8.258 1.066-16.85.355-1.478.783-3.02 1.24-4.582-11.666-5.26-22.25-12.368-30.772-21.568zm156.96 40.207c-.638-.004-1.283.014-1.937.055-6.265.39-12.135 2.447-17.614 5.336 6.668 3.108 13.134 7.306 18.84 12.64 1.62.002 9.167 2.677 15.008 6.348 5.937 3.73 10.566 7.574 10.566 7.574l11.52-13.832s-5.42-4.53-12.508-8.982c-6.644-4.176-14.322-9.08-23.875-9.14zm-237.04 33.152l-8.676 15.77s11.36 6.268 25.512 11.525c14.15 5.257 30.98 10.82 46.072 4.985 7.326-2.833 12.883-8.033 17.408-14.047-4.894-3.69-9.435-8.087-13.338-13.248-4.013 5.412-8.07 9.542-10.562 10.505-5.42 2.096-20.59-.342-33.31-5.068-12.722-4.725-23.106-10.422-23.106-10.422zM137 361v30h238v-30H137zm33.623 48l13.002 78h144.75l13.002-78H170.623z"}}]})(props);
};
module.exports.GiCarnyx = function GiCarnyx (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M356.598 24.355a143.974 143.974 0 0 0-3.58.006c-15.937.228-32.158 3.119-46.957 9.291-23.68 9.877-43.809 29.04-50.08 58.121-6.01 27.865.292 63.65 23.974 109.03l-63.342 88.062-10.484-8.105-11.01 14.24 10.979 8.486-33.946 47.194-11.572-8.524-10.674 14.494 11.735 8.643-37.733 52.459-7.703-5.668-10.668 14.496 7.861 5.785-26.007 36.158c-1.597 1.418-3.046 2.31-4.266 2.801-2.703 1.09-4.785.942-7.766-.361-5.96-2.607-13.698-11.664-17.861-20.502l-16.283 7.67c5.473 11.62 14.101 23.712 26.933 29.324 6.416 2.806 14.337 3.534 21.706.565 5.646-2.276 10.696-6.391 15.226-12.19l27.045-29.684 9.043 6.657 10.67-14.496-7.525-5.54 43.746-48.015 11.597 8.543 10.676-14.492-10.086-7.43 38.707-42.484 10.96 8.472 11.007-14.242-9.805-7.58L346.72 210.6c8.653-2.972 17.124-.227 29.138 3.928 12.752 4.411 28.84 10.011 47.801 4.983 6.223-1.65 11.707-7.906 12.307-13.764.6-5.858-1.321-10.51-3.549-14.943-1.155-2.299-2.48-4.532-3.893-6.682 14.058-1.92 28.436-7.121 40.325-12.77 8.903-4.23 16.088-8.428 21.101-13.62 2.507-2.597 5.743-5.873 4.803-12.182-.47-3.155-2.63-6.124-4.783-7.656-2.154-1.533-4.214-2.15-6.256-2.569l-.065-.013-.062-.012s-52.458-10.091-77.516-16.414a46.341 46.341 0 0 0-6.025-21.1l40.139-33.096-3.893-6.62c-10.068-17.124-31.294-26.984-55.264-31.376a144.499 144.499 0 0 0-24.43-2.338zm-.147 18.055c4.091.034 8.15.268 12.133.682l-.824 29.728a34.787 34.787 0 0 0-10.1-1.47c-.53 0-1.058.013-1.586.037-2.13.096-4.236.383-6.306.82l.828-29.71a128.014 128.014 0 0 1 5.855-.087zm-37.213 5.531l24.006 26.182c-5.843 2.191-11.268 5.489-15.967 9.22l-25.261-27.548c3.447-2.084 7.115-3.922 10.974-5.531a89.482 89.482 0 0 1 6.248-2.323zm81.842 3.803c6.044 2.853 11.102 6.169 14.805 9.65l-27.473 22.65c-3.752-3.142-7.849-5.736-12.086-7.806l24.754-24.494zm-42.277 37.867c.483-.003.955.013 1.414.05 1.05.082 2.033.272 2.93.575 7.015 2.373 14.103 6.915 18.771 12.774 4.668 5.858 7.195 12.7 5.98 21.683l-1.046 7.745 7.52 2.123c20.087 5.67 59.746 13.363 74.583 16.207-2.382 1.428-4.839 2.902-7.832 4.324-15.577 7.4-38.374 13.296-50.053 11.353l-28.511-4.744 20.779 20.092c3.742 3.618 10.114 11.357 12.996 17.092a18.928 18.928 0 0 1 1.336 3.506c-12.798 2.948-23.65-.626-35.928-4.873-12.722-4.4-27.652-9.763-43.672-2.94l-1.804.768-37.194 40.824-14.17-11.416 35.813-49.79-3.52-5.2c-2.182-3.225-4.96-9.765-6.07-16.77-1.11-7.005-.661-14.424 2.076-20.48l3.654-8.084-8.03-3.77c-9.475-4.447-17.19-12.002-23.47-22.67 14.457-3.522 25.264-1.694 40.795 3.969l5.188 1.893 4.035-3.768c6.463-6.031 16.186-10.426 23.43-10.473zm-3.782 25.764a13.667 13.67 0 0 0-13.666 13.67 13.667 13.67 0 0 0 13.666 13.668 13.667 13.67 0 0 0 13.668-13.668 13.667 13.67 0 0 0-13.668-13.67zm-62.292 25.988c-.396 4.972-.11 9.861.617 14.448.192 1.215.423 2.4.672 3.572l-12.096 1.894c-2.244-6.068-4.085-11.853-5.537-17.353l16.344-2.56zm-18.352 98.026l12.55 10.113-50.099 54.992-5.965-4.611 43.514-60.494z"}}]})(props);
};
module.exports.GiCarousel = function GiCarousel (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M285.4 45.61L340.5 119h59.1L285.4 45.61zm-58.8.01L112.4 119h59.1l55.1-73.38zm20.4 2.71L194 119h53V48.33zm18 0V119h53l-53-70.67zM46.56 137l23 46h1.82c1.16-14.3 5.01-27.9 10.57-39 1.23-2.5 2.54-4.8 3.95-7H46.56zm65.44 0c-1 0-2.9.6-5.6 3.1-2.7 2.5-5.7 6.6-8.35 11.9-4.19 8.4-7.42 19.5-8.58 31h61.03c-1.2-11.3-4.7-22-10-30-6.7-10.1-15.5-16-28.5-16zm38.9 0c1.6 1.9 3.2 3.9 4.6 6 7.7 11.5 11.9 25.6 13.1 40h15.1c2.3-15.6 10.6-30.1 21.9-41.4 1.6-1.6 3.3-3.1 5-4.6h-59.7zm105.1 0c-13 0-27.1 6.8-37.6 17.4-8.2 8.1-14.1 18.4-16.4 28.6h108c-2.3-10.2-8.2-20.5-16.4-28.6C283.1 143.8 269 137 256 137zm45.4 0c1.7 1.5 3.4 3 5 4.6 11.3 11.3 19.6 25.8 21.9 41.4h15.1c1.2-14.4 5.4-28.5 13.1-40 1.4-2.1 3-4.1 4.6-6h-59.7zm98.6 0c-13 0-21.8 5.9-28.5 16-5.3 8-8.8 18.7-10 30h61c-1.1-11.5-4.4-22.6-8.6-31-2.6-5.3-5.6-9.4-8.3-11.9-2.7-2.5-4.6-3.1-5.6-3.1zm26.1 0c1.4 2.2 2.8 4.5 4 7 5.5 11.1 9.4 24.7 10.5 39h1.8l23-46h-39.3zM119 201v78.2c6.2-.2 12.2-.2 18-.2v-78h-18zm256.4 0v78.2c6.2-.2 12.2-.2 18-.2v-78h-18zm-167.1 37.1c-14.7 2.5-22.9 11.7-30.8 23.1-4.4 6.5-8.4 13.5-12.9 19.8-4.6 6.4-9.8 12.5-17.9 15.5l-1.5.5h-1.6c-15 0-32.8 0-47.3 1.3-7.23.7-13.62 1.7-18.03 3-4.41 1.3-6.2 3.3-5.76 2.5-18.83 31.7-15.6 54.9-13.6 89.2 3.19.1 4.97.2 8.77.1 3.68 0 4.57-.1 7.01-.1 8.77-24.1 10.74-29.6 12.39-45.1l1.27-11.8 11.05 4.5c22.9 9.2 40.5 7.8 54.8-2.3l7.1-5.1 5.2 6.9c12 15.6 16.3 30.8 25.3 52.7h12.8c-2.2-20.7-4.5-47-19.1-65.4l-2.2-2.7.2-3.5c.9-13.7 5.7-25.6 14.2-37l5.4-7.3 7.3 5.5c3.2 2.5 11.1 5.1 18.8 7.2l4.4-13c-12.9-12.9-19.1-25.4-25.3-38.5zm256.4 0c-14.7 2.5-22.9 11.7-30.8 23.1-4.4 6.5-8.4 13.5-12.9 19.8-4.6 6.4-9.8 12.5-17.9 15.5l-1.5.5H400c-15 0-32.8 0-47.3 1.3-7.2.7-13.6 1.7-18 3s-6.2 3.3-5.8 2.5c-18.8 31.7-15.6 54.9-13.6 89.2 3.2.1 5 .2 8.8.1 3.7 0 4.5-.1 7-.1 8.8-24.1 10.7-29.6 12.4-45.1l1.2-11.8 11.1 4.5c22.9 9.2 40.5 7.8 54.8-2.3l7.1-5.1 5.2 6.9c12 15.6 16.3 30.8 25.3 52.7H461c-2.2-20.7-4.5-47-19.1-65.4l-2.2-2.7.2-3.5c.9-13.7 5.7-25.6 14.2-37l5.4-7.3 7.3 5.5c3.2 2.5 11.1 5.1 18.8 7.2l4.4-13c-12.9-12.9-19.1-25.4-25.3-38.5zm-410.18 61c-12.98 4.4-21.64 12.7-26.02 22.5-5.82 13.1-5.33 27.3-5.13 39.6l16.15-.4c0-20 2.88-39.6 15-61.7zm256.48 0c-13.1 4.4-21.7 12.7-26.1 22.5-5.8 13.1-5.3 27.3-5.1 39.6l16.1-.4c0-20 2.9-39.6 15.1-61.7zm82.4 64.7c-5.8.8-11.8.9-18 .2v41h18v-41.2zm-256.4 0c-5.8.8-11.8.9-18 .2v41h18v-41.2zM73 423v16h366v-16H73zm-32 34v30h430v-30H41z"}}]})(props);
};
module.exports.GiCarpetBombing = function GiCarpetBombing (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M28.416 414.373l9.6 8.58c.337.256.628.567.86.92a3.68 3.68 0 0 1 .76-1l8.58-9.6c1.06-1.18 1.48-.71 1.56.49.08 1.2.81 13.27.88 14.28a2.6 2.6 0 0 1-.95 2.27l-5.95 6.65a14.08 14.08 0 0 1 10.65 12.84c.18 3.34 1.2 21.52 1.38 24.86.434 7.754-5.5 14.392-13.255 14.825-7.754.434-14.391-5.5-14.825-13.255-.18-3.34-1.2-21.52-1.39-24.85a14.07 14.07 0 0 1 9.15-14l-6.65-5.94a2.55 2.55 0 0 1-1.18-2.16c-.06-1-.67-13.08-.73-14.28-.06-1.2.31-1.71 1.51-.63zm86.895-36.035c.46 1.11 5.1 12.27 5.5 13.2a2.55 2.55 0 0 0 1.84 1.63l8.26 3.36a14.07 14.07 0 0 0-3.91 16.24c1.3 3.07 8.39 19.85 9.68 22.93 3.021 7.155 11.27 10.506 18.425 7.485 7.155-3.02 10.506-11.27 7.485-18.425-1.29-3.08-6.403-24.826-7.693-27.906-2.394-5.701-10.214-4.207-16.367-3.594l3.36-8.27a2.6 2.6 0 0 0 .13-2.45c-.4-.93-5.16-12-5.64-13.15-.48-1.15-1-1.41-1.63.06l-4.85 11.93a3.68 3.68 0 0 0-.37 1.22 3.71 3.71 0 0 0-1.12-.58l-11.93-4.85c-1.43-.57-1.64.09-1.18 1.16zm76.452-64.348c.702.931 7.827 10.74 8.434 11.54a2.55 2.55 0 0 0 2.134 1.164l8.817 1.325a14.07 14.07 0 0 0 .047 16.696c1.98 2.678 12.804 17.336 14.786 20.023 4.544 6.445 13.498 7.894 19.842 3.21 6.344-4.684 7.596-13.668 2.775-19.908-1.973-2.698-12.805-17.345-14.777-20.034a14.08 14.08 0 0 0-15.962-4.917l1.325-8.817a2.6 2.6 0 0 0-.456-2.415c-.608-.811-7.84-10.488-8.555-11.458-.716-.97-1.336-1.126-1.573.437l-1.919 12.73a3.68 3.68 0 0 0-.067 1.275 3.71 3.71 0 0 0-1.228-.304l-12.731-1.918c-1.594-.245-1.618.391-.903 1.362zm52.19-92.677c.89.81 9.82 8.95 10.57 9.62a2.55 2.55 0 0 0 2.36.7l8.9-.46a14.07 14.07 0 0 0 3.35 16.37c2.48 2.23 16 14.42 18.49 16.66 5.783 5.068 14.564 4.55 19.711-1.163 5.147-5.714 4.75-14.502-.892-19.727-2.48-2.24-16-14.43-18.49-16.67a14.08 14.08 0 0 0-16.68-1.65l-.47-8.91a2.6 2.6 0 0 0-.93-2.28l-10.6-9.51c-.9-.8-1.53-.84-1.45.75l.67 12.86c-.013.428.047.854.18 1.26a3.712 3.712 0 0 0-1.26 0l-12.86.67c-1.62.03-1.51.66-.61 1.47zm71.329-114.095c11-2.5 18.73-8.87 23.52-19.33-26.62-20-76.72-55.29-110-63.88-4.81-1.26-15.81-1.14-19.63-1.14 0 0 36.82 44.3 44.44 72.14 17.94 8.54 42.67 16.54 61.65 12.21zm-232.76-40c-4.18-1.67-10.23 0-12.65 0 0 0 6.84 13.55 11.57 25.63 9.46-2.07 22.78-4.12 35.45-5.79-11.9-8.06-24.76-15.99-34.39-19.84zm408.18 49.72c-4.89-34.32-88.13-33.11-134.54-29.72-7.84 24.16-26.21 37.22-52.6 37.22-1.27 0-2.55 0-3.85-.09-21.93-1-43.63-10.24-54.61-15.64a147.59 147.59 0 0 1-19.11-11.11c-1-.67-1.83-1.32-2.65-1.95-32.9 1-62.63 2.75-87.09 5.15-16.17 1.78-37.68 4.76-50.4 7.45-12 2.86-18.65 6-18.65 9.37 0 12.59 94.83 22.8 211.81 22.8s211.81-10.21 211.81-22.8a2.6 2.6 0 0 0-.14-.68z"}}]})(props);
};
module.exports.GiCarrier = function GiCarrier (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M247 26v17h-39v18h39v20h-32v42h-14.027l-4.364 12H151l-.604 71.986 30.502 122.934c-48.878 3.346-97.752 8.937-145.013 16.414l2.812 17.777a1639.075 1639.075 0 0 1 121.096-14.529l-.078.31c112.547 28.156 190.551 43.088 306.816-8.958l-7.355-16.43a485.085 485.085 0 0 1-26.844 11.092c-32.19-4.323-65.92-7.053-100.55-8.356l16.316-64.314L464 176H324.275l-13.248-53H297V81h-32V61h39V43h-39V26h-18zm89.91 0l30.045 35 18.54 15.557L350.331 96h58.334l27.809 23.334 39.474 23.334-16.14-23.334L432 96h58.334l-81.506-19.443L390.288 61 336.91 26zM233 99h46v24h-46V99zm-17.973 42h81.946l8.75 35h-8.928L256 153.748l-59.133 27.89L215.027 141zM169 153h21.063l-14.678 40.357L169 196.84V153zm87 21.252v152.346c-5.41.103-10.833.238-16.262.402h-40.46l-29.071-110.316L256 174.252zM241.25 345h82.404c22.502.709 44.618 2.01 66.149 3.96-58.924 14.561-109.381 9.793-169.532-3.194 7.006-.306 13.999-.558 20.979-.766zm-132.865 29.363c-7.943-.023-15.667.234-23.084.842l1.469 17.941c54.39-4.455 133.014 12.49 189.199 17.202 55.64 4.665 109.966-1.684 168.654-13.512l-3.557-17.645c-57.8 11.65-110.279 17.692-163.591 13.221-47.153-3.954-113.49-17.885-169.09-18.049zm20.22 35.285c-12.198-.079-25.387.615-38.517 1.873-26.26 2.518-51.6 7.157-67.865 14.26l7.203 16.496c12.302-5.372 37.244-10.427 62.38-12.838 25.138-2.41 51.157-2.311 65.846.625 32.956 6.589 91.409 16.938 138.62 15.444l-.569-17.99c-44.053 1.394-102.073-8.619-134.523-15.106-9.17-1.833-20.376-2.684-32.575-2.764z"}}]})(props);
};
module.exports.GiCarrion = function GiCarrion (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M323.625 96.625c12.83 15.365 21.246 32.45 24.063 49.844.007.01.023.018.03.03 4.098 6.483 7.3 13.663 9.376 21.406 3.872 14.452 3.23 28.98-.906 42.406 5.385-.137 10.753.234 16.03 1.063 20.337-50.824-1.366-99.53-48.593-114.75zm-229.03 6.313c-3.192-.04-6.272.958-8.75 2.78-7.217 5.303-9.528 17.636 3.874 31.5-31.695-23-53.314 13.355-23.47 23.5 38.186 12.98 62.297 37.852 91.03 66.657 4.5-8.95 9.99-16.856 16.22-23.72-29.31-29.85-48.34-53.623-62.5-87.686-3.777-9.087-10.316-12.96-16.406-13.032zm311.03 15.843c16.36 35.31 14.957 72.632-10.094 99.5 5.688 2.547 11.118 5.665 16.158 9.282 4.792 3.44 9.254 7.362 13.28 11.72 30.32-43.23 21.423-94.163-19.343-120.5zm-130.094 7.97c-5.81.065-11.757.88-17.686 2.47-36.142 9.682-56.886 44.88-47.97 78.155 4.906 18.306 17.715 31.888 34.72 39.375l4.125 1.813 1.155 4.312 10.72 40.03 77.31-20.686-10.75-40.033-1.155-4.343 2.656-3.625c10.983-14.988 15.28-33.163 10.375-51.47-7.223-26.964-32.437-45.255-61.03-45.97-.825-.02-1.64-.04-2.47-.03zm27.595 41.78c.43-.015.854-.016 1.28 0 7.4.296 14.078 5.348 16.095 12.876 2.483 9.266-3.013 18.798-12.28 21.28-9.27 2.485-18.8-3.014-21.283-12.28-2.482-9.266 3.014-18.798 12.282-21.28 1.302-.35 2.613-.546 3.905-.595zm165.594 3.19c6.195 35.648-2.874 68.998-29.22 89.155 5.5 11.813 8.25 25.165 7.25 39.406 49.058-33.438 56.908-89.938 21.97-128.56zm-222.064 12.218c7.486.204 14.276 5.273 16.313 12.875 2.482 9.266-3.015 18.797-12.283 21.28-9.267 2.484-18.798-3.014-21.28-12.28-2.484-9.267 3.013-18.798 12.28-21.282 1.16-.31 2.317-.492 3.47-.56.503-.032 1-.046 1.5-.032zm31.53 21.843l23.095 28.69-27.56 6.655 4.467-35.344zm-86.592 5.595c-11.07 10.506-19.91 24.784-24.78 43.25 14.297 7.06 26.344 16.036 35.686 27.063 13.265 15.656 20.738 35.304 21.75 57.78 4.04-.872 8.185-1.363 12.375-1.437 17.238-.304 35.058 6.446 47.875 22.658l-14.656 11.593c-14.735-18.635-37.164-19.036-53.53-10.186-8.185 4.425-14.354 11.116-17.033 18.594-.06.173-.096.356-.155.53L180 380.5c.418-2.084.98-4.12 1.688-6.094 4.274-11.932 13.145-21.438 23.968-27.75.413-21.826-5.678-39.026-17.437-52.906-11.62-13.713-29.194-24.297-52.626-31.22-2.038-.3-3.986-.457-5.813-.467-2.086-.012-4.026.152-5.843.468-7.266 1.268-12.8 4.773-17.5 10.75-9.398 11.958-14.07 34.817-10.406 61.845l3.907 28.688-19.937-21c-11.16-11.77-22.013-14.838-31.72-13.782-9.704 1.057-18.63 6.773-24.218 14.75-5.587 7.98-7.745 17.722-4.718 27.283 1.668 5.27 4.98 10.753 10.75 15.968 11.96 15.804 46.246 32.908 102.937 43.595-15.04 4.874-24.75 12.64-24.75 21.375 0 14.755 27.74 26.72 61.97 26.72 34.23 0 61.97-11.965 61.97-26.72 0-4.09-2.126-7.972-5.94-11.438 11.142.44 22.745.657 34.814.657 119.344 0 216.955-20.41 224.28-46.22 25.16-46.828-19.41-82.85-47.03-74.72l-15.313 4.5 3.564-15.56c6.54-28.536-5.674-52.045-25.813-66.5-15.23-10.935-34.772-16.04-53.53-12.907-.324.52-.633 1.048-.97 1.562l12.064 45.03 2.437 9.033-9.03 2.437-95.344 25.53-9.03 2.408-2.407-9-12.064-45.063c-19.58-9.923-35.08-27.09-41.094-49.53-.075-.283-.146-.563-.218-.845zM401.094 455c-15.935 0-28.875 5.57-28.875 12.438s12.94 12.437 28.874 12.437c15.935 0 28.844-5.57 28.844-12.438S417.027 455 401.094 455zM78.72 470.313c-15.936 0-28.845 5.568-28.845 12.437 0 6.87 12.91 12.438 28.844 12.438 15.934 0 28.843-5.57 28.843-12.438 0-6.87-12.91-12.438-28.844-12.438z"}}]})(props);
};
module.exports.GiCarrot = function GiCarrot (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M228.063 16.72a9 9 0 0 0-2.47.5c-16.076 5.625-27.55 10.77-36.155 21.81-6.477 8.313-10.984 18.854-16.063 34.407-11.313-12.292-26.732-22.486-43.875-30.812-23.817-11.568-51.083-19.46-76.156-22.78a9 9 0 0 0-6.282 16.343c21.685 14.934 40.525 29.268 53.407 43.687 9.964 11.155 16.21 22.01 18.436 33.53-32.89-3.705-62.75 3.47-99.406 23.25a9 9 0 0 0 5.125 16.907c34.352-3.265 69.484-3.808 96.563.625 13.54 2.217 25.007 5.723 33.218 10.25 3.168 1.747 5.82 3.57 8 5.532 5.365-8.13 12.033-15.638 19.438-22.22 13.09-11.637 28.792-20.638 45.03-24.094-11.326-18.24-14.138-30.23-12.843-41.5 1.588-13.813 10.567-28.893 22.564-52.344a9 9 0 0 0-8.53-13.093zm13.906 123.436c-.527-.003-1.062.016-1.595.03-14.925.428-32.515 8.518-46.594 21.033-16.088 14.3-26.977 33.817-26.78 50 .39 32.175 18.688 67.77 47.344 102.124 28.655 34.354 67.3 67.31 106.375 94.72 39.073 27.406 78.66 49.316 108.78 61.936 15.06 6.31 27.857 10.275 36.313 11.5 3.958.574 6.797.448 8.187.188.065-.798.153-1.837.063-3.22-.205-3.113-.814-7.504-1.844-12.75-2.06-10.49-5.772-24.554-10.97-40.812-10.397-32.516-26.75-73.9-47.688-114.937-13.56-26.58-29.085-53.016-46.093-76.814-14.193 17.317-12.034 17.985-49.72 36.72l-7.125-14.313c39.43-19.6 30.222-15.247 47.063-35.594-6.235-8.066-12.65-15.74-19.22-22.907-3.278-3.578-6.59-7.04-9.937-10.344-24.116 33.382-44.493 41.374-76.436 55.124l-7.125-16.53c32.963-14.19 47.585-18.322 70.218-50.814-21.94-18.66-45.057-30.964-68.594-34.03-1.505-.197-3.047-.304-4.625-.314z"}}]})(props);
};
module.exports.GiCartwheel = function GiCartwheel (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M253.75 18.72C150.05 19.84 55.67 89.402 27.5 194.53-6.415 321.106 68.582 451.023 195.156 484.94c126.574 33.915 256.49-41.083 290.406-167.657C519.478 190.708 444.48 60.79 317.906 26.876c-19.777-5.3-39.657-7.957-59.22-8.156-1.65-.018-3.29-.02-4.936 0zm2.313 53.81c12.822-.048 25.848 1.247 38.843 4.032 1.034.222 2.06.48 3.094.72.488.115.98.223 1.47.343.51.123 1.018.247 1.53.375 1.004.255 1.994.512 3 .78 3.028.812 6.018 1.674 8.97 2.626 41.44 13.382 75.138 40.527 97.374 74.906.1.158.21.312.312.47.742 1.153 1.473 2.33 2.188 3.5.812 1.33 1.596 2.65 2.375 4 .733 1.27 1.452 2.555 2.155 3.843.594 1.09 1.177 2.18 1.75 3.28.107.207.206.42.313.626.08.16.17.312.25.47 18.66 36.453 25.32 79.192 16.187 121.78-.323 1.508-.7 3.026-1.063 4.533-.374 1.525-.747 3.037-1.156 4.562-.81 3.028-1.672 6.018-2.625 8.97-13.38 41.44-40.526 75.138-74.905 97.374-.157.1-.31.21-.47.31-1.153.743-2.33 1.474-3.5 2.19-1.328.81-2.65 1.595-4 2.374-1.27.734-2.554 1.453-3.842 2.156-1.09.594-2.18 1.177-3.282 1.75-.205.107-.417.206-.624.313-.157.08-.31.17-.47.25-36.452 18.66-79.19 25.32-121.78 16.187-1.507-.323-3.025-.693-4.53-1.063-.01-.002-.022.003-.032 0-1.516-.37-3.016-.75-4.53-1.156-3.03-.81-6.02-1.67-8.97-2.624-41.49-13.398-75.107-40.577-97.22-75-.068-.107-.15-.205-.218-.312-.773-1.21-1.505-2.43-2.25-3.656-.015-.025-.047-.04-.062-.063-.34-.56-.666-1.124-1-1.688-1.16-1.956-2.29-3.938-3.375-5.937-.7-1.287-1.395-2.57-2.064-3.875-.113-.22-.232-.436-.344-.656-18.464-36.382-24.94-79.035-15.812-121.533.324-1.506.693-3.025 1.063-4.53.002-.01-.003-.022 0-.032.37-1.516.75-3.017 1.156-4.53.33-1.242.672-2.463 1.03-3.69.08-.272.17-.54.25-.81.437-1.473.875-2.952 1.344-4.407.007-.022.024-.04.03-.063 13.345-41.36 40.262-75.04 74.44-97.313 1.284-.837 2.567-1.662 3.874-2.468.02-.012.042-.02.062-.03.99-.612 1.998-1.222 3-1.814.342-.202.688-.394 1.03-.594.687-.4 1.373-.797 2.064-1.187.485-.275.98-.544 1.47-.814.23-.13.453-.278.686-.406 1.314-.72 2.638-1.407 3.97-2.094 23.324-12.032 49.244-19.11 76.093-20.22 2.247-.09 4.49-.146 6.75-.155zm33.968 22.157l-25.75 96.188c3.07.368 6.15.96 9.22 1.78 3.062.822 6.01 1.85 8.844 3.064l25.78-96.22c-2.947-.97-5.933-1.874-8.968-2.688-3.038-.814-6.083-1.49-9.125-2.124zM182.5 109c-5.56 2.83-10.95 5.965-16.156 9.406l49.72 86.094c4.922-3.863 10.38-7.01 16.186-9.344L182.5 109zm211.72 56.594l-86.25 49.812c3.865 4.92 7.037 10.383 9.374 16.188l86.25-49.813c-2.812-5.572-5.953-10.965-9.375-16.186zM100.686 204.47c-.97 2.948-1.873 5.93-2.687 8.968-.81 3.025-1.522 6.065-2.156 9.093l95.687 25.626c.367-3.058.932-6.13 1.75-9.187.825-3.074 1.875-6.033 3.095-8.876l-95.688-25.625zM255.25 209c-20.188.584-38.553 14.304-44.03 34.75-6.68 24.925 8.23 50.79 33.155 57.47 24.925 6.677 50.79-8.233 57.47-33.158 6.677-24.924-8.233-50.79-33.158-57.468-3.115-.835-6.27-1.35-9.375-1.53-1.358-.08-2.716-.103-4.062-.064zmastSuccessfulFetchTimestampMillis(): number | undefined {\n    return this.lastSuccessfulFetchTimestampMillis;\n  }\n\n  getActiveConfig(): FirebaseRemoteConfigObject | undefined {\n    return this.activeConfig;\n  }\n\n  /**\n   * Read-ahead getter\n   */\n  async loadFromStorage(): Promise<void> {\n    const lastFetchStatusPromise = this.storage.getLastFetchStatus();\n    const lastSuccessfulFetchTimestampMillisPromise =\n      this.storage.getLastSuccessfulFetchTimestampMillis();\n    const activeConfigPromise = this.storage.getActiveConfig();\n\n    // Note:\n    // 1. we consistently check for undefined to avoid clobbering defined values\n    //   in memory\n    // 2. we defer awaiting to improve readability, as opposed to destructuring\n    //   a Promise.all result, for example\n\n    const lastFetchStatus = await lastFetchStatusPromise;\n    if (lastFetchStatus) {\n      this.lastFetchStatus = lastFetchStatus;\n    }\n\n    const lastSuccessfulFetchTimestampMillis =\n      await lastSuccessfulFetchTimestampMillisPromise;\n    if (lastSuccessfulFetchTimestampMillis) {\n      this.lastSuccessfulFetchTimestampMillis =\n        lastSuccessfulFetchTimestampMillis;\n    }\n\n    const activeConfig = await activeConfigPromise;\n    if (activeConfig) {\n      this.activeConfig = activeConfig;\n    }\n  }\n\n  /**\n   * Write-through setters\n   */\n  setLastFetchStatus(status: FetchStatus): Promise<void> {\n    this.lastFetchStatus = status;\n    return this.storage.setLastFetchStatus(status);\n  }\n\n  setLastSuccessfulFetchTimestampMillis(\n    timestampMillis: number\n  ): Promise<void> {\n    this.lastSuccessfulFetchTimestampMillis = timestampMillis;\n    return this.storage.setLastSuccessfulFetchTimestampMillis(timestampMillis);\n  }\n\n  setActiveConfig(activeConfig: FirebaseRemoteConfigObject): Promise<void> {\n    this.activeConfig = activeConfig;\n    return this.storage.setActiveConfig(activeConfig);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RemoteConfig } from './public_types';\nimport { activate, fetchConfig } from './api';\nimport {\n  getModularInstance,\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\n\n// This API is put in a separate file, so we can stub fetchConfig and activate in tests.\n// It's not possible to stub standalone functions from the same module.\n/**\n *\n * Performs fetch and activate operations, as a convenience.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n *\n * @returns A `Promise` which resolves to true if the current call activated the fetched configs.\n * If the fetched configs were already activated, the `Promise` will resolve to false.\n *\n * @public\n */\nexport async function fetchAndActivate(\n  remoteConfig: RemoteConfig\n): Promise<boolean> {\n  remoteConfig = getModularInstance(remoteConfig);\n  await fetchConfig(remoteConfig);\n  return activate(remoteConfig);\n}\n\n/**\n * This method provides two different checks:\n *\n * 1. Check if IndexedDB exists in the browser environment.\n * 2. Check if the current browser context allows IndexedDB `open()` calls.\n *\n * @returns A `Promise` which resolves to true if a {@link RemoteConfig} instance\n * can be initialized in this environment, or false if it cannot.\n * @public\n */\nexport async function isSupported(): Promise<boolean> {\n  if (!isIndexedDBAvailable()) {\n    return false;\n  }\n\n  try {\n    const isDBOpenable: boolean = await validateIndexedDBOpenable();\n    return isDBOpenable;\n  } catch (error) {\n    return false;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\nimport { isIndexedDBAvailable } from '@firebase/util';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\nimport { Logger, LogLevel as FirebaseLogLevel } from '@firebase/logger';\nimport { RemoteConfig } from './public_types';\nimport { name as packageName, version } from '../package.json';\nimport { ensureInitialized } from './api';\nimport { CachingClient } from './client/caching_client';\nimport { RestClient } from './client/rest_client';\nimport { RetryingClient } from './client/retrying_client';\nimport { RC_COMPONENT_NAME } from './constants';\nimport { ErrorCode, ERROR_FACTORY } from './errors';\nimport { RemoteConfig as RemoteConfigImpl } from './remote_config';\nimport { Storage } from './storage/storage';\nimport { StorageCache } from './storage/storage_cache';\n// This needs to be in the same file that calls `getProvider()` on the component\n// or it will get tree-shaken out.\nimport '@firebase/installations';\n\nexport function registerRemoteConfig(): void {\n  _registerComponent(\n    new Component(\n      RC_COMPONENT_NAME,\n      remoteConfigFactory,\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n\n  registerVersion(packageName, version);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(packageName, version, '__BUILD_TARGET__');\n\n  function remoteConfigFactory(\n    container: ComponentContainer,\n    { instanceIdentifier: namespace }: InstanceFactoryOptions\n  ): RemoteConfig {\n    /* Dependencies */\n    // getImmediate for FirebaseApp will always succeed\n    const app = container.getProvider('app').getImmediate();\n    // The following call will always succeed because rc has `import '@firebase/installations'`\n    const installations = container\n      .getProvider('installations-internal')\n      .getImmediate();\n\n    // Guards against the SDK being used in non-browser environments.\n    if (typeof window === 'undefined') {\n      throw ERROR_FACTORY.create(ErrorCode.REGISTRATION_WINDOW);\n    }\n    // Guards against the SDK being used when indexedDB is not available.\n    if (!isIndexedDBAvailable()) {\n      throw ERROR_FACTORY.create(ErrorCode.INDEXED_DB_UNAVAILABLE);\n    }\n    // Normalizes optional inputs.\n    const { projectId, apiKey, appId } = app.options;\n    if (!projectId) {\n      throw ERROR_FACTORY.create(ErrorCode.REGISTRATION_PROJECT_ID);\n    }\n    if (!apiKey) {\n      throw ERROR_FACTORY.create(ErrorCode.REGISTRATION_API_KEY);\n    }\n    if (!appId) {\n      throw ERROR_FACTORY.create(ErrorCode.REGISTRATION_APP_ID);\n    }\n    namespace = namespace || 'firebase';\n\n    const storage = new Storage(appId, app.name, namespace);\n    const storageCache = new StorageCache(storage);\n\n    const logger = new Logger(packageName);\n\n    // Sets ERROR as the default log level.\n    // See RemoteConfig#setLogLevel for corresponding normalization to ERROR log level.\n    logger.logLevel = FirebaseLogLevel.ERROR;\n\n    const restClient = new RestClient(\n      installations,\n      // Uses the JS SDK version, by which the RC package version can be deduced, if necessary.\n      SDK_VERSION,\n      namespace,\n      projectId,\n      apiKey,\n      appId\n    );\n    const retryingClient = new RetryingClient(restClient, storage);\n    const cachingClient = new CachingClient(\n      retryingClient,\n      storage,\n      storageCache,\n      logger\n    );\n\n    const remoteConfigInstance = new RemoteConfigImpl(\n      app,\n      cachingClient,\n      storageCache,\n      storage,\n      logger\n    );\n\n    // Starts warming cache.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    ensureInitialized(remoteConfigInstance);\n\n    return remoteConfigInstance;\n  }\n}\n"],"names":["isIndexedDBAvailable","indexedDB","e","FirebaseError","Error","constructor","code","message","customData","super","this","name","Object","setPrototypeOf","prototype","captureStackTrace","ErrorFactory","create","service","serviceName","errors","data","fullCode","template","replace","PATTERN","_","key","value","String","replaceTemplate","fullMessage","calculateBackoffMillis","backoffCount","intervalMillis","backoffFactor","currBaseValue","Math","pow","randomWait","round","random","min","getModularInstance","_delegate","Component","instanceFactory","type","multipleInstances","serviceProps","instantiationMode","onInstanceCreated","setInstantiationMode","mode","setMultipleInstances","setServiceProps","props","setInstanceCreatedCallback","callback","LogLevel","levelStringToEnum","debug","DEBUG","verbose","VERBOSE","info","INFO","warn","WARN","error","ERROR","silent","SILENT","defaultLogLevel","ConsoleMethod","defaultLogHandler","instance","logType","args","logLevel","now","Date","toISOString","method","console","Logger","_logLevel","_logHandler","_userLogHandler","val","TypeError","setLogLevel","logHandler","userLogHandler","log","idbProxyableTypes","cursorAdvanceMethods","cursorRequestMap","WeakMap","transactionDoneMap","transactionStoreNamesMap","transformCache","reverseTransformCache","idbProxyTraps","get","target","prop","receiver","IDBTransaction","objectStoreNames","undefined","objectStore","wrap","set","has","wrapFunction","func","IDBDatabase","transaction","IDBCursor","advance","continue","continuePrimaryKey","includes","apply","unwrap","storeNames","tx","call","sort","transformCachableValue","done","Promise","resolve","reject","unlisten","removeEventListener","complete","DOMException","addEventListener","cacheDonePromiseForTransaction","object","IDBObjectStore","IDBIndex","some","c","Proxy","IDBRequest","request","promise","success","result","then","catch","promisifyRequest","newValue","readMethods","writeMethods","cachedMethods","Map","getMethod","targetFuncName","useIndex","isWrite","async","storeName","store","index","shift","all","oldTraps","ERROR_FACTORY","isServerError","getInstallationsEndpoint","projectId","extractAuthTokenInfoFromResponse","response","token","requestStatus","expiresIn","responseExpiresIn","Number","creationTime","getErrorFromResponse","requestName","errorData","json","serverCode","serverMessage","serverStatus","status","getHeaders","apiKey","Headers","Accept","getHeadersWithAuth","appConfig","refreshToken","headers","append","getAuthorizationHeader","retryIfServerError","fn","sleep","ms","setTimeout","VALID_FID_PATTERN","generateFid","fidByteArray","Uint8Array","self","crypto","msCrypto","getRandomValues","fid","array","btoa","fromCharCode","substr","encode","test","_a","getKey","appName","appId","fidChangeCallbacks","fidChanged","callFidChangeCallbacks","channel","broadcastChannel","BroadcastChannel","onmessage","getBroadcastChannel","postMessage","size","close","broadcastFidChange","callbacks","OBJECT_STORE_NAME","dbPromise","getDbPromise","version","blocked","upgrade","blocking","terminated","open","openPromise","event","oldVersion","newVersion","db","openDB","createObjectStore","oldValue","put","remove","delete","update","updateFn","getInstallationEntry","installations","registrationPromise","installationEntry","oldEntry","clearTimedOutRequest","registrationStatus","updateOrCreateInstallationEntry","entryWithPromise","navigator","onLine","inProgressEntry","registrationTime","registeredInstallationEntry","heartbeatServiceProvider","endpoint","heartbeatService","getImmediate","optional","heartbeatsHeader","getHeartbeatsHeader","body","authVersion","sdkVersion","JSON","stringify","fetch","ok","responseValue","authToken","createInstallationRequest","registerInstallation","waitUntilFidRegistration","triggerRegistrationIfNecessary","entry","updateInstallationRequest","generateAuthTokenRequest","getGenerateAuthTokenEndpoint","installation","refreshAuthToken","forceRefresh","tokenPromise","isEntryRegistered","oldAuthToken","isAuthTokenExpired","isAuthTokenValid","updateAuthTokenRequest","waitUntilAuthTokenRequest","inProgressAuthToken","requestTime","assign","makeAuthTokenRequestInProgressEntry","updatedInstallationEntry","fetchAuthTokenFromServer","getToken","installationsImpl","completeInstallationRegistration","getMissingValueError","valueName","internalFactory","container","app","getProvider","_getProvider","getId","_registerComponent","options","configKeys","keyName","extractAppConfig","_delete","registerVersion","RemoteConfigAbortSignal","listeners","listener","push","abort","forEach","BOOLEAN_TRUTHY_VALUES","Value","_source","_value","asString","asBoolean","indexOf","toLowerCase","asNumber","num","isNaN","getSource","getRemoteConfig","getApp","activate","remoteConfig","rc","lastSuccessfulFetchResponse","activeConfigEtag","_storage","getLastSuccessfulFetchResponse","getActiveConfigEtag","config","eTag","_storageCache","setActiveConfig","setActiveConfigEtag","ensureInitialized","_initializePromise","loadFromStorage","_isInitializationComplete","fetchConfig","abortSignal","settings","fetchTimeoutMillis","_client","cacheMaxAgeMillis","minimumFetchIntervalMillis","signal","setLastFetchStatus","lastFetchStatus","errorCode","hasErrorCode","getAll","obj1","obj2","keys","getAllKeys","getActiveConfig","defaultConfig","reduce","allConfigs","getValue","getBoolean","getNumber","getString","_logger","activeConfig","ValueImpl","FirebaseLogLevel","CachingClient","client","storage","storageCache","logger","isCachedDataFresh","lastSuccessfulFetchTimestampMillis","cacheAgeMillis","getLastSuccessfulFetchTimestampMillis","storageOperations","setLastSuccessfulFetchTimestampMillis","setLastSuccessfulFetchResponse","getUserLanguage","navigatorLanguage","languages","language","RestClient","firebaseInstallations","namespace","installationId","installationToken","url","window","FIREBASE_REMOTE_CONFIG_URL_BASE","requestBody","sdk_version","app_instance_id","app_instance_id_token","app_id","language_code","fetchPromise","timeoutPromise","_resolve","race","originalError","originalErrorMessage","responseEtag","state","responseBody","httpStatus","RetryingClient","throttleMetadata","getThrottleMetadata","throttleEndTimeMillis","attemptFetch","backoffMillis","max","timeout","clearTimeout","setAbortableTimeout","deleteThrottleMetadata","isRetriableError","setThrottleMetadata","RemoteConfig","fetchTimeMillis","getLastFetchStatus","toFirebaseError","Storage","openDbPromise","onerror","onsuccess","onupgradeneeded","keyPath","openDatabase","timestamp","etag","metadata","compositeKey","createCompositeKey","join","StorageCache","lastFetchStatusPromise","lastSuccessfulFetchTimestampMillisPromise","activeConfigPromise","timestampMillis","fetchAndActivate","isSupported","preExist","DB_CHECK_NAME","deleteDatabase","instanceIdentifier","packageName","restClient","SDK_VERSION","retryingClient","cachingClient","remoteConfigInstance","RemoteConfigImpl"],"mappings":"uHAqJgB,SAAAA,IACd,IACE,MAA4B,iBAAdC,UACd,MAAOC,GACP,OAAO,GChFL,MAAOC,UAAsBC,MAIjCC,YAEWC,EACTC,EAEOC,GAEPC,MAAMF,GALGG,KAAIJ,KAAJA,EAGFI,KAAUF,WAAVA,EAPAE,KAAIC,KAdI,gBA2BfC,OAAOC,eAAeH,KAAMP,EAAcW,WAItCV,MAAMW,mBACRX,MAAMW,kBAAkBL,KAAMM,EAAaF,UAAUG,SAK9C,MAAAD,EAIXX,YACmBa,EACAC,EACAC,GAFAV,KAAOQ,QAAPA,EACAR,KAAWS,YAAXA,EACAT,KAAMU,OAANA,EAGnBH,OACEX,KACGe,GAEH,MAAMb,EAAca,EAAK,IAAoB,GACvCC,EAAW,GAAGZ,KAAKQ,WAAWZ,IAC9BiB,EAAWb,KAAKU,OAAOd,GAEvBC,EAAUgB,EAUpB,SAAyBA,EAAkBF,GACzC,OAAOE,EAASC,QAAQC,GAAS,CAACC,EAAGC,KACnC,MAAMC,EAAQP,EAAKM,GACnB,OAAgB,MAATC,EAAgBC,OAAOD,GAAS,IAAID,SAbhBG,CAAgBP,EAAUf,GAAc,QAE7DuB,EAAc,GAAGrB,KAAKS,gBAAmodule.exports={A:{A:{"1":"F A B","8":"J FC","129":"D","257":"E"},B:{"1":"C K L G M N O P Q R S T U V W X Y Z a b c d e i j k l m n o p q r s t u v f w H"},C:{"1":"0 1 2 3 4 5 6 7 8 9 GC vB I x J D E F A B C K L G M N O y g z AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB wB bB xB cB dB eB fB gB hB iB jB kB lB mB h nB oB pB qB rB P Q R yB S T U V W X Y Z a b c d e i j k l m n o p q r s t u v f w H zB 0B HC IC"},D:{"1":"0 1 2 3 4 5 6 7 8 9 I x J D E F A B C K L G M N O y g z AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB wB bB xB cB dB eB fB gB hB iB jB kB lB mB h nB oB pB qB rB P Q R S T U V W X Y Z a b c d e i j k l m n o p q r s t u v f w H zB 0B JC"},E:{"1":"I x J D E F A B C K L G KC 1B LC MC NC OC 2B sB tB 3B PC QC 4B 5B 6B 7B uB 8B 9B AC BC CC RC"},F:{"1":"0 1 2 3 4 5 6 7 8 9 F B C G M N O y g z AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB h nB oB pB qB rB P Q R yB S T U V W X Y Z a b c d e SC TC UC VC sB DC WC tB"},G:{"1":"E 1B XC EC YC ZC aC bC cC dC eC fC gC hC iC jC kC lC mC nC oC pC qC 4B 5B 6B 7B uB 8B 9B AC BC CC"},H:{"1":"rC"},I:{"1":"vB I H sC tC uC vC EC wC xC"},J:{"1":"D A"},K:{"1":"A B C h sB DC tB"},L:{"1":"H"},M:{"1":"f"},N:{"1":"A B"},O:{"1":"yC"},P:{"1":"I g zC 0C 1C 2C 3C 2B 4C 5C 6C 7C 8C uB 9C AD BD"},Q:{"1":"3B"},R:{"1":"CD"},S:{"1":"DD ED"}},B:2,C:"CSS min/max-width/height"};
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        gBZ,MAAYe,MAIxD,OAFc,IAAInB,EAAcmB,EAAUS,EAAavB,IAa3D,MAAMiB,EAAU,gBCnFV,SAAUO,EACdC,EACAC,EAhC8B,IAiC9BC,EA3B6B,GAgC7B,MAAMC,EAAgBF,EAAiBG,KAAKC,IAAIH,EAAeF,GAIzDM,EAAaF,KAAKG,MAnBG,GAuBvBJ,GAGCC,KAAKI,SAAW,IACjB,GAIJ,OAAOJ,KAAKK,IAzCkB,MAyCIN,EAAgBG,GCrD9C,SAAUI,EACdzB,GAEA,OAAIA,GAAYA,EAA+B0B,UACrC1B,EAA+B0B,UAEhC1B,ECCE,MAAA2B,EAiBXxC,YACWM,EACAmC,EACAC,GAFArC,KAAIC,KAAJA,EACAD,KAAeoC,gBAAfA,EACApC,KAAIqC,KAAJA,EAnBXrC,KAAiBsC,mBAAG,EAIpBtC,KAAYuC,aAAe,GAE3BvC,KAAAwC,kBAA2C,OAE3CxC,KAAiByC,kBAAwC,KAczDC,qBAAqBC,GAEnB,OADA3C,KAAKwC,kBAAoBG,EAClB3C,KAGT4C,qBAAqBN,GAEnB,OADAtC,KAAKsC,kBAAoBA,EAClBtC,KAGT6C,gBAAgBC,GAEd,OADA9C,KAAKuC,aAAeO,EACb9C,KAGT+C,2BAA2BC,GAEzB,OADAhD,KAAKyC,kBAAoBO,EAClBhD,UCdCiD,GAAZ,SAAYA,GACVA,EAAAA,EAAA,MAAA,GAAA,QACAA,EAAAA,EAAA,QAAA,GAAA,UACAA,EAAAA,EAAA,KAAA,GAAA,OACAA,EAAAA,EAAA,KAAA,GAAA,OACAA,EAAAA,EAAA,MAAA,GAAA,QACAA,EAAAA,EAAA,OAAA,GAAA,SANF,CAAYA,IAAAA,EAOX,KAED,MAAMC,EAA2D,CAC/DC,MAASF,EAASG,MAClBC,QAAWJ,EAASK,QACpBC,KAAQN,EAASO,KACjBC,KAAQR,EAASS,KACjBC,MAASV,EAASW,MAClBC,OAAUZ,EAASa,QAMfC,EAA4Bd,EAASO,KAmBrCQ,EAAgB,CACpB,CAACf,EAASG,OAAQ,MAClB,CAACH,EAASK,SAAU,MACpB,CAACL,EAASO,MAAO,OACjB,CAACP,EAASS,MAAO,OACjB,CAACT,EAASW,OAAQ,SAQdK,EAAgC,CAACC,EAAUC,KAAYC,KAC3D,GAAID,EAAUD,EAASG,SACrB,OAEF,MAAMC,GAAM,IAAIC,MAAOC,cACjBC,EAAST,EAAcG,GAC7B,IAAIM,EAMF,MAAM,IAAI/E,MACR,8DAA8DyE,MANhEO,QAAQD,GACN,IAAIH,OAASJ,EAASjE,WACnBmE,IASI,MAAAO,EAOXhF,YAAmBM,GAAAD,KAAIC,KAAJA,EAUXD,KAAS4E,UAAGb,EAsBZ/D,KAAW6E,YAAeZ,EAc1BjE,KAAe8E,gBAAsB,KAlCzCT,eACF,OAAOrE,KAAK4E,UAGVP,aAASU,GACX,KAAMA,KAAO9B,GACX,MAAM,IAAI+B,UAAU,kBAAkBD,+BAExC/E,KAAK4E,UAAYG,EAInBE,YAAYF,GACV/E,KAAK4E,UAA2B,iBAARG,EAAmB7B,EAAkB6B,GAAOA,EAQlEG,iBACF,OAAOlF,KAAK6E,YAEVK,eAAWH,GACb,GAAmB,mBAARA,EACT,MAAM,IAAIC,UAAU,qDAEtBhF,KAAK6E,YAAcE,EAOjBI,qBACF,OAAOnF,KAAK8E,gBAEVK,mBAAeJ,GACjB/E,KAAK8E,gBAAkBC,EAOzB5B,SAASiB,GACPpE,KAAK8E,iBAAmB9E,KAAK8E,gBAAgB9E,KAAMiD,EAASG,SAAUgB,GACtEpE,KAAK6E,YAAY7E,KAAMiD,EAASG,SAAUgB,GAE5CgB,OAAOhB,GACLpE,KAAK8E,iBACH9E,KAAK8E,gBAAgB9E,KAAMiD,EAASK,WAAYc,GAClDpE,KAAK6E,YAAY7E,KAAMiD,EAASK,WAAYc,GAE9Cb,QAAQa,GACNpE,KAAK8E,iBAAmB9E,KAAK8E,gBAAgB9E,KAAMiD,EAASO,QAASY,GACrEpE,KAAK6E,YAAY7E,KAAMiD,EAASO,QAASY,GAE3CX,QAAQW,GACNpE,KAAK8E,iBAAmB9E,KAAK8E,gBAAgB9E,KAAMiD,EAASS,QAASU,GACrEpE,KAAK6E,YAAY7E,KAAMiD,EAASS,QAASU,GAE3CT,SAASS,GACPpE,KAAK8E,iBAAmB9E,KAAK8E,gBAAgB9E,KAAMiD,EAASW,SAAUQ,GACtEpE,KAAK6E,YAAY7E,KAAMiD,EAASW,SAAUQ,IC/M9C,IAAIiB,EACAC,EAqBJ,MAAMC,EAAmB,IAAIC,QACvBC,EAAqB,IAAID,QACzBE,EAA2B,IAAIF,QAC/BG,EAAiB,IAAIH,QACrBI,EAAwB,IAAIJ,QA0DlC,IAAIK,EAAgB,CAChBC,IAAIC,EAAQC,EAAMC,GACd,GAAIF,aAAkBG,eAAgB,CAElC,GAAa,SAATF,EACA,OAAOP,EAAmBK,IAAIC,GAElC,GAAa,qBAATC,EACA,OAAOD,EAAOI,kBAAoBT,EAAyBI,IAAIC,GAGnE,GAAa,UAATC,EACA,OAAOC,EAASE,iBAAiB,QAC3BC,EACAH,EAASI,YAAYJ,EAASE,iBAAiB,IAI7D,OAAOG,EAAKP,EAAOC,KAEvBO,IAAG,CAACR,EAAQC,EAAM9E,KACd6E,EAAOC,GAAQ9E,GACR,GAEXsF,IAAG,CAACT,EAAQC,IACJD,aAAkBG,iBACR,SAATF,GAA4B,UAATA,IAGjBA,KAAQD,GAMvB,SAASU,EAAaC,GAIlB,OAAIA,IAASC,YAAYvG,UAAUwG,aAC7B,qBAAsBV,eAAe9F,WA7GnCkF,IACHA,EAAuB,CACpBuB,UAAUzG,UAAU0G,QACpBD,UAAUzG,UAAU2G,SACpBF,UAAUzG,UAAU4G,sBAqHEC,SAASP,GAC5B,YAAatC,GAIhB,OADAsC,EAAKQ,MAAMC,EAAOnH,MAAOoE,GAClBkC,EAAKf,EAAiBO,IAAI9F,QAGlC,YAAaoE,GAGhB,OAAOkC,EAAKI,EAAKQ,MAAMC,EAAOnH,MAAOoE,KAtB9B,SAAUgD,KAAehD,GAC5B,MAAMiD,EAAKX,EAAKY,KAAKH,EAAOnH,MAAOoH,KAAehD,GAElD,OADAsB,EAAyBa,IAAIc,EAAID,EAAWG,KAAOH,EAAWG,OAAS,CAACH,IACjEd,EAAKe,IAsBxB,SAASG,EAAuBtG,GAC5B,MAAqB,mBAAVA,EACAuF,EAAavF,IAGpBA,aAAiBgF,gBAhGzB,SAAwCmB,GAEpC,GAAI5B,EAAmBe,IAAIa,GACvB,OACJ,MAAMI,EAAO,IAAIC,SAAQ,CAACC,EAASC,KAC/B,MAAMC,EAAW,KACbR,EAAGS,oBAAoB,WAAYC,GACnCV,EAAGS,oBAAoB,QAASnE,GAChC0D,EAAGS,oBAAoB,QAASnE,IAE9BoE,EAAW,KACbJ,IACAE,KAEElE,EAAQ,KACViE,EAAOP,EAAG1D,OAAS,IAAIqE,aAAa,aAAc,eAClDH,KAEJR,EAAGY,iBAAiB,WAAYF,GAChCV,EAAGY,iBAAiB,QAAStE,GAC7B0D,EAAGY,iBAAiB,QAAStE,MAGjC8B,EAAmBc,IAAIc,EAAII,GA0EvBS,CAA+BhH,GA9JhBiH,EA+JDjH,GAzJVmE,IACHA,EAAoB,CACjBsB,YACAyB,eACAC,SACAxB,UACAX,kBAZiDoC,MAAMC,GAAMJ,aAAkBI,IAgK5E,IAAIC,MAAMtH,EAAO2E,GAErB3E,GAlKW,IAACiH,EAoKvB,SAAS7B,EAAKpF,GAGV,GAAIA,aAAiBuH,WACjB,OA3IR,SAA0BC,GACtB,MAAMC,EAAU,IAAIjB,SAAQ,CAACC,EAASC,KAClC,MAAMC,EAAW,KACba,EAAQZ,oBAAoB,UAAWc,GACvCF,EAAQZ,oBAAoB,QAASnE,IAEnCiF,EAAU,KACZjB,EAAQrB,EAAKoC,EAAQG,SACrBhB,KAEElE,EAAQ,KACViE,EAAOc,EAAQ/E,OACfkE,KAEJa,EAAQT,iBAAiB,UAAWW,GACpCF,EAAQT,iBAAiB,QAAStE,MAetC,OAbAgF,EACKG,MAAM5H,IAGHA,aAAiB2F,WACjBtB,EAAiBgB,IAAIrF,EAAOwH,MAI/BK,OAAM,SAGXnD,EAAsBW,IAAIoC,EAASD,GAC5BC,EA6GIK,CAAiB9H,GAG5B,GAAIyE,EAAea,IAAItF,GACnB,OAAOyE,EAAeG,IAAI5E,GAC9B,MAAM+H,EAAWzB,EAAuBtG,GAOxC,OAJI+H,IAAa/H,IACbyE,EAAeY,IAAIrF,EAAO+H,GAC1BrD,EAAsBW,IAAI0C,EAAU/H,IAEjC+H,EAEX,MAAM9B,EAAUjG,GAAU0E,EAAsBE,IAAI5E,GCrIpD,MAAMgI,EAAc,CAAC,MAAO,SAAU,SAAU,aAAc,SACxDC,EAAe,CAAC,MAAO,MAAO,SAAU,SACxCC,EAAgB,IAAIC,IAC1B,SAASC,EAAUvD,EAAQC,GACvB,KAAMD,aAAkBY,cAClBX,KAAQD,GACM,iBAATC,EACP,OAEJ,GAAIoD,EAActD,IAAIE,GAClB,OAAOoD,EAActD,IAAIE,GAC7B,MAAMuD,EAAiBvD,EAAKlF,QAAQ,aAAc,IAC5C0I,EAAWxD,IAASuD,EACpBE,EAAUN,EAAalC,SAASsC,GACtC,KAEEA,KAAmBC,EAAWnB,SAAWD,gBAAgBhI,aACrDqJ,IAAWP,EAAYjC,SAASsC,GAClC,OAEJ,MAAM9E,EAASiF,eAAgBC,KAAcvF,GAEzC,MAAMiD,EAAKrH,KAAK4G,YAAY+C,EAAWF,EAAU,YAAc,YAC/D,IAAI1D,EAASsB,EAAGuC,MAQhB,OAPIJ,IACAzD,EAASA,EAAO8D,MAAMzF,EAAK0F,iBAMjBpC,QAAQqC,IAAI,CACtBhE,EAAOwD,MAAmBnF,GAC1BqF,GAAWpC,EAAGI,QACd,IAGR,OADA2B,EAAc7C,IAAIP,EAAMvB,GACjBA,EDiCPoB,EC/BS,CAACmE,IAAc,IACrBA,EACHlE,IAAK,CAACC,EAAQC,EAAMC,IAAaqD,EAAUvD,EAAQC,IAASgE,EAASlE,IAAIC,EAAQC,EAAMC,GACvFO,IAAK,CAACT,EAAQC,MAAWsD,EAAUvD,EAAQC,IAASgE,EAASxD,IAAIT,EAAQC,KD4BzDhD,CAAS6C,qCEpEhBoE,EAAgB,IAAI3J,ECtBV,gBACK,gBDD2C,CACrE,4BACE,kDACF,iBAA4B,2CAC5B,yBAAoC,mCACpC,iBACE,6FACF,cAAyB,kDACzB,8BACE,6EA4BE,SAAU4J,EAAcvG,GAC5B,OACEA,aAAiBlE,GACjBkE,EAAM/D,KAAKqH,SAAQ,kBEtCP,SAAAkD,GAAyBC,UAAEA,IACzC,MAAO,4DAAqCA,kBAGxC,SAAUC,EACdC,GAEA,MAAO,CACLC,MAAOD,EAASC,MAChBC,cAAsC,EACtCC,WA8DuCC,EA9DMJ,EAASG,UAgEjDE,OAAOD,EAAkB5J,QAAQ,IAAK,SA/D3C8J,aAAcrG,KAAKD,OA6DvB,IAA2CoG,EAzDpChB,eAAemB,EACpBC,EACAR,GAEA,MACMS,SADoCT,EAASU,QACpBrH,MAC/B,OAAOsG,EAAc1J,OAAiC,iBAAA,CACpDuK,YAAAA,EACAG,WAAYF,EAAUnL,KACtBsL,cAAeH,EAAUlL,QACzBsL,aAAcJ,EAAUK,SAIZ,SAAAC,GAAWC,OAAEA,IAC3B,OAAO,IAAIC,QAAQ,CACjB,eAAgB,mBAChBC,OAAQ,mBACR,iBAAkBF,IAIN,SAAAG,EACdC,GACAC,aAAEA,IAEF,MAAMC,EAAUP,EAAWK,GAE3B,OADAE,EAAQC,OAAO,gBAmCjB,SAAgCF,GAC9B,MAAO,UAA4BA,IApCHG,CAAuBH,IAChDC,EAgBFlC,eAAeqC,EACpBC,GAEA,MAAMnD,QAAemD,IAErB,OAAInD,EAAOuC,QAAU,KAAOvC,EAAOuC,OAAS,IAEnCY,IAGFnD,EClFH,SAAUoD,EAAMC,GACpB,OAAO,IAAIxE,SAAcC,IACvBwE,WAAWxE,EAASuE,MCDjB,MAAME,EAAoB,oBAOjB,SAAAC,IACd,IAGE,MAAMC,EAAe,IAAIC,WAAW,KAElCC,KAAKC,QAAWD,KAAyCE,UACpDC,gBAAgBL,GAGvBA,EAAa,GAAK,IAAcA,EAAa,GAAK,GAElD,MAAMM,EAUV,SAAgBN,GAKd,OCpCoCO,EDgCIP,EC/B5BQ,KAAK3L,OAAO4L,gBAAgBF,IAC7B/L,QAAQ,MAAO,KAAKA,QAAQ,MAAO,MDkC7BkM,OAAO,EAAG,ICpCvB,IAAgCH,EDqBtBI,CAAOX,GAEnB,OAAOF,EAAkBc,KAAKN,GAAOA,EApBd,GAqBvB,MAAMO,GAEN,MAvBuB,IEArB,SAAUC,EAAO1B,GACrB,MAAO,GAAGA,EAAU2B,WAAW3B,EAAU4B,QCA3C,MAAMC,EAA2D,IAAIlE,IAMrD,SAAAmE,EAAW9B,EAAsBkB,GAC/C,MAAM3L,EAAMmM,EAAO1B,GAEnB+B,EAAuBxM,EAAK2L,GAsD9B,SAA4B3L,EAAa2L,GACvC,MAAMc,EASR,YACOC,GAAoB,qBAAsBnB,OAC7CmB,EAAmB,IAAIC,iBAAiB,yBACxCD,EAAiBE,UAAYrO,IAC3BiO,EAAuBjO,EAAEmB,KAAKM,IAAKzB,EAAEmB,KAAKiM,OAG9C,OAAOe,EAhBSG,GACZJ,GACFA,EAAQK,YAAY,CAAE9M,IAAAA,EAAK2L,IAAAA,IAkBG,IAA5BW,EAAmBS,MAAcL,IACnCA,EAAiBM,QACjBN,EAAmB,MA5ErBO,CAAmBjN,EAAK2L,GA0C1B,SAASa,EAAuBxM,EAAa2L,GAC3C,MAAMuB,EAAYZ,EAAmBzH,IAAI7E,GACzC,GAAKkN,EAIL,IAAK,MAAMnL,KAAYmL,EACrBnL,EAAS4J,GAYb,IAAIe,EAA4C,KCrEhD,MAEMS,EAAoB,+BAS1B,IAAIC,EAA2D,KAC/D,SAASC,IAgBP,OAfKD,IACHA,ET3BJ,SAAgBpO,EAAMsO,GAASC,QAAEA,EAAOC,QAAEA,EAAOC,SAAEA,EAAQC,WAAEA,GAAe,IACxE,MAAMjG,EAAUnJ,UAAUqP,KAAK3O,EAAMsO,GAC/BM,EAAcvI,EAAKoC,GAoBzB,OAnBI+F,GACA/F,EAAQT,iBAAiB,iBAAkB6G,IACvCL,EAAQnI,EAAKoC,EAAQG,QAASiG,EAAMC,WAAYD,EAAME,WAAY1I,EAAKoC,EAAQ9B,aAAckI,MAGjGN,GACA9F,EAAQT,iBAAiB,WAAY6G,GAAUN,EAE/CM,EAAMC,WAAYD,EAAME,WAAYF,KAExCD,EACK/F,MAAMmG,IACHN,GACAM,EAAGhH,iBAAiB,SAAS,IAAM0G,MACnCD,GACAO,EAAGhH,iBAAiB,iBAAkB6G,GAAUJ,EAASI,EAAMC,WAAYD,EAAME,WAAYF,QAGhG/F,OAAM,SACJ8F,ESKKK,CAdM,kCACG,EAa+B,CAClDT,QAAS,CAACQ,EAAIF,KAMZ,GACO,IADCA,EAEJE,EAAGE,kBAAkBf,OAKxBC,EAgBF3E,eAAenD,GACpBmF,EACAxK,GAEA,MAAMD,EAAMmM,EAAO1B,GAEbrE,SADWiH,KACH1H,YAAYwH,EAAmB,aACvC/H,EAAcgB,EAAGhB,YAAY+H,GAC7BgB,QAAkB/I,EAAYP,IAAI7E,GAQxC,aAPMoF,EAAYgJ,IAAInO,EAAOD,SACvBoG,EAAGI,KAEJ2H,GAAYA,EAASxC,MAAQ1L,EAAM0L,KACtCY,EAAW9B,EAAWxK,EAAM0L,KAGvB1L,EAIFwI,eAAe4F,GAAO5D,GAC3B,MAAMzK,EAAMmM,EAAO1B,GAEbrE,SADWiH,KACH1H,YAAYwH,EAAmB,mBACvC/G,EAAGhB,YAAY+H,GAAmBmB,OAAOtO,SACzCoG,EAAGI,KASJiC,eAAe8F,GACpB9D,EACA+D,GAEA,MAAMxO,EAAMmM,EAAO1B,GAEbrE,SADWiH,KACH1H,YAAYwH,EAAmB,aACvCxE,EAAQvC,EAAGhB,YAAY+H,GACvBgB,QAAiDxF,EAAM9D,IAC3D7E,GAEIgI,EAAWwG,EAASL,GAa1B,YAXiBhJ,IAAb6C,QACIW,EAAM2F,OAAOtO,SAEb2I,EAAMyF,IAAIpG,EAAUhI,SAEtBoG,EAAGI,MAELwB,GAAcmG,GAAYA,EAASxC,MAAQ3D,EAAS2D,KACtDY,EAAW9B,EAAWzC,EAAS2D,KAG1B3D,ECjFFS,eAAegG,GACpBC,GAEA,IAAIC,EAEJ,MAAMC,QAA0BL,GAAOG,EAAcjE,WAAWoE,IAC9D,MAAMD,EAwBV,SACEC,GAOA,OAAOC,GAL0BD,GAAY,CAC3ClD,IAAKP,IACL2D,mBAA6C,IA7BnBC,CAAgCH,GACpDI,EAyCV,SACEP,EACAE,GAEA,GAAwC,IAApCA,EAAkBG,mBAAkD,CACtE,IAAKG,UAAUC,OAAQ,CAKrB,MAAO,CACLP,kBAAAA,EACAD,oBALmClI,QAAQE,OAC3CqC,EAAc1J,OAA6B,iBAS/C,MAAM8P,EAA+C,CACnDzD,IAAKiD,EAAkBjD,IACvBoD,mBAA6C,EAC7CM,iBAAkB/L,KAAKD,OAEnBsL,EAkBVlG,eACEiG,EACAE,GAEA,IACE,MAAMU,QCxGH7G,gBACLgC,UAAEA,EAAS8E,yBAAEA,IACb5D,IAAEA,IAEF,MAAM6D,EAAWtG,EAAyBuB,GAEpCE,EAAUP,EAAWK,GAGrBgF,EAAmBF,EAAyBG,aAAa,CAC7DC,UAAU,IAEZ,GAAIF,EAAkB,CACpB,MAAMG,QAAyBH,EAAiBI,sBAC5CD,GACFjF,EAAQC,OAAO,oBAAqBgF,GAIxC,MAAME,EAAO,CACXnE,IAAAA,EACAoE,YThCiC,SSiCjC1D,MAAO5B,EAAU4B,MACjB2D,WTnC2B,WSsCvBvI,EAAuB,CAC3BjE,OAAQ,OACRmH,QAAAA,EACAmF,KAAMG,KAAKC,UAAUJ,IAGjBzG,QAAiByB,GAAmB,IAAMqF,MAAMX,EAAU/H,KAChE,GAAI4B,EAAS+G,GAAI,CACf,MAAMC,QAAkDhH,EAASU,OAOjE,MANiE,CAC/D4B,IAAK0E,EAAc1E,KAAOA,EAC1BoD,mBAA2C,EAC3CrE,aAAc2F,EAAc3F,aAC5B4F,UAAWlH,EAAiCiH,EAAcC,YAI5D,YAAY1G,EAAqB,sBAAuBP,GD6DdkH,CACxC7B,EACAE,GAEF,OAAOtJ,GAAIoJ,EAAcjE,UAAW6E,GACpC,MAAO/Q,GAYP,MAXI0K,EAAc1K,IAAkC,MAA5BA,EAAEM,WAAWmL,iBAG7BqE,GAAOK,EAAcjE,iBAGrBnF,GAAIoJ,EAAcjE,UAAW,CACjCkB,IAAKiD,EAAkBjD,IACvBoD,mBAA6C,IAG3CxQ,GAxCsBiS,CAC1B9B,EACAU,GAEF,MAAO,CAAER,kBAAmBQ,EAAiBT,oBAAAA,GACxC,OAC+B,IAApCC,EAAkBG,mBAEX,CACLH,kBAAAA,EACAD,oBAAqB8B,GAAyB/B,IAGzC,CAAEE,kBAAAA,GA5EgB8B,CACvBhC,EACAE,GAGF,OADAD,EAAsBM,EAAiBN,oBAChCM,EAAiBL,qBAG1B,MLvCyB,KKuCrBA,EAAkBjD,IAEb,CAAEiD,wBAAyBD,GAG7B,CACLC,kBAAAA,EACAD,oBAAAA,GA6FJlG,eAAegI,GACb/B,GAMA,IAAIiC,QAAiCC,GACnClC,EAAcjE,WAEhB,KAA+B,IAAxBkG,EAAM5B,0BAEL/D,EAAM,KAEZ2F,QAAcC,GAA0BlC,EAAcjE,WAGxD,GAA4B,IAAxBkG,EAAM5B,mBAAkD,CAE1D,MAAMH,kBAAEA,EAAiBD,oBAAEA,SACnBF,GAAqBC,GAE7B,OAAIC,GAIKC,EAIX,OAAO+B,EAWT,SAASC,GACPnG,GAEA,OAAO8D,GAAO9D,GAAWoE,IACvB,IAAKA,EACH,MAAM7F,EAAc1J,OAAM,0BAE5B,OAAOwP,GAAqBD,MAIhC,SAASC,GAAqB6B,GAC5B,OAcoE,KAHpE/B,EAXmC+B,GAcf5B,oBAClBH,EAAkBS,iBRhNY,IQgN4B/L,KAAKD,MAdxD,CACLsI,IAAKgF,EAAMhF,IACXoD,mBAA6C,GAI1C4B,EAGT,IACE/B,EE5LKnG,eAAeoI,IACpBpG,UAAEA,EAAS8E,yBAAEA,GACbX,GAEA,MAAMY,EAuCR,SACE/E,GACAkB,IAAEA,IAEF,MAAO,GAAGzC,EAAyBuB,MAAckB,wBA3ChCmF,CAA6BrG,EAAWmE,GAEnDjE,EAAUH,EAAmBC,EAAWmE,GAGxCa,EAAmBF,EAAyBG,aAAa,CAC7DC,UAAU,IAEZ,GAAIF,EAAkB,CACpB,MAAMG,QAAyBH,EAAiBI,sBAC5CD,GACFjF,EAAQC,OAAO,oBAAqBgF,GAIxC,MAAME,EAAO,CACXiB,aAAc,CACZf,WVnCyB,UUoCzB3D,MAAO5B,EAAU4B,QAIf5E,EAAuB,CAC3BjE,OAAQ,OACRmH,QAAAA,EACAmF,KAAMG,KAAKC,UAAUJ,IAGjBzG,QAAiByB,GAAmB,IAAMqF,MAAMX,EAAU/H,KAChE,GAAI4B,EAAS+G,GAAI,CAIf,OADEhH,QAFqDC,EAASU,QAKhE,YAAYH,EAAqB,sBAAuBP,GCjCrDZ,eAAeuI,GACpBtC,EACAuC,GAAe,GAEf,IAAIC,EACJ,MAAMP,QAAcpC,GAAOG,EAAcjE,WAAWoE,IAClD,IAAKsC,GAAkBtC,GACrB,MAAM7F,EAAc1J,OAAM,kBAG5B,MAAM8R,EAAevC,EAASyB,UAC9B,IAAKW,GA+HT,SAA0BX,GACxB,OACqD,IAAnDA,EAAU/G,gBAKd,SAA4B+G,GAC1B,MAAMjN,EAAMC,KAAKD,MACjB,OACEA,EAAMiN,EAAU3G,cAChB2G,EAAU3G,aAAe2G,EAAU9G,UAAYnG,EXnKZ,KW2JlCgO,CAAmBf,GAlICgB,CAAiBF,GAEpC,OAAOvC,EACF,GAA8B,IAA1BuC,EAAa7H,cAGtB,OADA2H,EA0BNzI,eACEiG,EACAuC,GAMA,IAAIN,QAAcY,GAAuB7C,EAAcjE,WACvD,KAAoE,IAA7DkG,EAAML,UAAU/G,qBAEfyB,EAAM,KAEZ2F,QAAcY,GAAuB7C,EAAcjE,WAGrD,MAAM6F,EAAYK,EAAML,UACxB,OAA2B,IAAvBA,EAAU/G,cAELyH,GAAiBtC,EAAeuC,GAEhCX,EA/CUkB,CAA0B9C,EAAeuC,GACjDpC,EACF,CAEL,IAAKK,UAAUC,OACb,MAAMnG,EAAc1J,OAAM,eAG5B,MAAM8P,EAkIZ,SACEP,GAEA,MAAM4C,EAA2C,CAC/ClI,cAAwC,EACxCmI,YAAapO,KAAKD,OAEpB,OAAApE,OAAA0S,OAAA1S,OAAA0S,OAAA,GACK9C,GAAQ,CACXyB,UAAWmB,IA3IeG,CAAoC/C,GAE5D,OADAqC,EAsENzI,eACEiG,EACAE,GAEA,IACE,MAAM0B,QAAkBO,GACtBnC,EACAE,GAEIiD,EACD5S,OAAA0S,OAAA1S,OAAA0S,OAAA,GAAA/C,GACH,CAAA0B,UAAAA,IAGF,aADMhL,GAAIoJ,EAAcjE,UAAWoH,GAC5BvB,EACP,MAAO/R,GACP,IACE0K,EAAc1K,IACe,MAA5BA,EAAEM,WAAWmL,YAAkD,MAA5BzL,EAAEM,WAAWmL,WAK5C,CACL,MAAM6H,EACD5S,OAAA0S,OAAA1S,OAAA0S,OAAA,GAAA/C,GACH,CAAA0B,UAAW,CAAE/G,cAAa,WAEtBjE,GAAIoJ,EAAcjE,UAAWoH,cAN7BxD,GAAOK,EAAcjE,WAQ7B,MAAMlM,GApGWuT,CAAyBpD,EAAeU,GAChDA,MAOX,OAHkB8B,QACRA,EACLP,EAAML,UA2Cb,SAASiB,GACP9G,GAEA,OAAO8D,GAAO9D,GAAWoE,IACvB,IAAKsC,GAAkBtC,GACrB,MAAM7F,EAAc1J,OAAM,kBAG5B,MAAM8R,EAAevC,EAASyB,UAC9B,OAqFqD,KAFpBA,EAnFDc,GAqFtB7H,eACV+G,EAAUoB,YXhMoB,IWgMepO,KAAKD,MApF3CpE,OAAA0S,OAAA1S,OAAA0S,OAAA,GAAA9C,GACH,CAAAyB,UAAW,CAAE/G,cAAa,KAIvBsF,EA4EX,IAAqCyB,KAtCrC,SAASa,GACPvC,GAEA,YACwBzJ,IAAtByJ,GACgE,IAAhEA,EAAkBG,mBCjJftG,eAAesJ,GACpBrD,EACAuC,GAAe,GAEf,MAAMe,EAAoBtD,QAS5BjG,eACEiG,GAEA,MAAMC,oBAAEA,SAA8BF,GAAqBC,GAEvDC,SAEIA,EAfFsD,CAAiCD,GAKvC,aADwBhB,GAAiBgB,EAAmBf,IAC3C3H,MCYnB,SAAS4I,GAAqBC,GAC5B,OAAOnJ,EAAc1J,OAA4C,4BAAA,CAC/D6S,UAAAA,ICzBJ,MAoBMC,GACJC,IAEA,MAAMC,EAAMD,EAAUE,YAAY,OAAO7C,eAEnChB,EAAgB8D,EAAaF,EAzBV,iBAyBmC5C,eAM5D,MAJ8D,CAC5D+C,MAAO,IC5BJhK,eAAqBiG,GAC1B,MAAMsD,EAAoBtD,GACpBE,kBAAEA,EAAiBD,oBAAEA,SAA8BF,GACvDuD,GAWF,OARIrD,EACFA,EAAoB7G,MAAMrE,QAAQf,OAIlCsO,GAAiBgB,GAAmBlK,MAAMrE,QAAQf,OAG7CkM,EAAkBjD,IDcV8G,CAAM/D,GACnBqD,SAAWd,GAA2Bc,GAASrD,EAAeuC,KAMhEyB,EACE,IAAIxR,EApCmB,iBAIzBmR,IAEA,MAAMC,EAAMD,EAAUE,YAAY,OAAO7C,eAEnCjF,EDfF,SAA2B6H,GAC/B,IAAKA,IAAQA,EAAIK,QACf,MAAMT,GAAqB,qBAG7B,IAAKI,EAAItT,KACP,MAAMkT,GAAqB,YAI7B,MAAMU,EAA2C,CAC/C,YACA,SACA,SAGF,IAAK,MAAMC,KAAWD,EACpB,IAAKN,EAAIK,QAAQE,GACf,MAAMX,GAAqBW,GAI/B,MAAO,CACLzG,QAASkG,EAAItT,KACbmK,UAAWmJ,EAAIK,QAAQxJ,UACvBkB,OAAQiI,EAAIK,QAAQtI,OACpBgC,MAAOiG,EAAIK,QAAQtG,OCXHyG,CAAiBR,GASnC,MANqD,CACnDA,IAAAA,EACA7H,UAAAA,EACA8E,yBAL+BiD,EAAaF,EAAK,aAMjDS,QAAS,IAAMtM,QAAQC,aAqB+C,WAExEgM,EACE,IAAIxR,EAtC4B,yBAwC9BkR,GAED,YEzCLY,EAAgBhU,WAEhBgU,EAAgBhU,UAAe,8CCkBlB,MAAAiU,GAAbvU,cACEK,KAASmU,UAAsB,GAC/BlM,iBAAiBmM,GACfpU,KAAKmU,UAAUE,KAAKD,GAEtBE,QACEtU,KAAKmU,UAAUI,SAAQH,GAAYA,OCxChC,MCyEMnK,GAAgB,IAAI3J,EAC/B,eACA,gBAxDqE,CACrE,sBACE,kFACF,0BACE,mEACF,uBACE,wDACF,sBACE,+DACF,eACE,8EACF,cACE,mFACF,cACE,iFACF,iBACE,oFACF,uBACE,mHAEF,gBACE,iGAEF,iBACE,mOAGF,qBACE,kFAEF,eACE,0EACF,yBACE,mDClDJ,MAIMkU,GAAwB,CAAC,IAAK,OAAQ,IAAK,MAAO,IAAK,MAEhD,MAAAC,GACX9U,YACmB+U,EACAC,EARY,IAOZ3U,KAAO0U,QAAPA,EACA1U,KAAM2U,OAANA,EAGnBC,WACE,OAAO5U,KAAK2U,OAGdE,YACE,MAAqB,WAAjB7U,KAAK0U,SAGFF,GAAsBM,QAAQ9U,KAAK2U,OAAOI,gBAAkB,EAGrEC,WACE,GAAqB,WAAjBhV,KAAK0U,QACP,OAvB2B,EAyB7B,IAAIO,EAAMtK,OAAO3K,KAAK2U,QAItB,OAHIO,MAAMD,KACRA,EA3B2B,GA6BtBA,EAGTE,YACE,OAAOnV,KAAK0U,SChBA,SAAAU,GAAgB7B,EAAmB8B,KACjD9B,EAAMtR,EAAmBsR,GAEzB,OADmBE,EAAaF,EHvBD,iBGwBb5C,eAWbjH,eAAe4L,GAASC,GAC7B,MAAMC,EAAKvT,EAAmBsT,IACvBE,EAA6BC,SAA0BhO,QAAQqC,IAAI,CACxEyL,EAAGG,SAASC,iCACZJ,EAAGG,SAASE,wBAEd,SACGJ,GACAA,EAA4BK,QAC5BL,EAA4BM,MAC7BN,EAA4BM,OAASL,WAMjChO,QAAQqC,IAAI,CAChByL,EAAGQ,cAAcC,gBAAgBR,EAA4BK,QAC7DN,EAAGG,SAASO,oBAAoBT,EAA4BM,SAEvD,GAUH,SAAUI,GAAkBZ,GAChC,MAAMC,EAAKvT,EAAmBsT,GAM9B,OALKC,EAAGY,qBACNZ,EAAGY,mBAAqBZ,EAAGQ,cAAcK,kBAAkBvN,MAAK,KAC9D0M,EAAGc,2BAA4B,MAG5Bd,EAAGY,mBAQL1M,eAAe6M,GAAYhB,GAChC,MAAMC,EAAKvT,EAAmBsT,GAWxBiB,EAAc,IAAItC,GAExB/H,YAAWzC,UAET8M,EAAYlC,UACXkB,EAAGiB,SAASC,oBAGf,UACQlB,EAAGmB,QAAQvF,MAAM,CACrBwF,kBAAmBpB,EAAGiB,SAASI,2BAC/BC,OAAQN,UAGJhB,EAAGQ,cAAce,mBAAmB,WAC1C,MAAOvX,GACP,MAAMwX,EF5BM,SAAaxX,EAAUyX,GACrC,OAAOzX,aAAaC,IAAgD,IAA/BD,EAAEI,KAAKkV,QAAQmC,GE2B1BC,CAAa1X,EAAqC,kBACtE,WACA,UAEJ,YADMgW,EAAGQ,cAAce,mBAAmBC,GACpCxX,GAYJ,SAAU2X,GAAO5B,GACrB,MAAMC,EAAKvT,EAAmBsT,GAC9B,OAkHF,SAAoB6B,EAAW,GAAIC,EAAW,IAC5C,OAAOnX,OAAOoX,KAAIpX,OAAA0S,OAAA1S,OAAA0S,OAAA,GAAMwE,GAASC,IAnH1BE,CACL/B,EAAGQ,cAAcwB,kBACjBhC,EAAGiC,eACHC,QAAO,CAACC,EAAY1W,KACpB0W,EAAW1W,GAAO2W,GAASrC,EAActU,GAClC0W,IACN,IAcW,SAAAE,GAAWtC,EAA4BtU,GACrD,OAAO2W,GAAS3V,EAAmBsT,GAAetU,GAAK4T,YAezC,SAAAiD,GAAUvC,EAA4BtU,GACpD,OAAO2W,GAAS3V,EAAmBsT,GAAetU,GAAK+T,WAczC,SAAA+C,GAAUxC,EAA4BtU,GACpD,OAAO2W,GAAS3V,EAAmBsT,GAAetU,GAAK2T,WAazC,SAAAgD,GAASrC,EAA4BtU,GACnD,MAAMuU,EAAKvT,EAAmBsT,GACzBC,EAAGc,2BACNd,EAAGwC,QAAQ7U,MACT,kCAAkClC,6HAItC,MAAMgX,EAAezC,EAAGQ,cAAcwB,kBACtC,OAAIS,QAAsC7R,IAAtB6R,EAAahX,GACxB,IAAIiX,GAAU,SAAUD,EAAahX,IACnCuU,EAAGiC,oBAA2CrR,IAA1BoP,EAAGiC,cAAcxW,GACvC,IAAIiX,1.688 18.625c.408.008.807.037 1.218.063 1.88.117 3.792.43 5.688.937 15.17 4.065 24.033 19.424 19.97 34.594-4.066 15.17-19.425 24.032-34.595 19.967-15.17-4.064-24.035-19.423-19.97-34.593 3.446-12.86 15.01-21.206 27.688-20.97zm64.656 36.03c-.365 3.07-.928 6.152-1.75 9.22-.822 3.066-1.877 6.006-3.094 8.844l96.188 25.78c.97-2.948 1.874-5.934 2.687-8.97.81-3.025 1.524-6.063 2.156-9.092l-96.186-25.782zM195.78 280.22l-86.093 49.686c2.787 5.577 5.884 10.995 9.282 16.22l86.124-49.72c-3.857-4.922-6.983-10.384-9.313-16.187zm101.25 27.155c-4.92 3.86-10.383 7.01-16.186 9.344l49.812 86.25c5.566-2.81 10.942-5.96 16.156-9.376l-49.78-86.22zm-66.31 8.75l-25.782 96.188c2.947.97 5.933 1.874 8.968 2.687 3.026.81 6.065 1.524 9.094 2.156l25.78-96.187c-3.057-.367-6.128-.932-9.186-1.75-3.076-.825-6.03-1.873-8.875-3.095z"}}]})(props);
};
module.exports.GiCash = function GiCash (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M210.6 44.39l-7-4.39c-13.7-8.4-30.8-13.28-45.5-8.7-15.8 4.92-28.4 17.09-35 35.37l-9.4-4.84c-16.2-8.34-24.68-8.47-31.71-5.31-5.61 2.51-11.46 8.55-18.09 17.37l82.4 63.71c12.9 4.2 31.8 4.1 50.7-.8 19-4.9 37.9-14.5 51.7-27.4l31.1-76.9c-27.4-21.65-52.4-9.11-69.2 11.89zm53.1 76.51c-17 17.2-42.3 28.8-62 34-6.9 1.8-13.8 3.1-20.5 3.8-3.7 6.1-6.8 12.3-9.2 18.5 4.8 24.4 13.8 44.4 27.3 60.8l-14.4 12c-8.3-10-15.7-20.8-21.3-32.8-.9 23.2 4.3 47.2 12.8 72.2l-17.7 6c-15.6-45.6-20.9-92.3 1-136.3-7.4-.6-14.4-2-20.9-4.3l-.3-.1c-4.3 4.1-8.4 8.4-12.3 12.9-31.57 36.6-48.96 85.3-39.86 123.2 4.87 20.3 13.6 39.5 26.16 55.9 18.4-.4 35.8 0 51.6 6 7.5-.8 15.2-1.3 23.2-1.3 28.5 0 54.3 5.3 73.8 14.5 7.6 3.6 14.5 7.9 20 12.8 0-5.3.8-11 2.4-15.2-8.9-8.4-14.5-18.6-14.5-30.2 0-16.1 10.7-29.4 26.2-39 0-4.6.9-9 2.5-13.2-10.1-8.7-16.6-19.5-16.6-32.1 0-7.9 2.6-15.1 7-21.6-4.4-6.4-7-13.6-7-21.5 0-3.9.6-7.5 1.7-11-9.7-8.6-15.8-19.2-15.8-31.4 0-12.1 6-22.6 15.6-31.1-5.9-4.6-12.2-8.5-18.9-11.5zm111.4 2.3c-26 0-49.5 5.5-65.6 13.6-16.2 8.1-23.8 18.1-23.8 26.7 0 8.7 7.6 18.7 23.8 26.8 16.1 8.1 39.6 13.6 65.6 13.6 11.3 0 22-1.1 31.9-2.9v-17c13.9-2.1 25.4-5.9 32.8-10.8v17.6c12.5-3.6 24.5-16.9 24.8-27.3 0-8.6-7.6-18.6-23.8-26.7-16.2-8.1-39.6-13.6-65.7-13.6zm96.5 67.7c-3.3 3.5-7.2 6.8-11.6 9.8l.2 29c12.6-7.5 18.5-16.2 18.5-23.8 0-4.8-2.3-10-7.1-15zm-171.8 15.4c.3 8.6 7.9 18.3 23.8 26.3 16.2 8.2 39.6 13.6 65.7 13.6 16.3 0 31.6-2.2 44.7-5.8l.7-27.2c-17.2 6-37.6 9.3-59.6 9.3-28.5 0-54.4-5.7-74-15.5-.5-.2-.9-.5-1.3-.7zm2 34.8c-1.4 2.7-2 5.4-2 7.9 0 8.7 7.6 18.7 23.8 26.8 16.2 8.1 39.6 13.5 65.7 13.5 13.2 0 25.7-1.3 37-3.8v-24c-11.6 2.2-24 3.3-37 3.3-28.6 0-54.5-5.6-74.1-15.5-4.9-2.4-9.4-5.2-13.4-8.2zm174.9 0c-6.1 4.3-11.4 7.5-17.6 10.2v22.3c13.3-7.7 19.6-16.7 19.6-24.6 0-2.5-.6-5.2-2-7.9zm7.5 36.8c-2 2-4.2 3.9-6.6 5.8v32.4c10.3-7 15.3-14.7 15.3-21.7 0-5.3-2.9-11-8.7-16.5zm-170.1 14c-.1.9-.2 1.7-.2 2.5 0 8.7 7.6 18.6 23.8 26.7 16.2 8.2 39.7 13.6 65.7 13.6 14.9 0 29.1-1.8 41.4-4.8V300c-16.3 5.2-35.2 8-55.5 8-28.6 0-54.5-5.7-74.1-15.5-.4-.2-.7-.4-1.1-.6zm-13.6 21.4c-8.7 6.5-12.8 13.6-12.8 20 0 8.7 7.6 18.6 23.8 26.8 16.2 8.1 39.6 13.5 65.7 13.5 9.5 0 18.7-.7 27.3-2v-18.2h-1.1c-28.6 0-54.5-5.7-74.1-15.6-12.5-6.2-22.9-14.5-28.8-24.5zM463 343.9c-7.9 2.8-16.5 5.1-25.7 6.6v12.1c1.9-.8 3.8-1.6 5.6-2.5 9.8-5 16.4-10.6 20.1-16.2zm9.2 18.2c-3.8 3.8-8.2 7.2-13.1 10.3V401c13.3-7.6 19.6-16.6 19.6-24.5 0-4.6-2.1-9.6-6.5-14.4zm-348.7 2.8c-10.2.1-21.2 1.4-32.6 4.1-22.81 5.3-42.42 15-55.22 25.7-12.8 10.6-17.8 21.4-16.3 29.1 1.5 7.7 9.4 14.8 24.8 18.9 15.35 4 36.82 4.2 59.62-1.1 9.2-2.2 17.8-5 25.7-8.3v-20.7c14.6-6.5 25.5-14.3 30.4-21.9v24.4c12.1-10.4 16.8-20.8 15.4-28.4-1.4-7.7-9.4-14.8-24.8-18.8-7.7-2-16.9-3.1-27-3zm64.6 5.2c2.7 3.9 4.6 8.3 5.6 13.2 1.1 6 .6 11.8-1.2 17.5 9.9 2.6 18.9 6.1 26.7 10.5 4.4 2.4 8.5 5.3 12.1 8.3 9-2.1 16.6-5.1 22-8.7v20.6c16.1-7.6 23.5-16.9 23.5-24.3 0-7.5-7.4-16.8-23.6-24.4-16.1-7.5-39.3-12.6-65.1-12.7zm111.8 5c-.1.4-.1.9-.1 1.4 0 8.7 7.6 18.6 23.8 26.8 16.2 8.1 39.6 13.5 65.7 13.5 13.2 0 25.7-1.4 37-3.8v-26.9c-14.8 4-31.5 6.2-49.1 6.2-28.6 0-54.5-5.7-74.1-15.5-1.1-.6-2.2-1.2-3.2-1.7zm2.8 37.3c-2 3.3-2.9 6.5-2.9 9.6 0 8.7 7.6 18.6 23.8 26.8 16.2 8.1 39.6 13.5 65.7 13.5 13.2 0 25.7-1.4 37-3.8v-26.4c-11.6 2.2-24 3.4-37 3.4-28.6 0-54.5-5.7-74.1-15.6-4.5-2.2-8.7-4.7-12.5-7.5zm173.1 0c-5.8 3.9-10.9 7-16.7 9.5v24.6c13.3-7.6 19.6-16.6 19.6-24.5 0-3.1-.9-6.3-2.9-9.6zm-292.6 5.4c-3.5 4.4-7.6 8.6-12.2 12.4-15.6 13.1-37.6 23.7-63 29.6-9.06 2.1-18.06 3.4-26.7 4.1 3.2 5.3 8.83 10.5 17.07 15.1 13.63 7.7 33.63 12.9 55.83 12.9 10.1 0 19.7-1.1 28.5-3v-20.8c13.8-2.1 25.4-5.9 32.8-10.8v18.4c10-7 14.8-14.9 14.8-22.4 0-8.7-6.5-18-20.2-25.7-7.4-4.1-16.6-7.5-26.9-9.8z"}}]})(props);
};
module.exports.GiCassowaryHead = function GiCassowaryHead (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M223.7 23.1c-.7-.02-1.3-.02-2 0-14.8.35-31.3 7.84-50.4 25.69C196.8 93.94 200.6 131 193.8 170c0 .1 0 0 .1.2.6.9 2 2.7 4.2 4.7 4.4 4.1 11.5 9.4 20.4 15 17.6 11.3 41.9 24.1 66 35.5 24.2 11.3 48.2 21.2 65.1 26.6 4.7 1.6 8.7 2.6 12.1 3.3-13.2-48.7-35.8-125.2-68-177.11-17-27.34-36.4-46.96-56.4-52.95-4.4-1.3-8.9-2.06-13.6-2.14zm-40.7 162c-4.9 4.2-12 10.7-20.3 19.1-14.9 15-30.7 34.6-34.9 47.5-12.5 39.2-14.9 65.3 10.7 119.2 3.4 7.2 6.5 13.8 9.2 20l33.8 39.3 17.1-26.6 38 40.8-13 12.2-22.4-24-17.7 27.6-20.6-24.1c3.1 17.4 2.1 34.6-2.5 58.6h140.2c-29.9-46.2-32.3-59.2-51.2-119-2.9-9-3.4-20.9 1.4-32.1-5-3.3-12.4-8.5-19.9-14.8-6.6-5.5-13.3-11.9-18.7-19-5.3-7.1-9.6-15.1-9.6-24.3 0-1 0-1.9.1-2.9-3.9-4.8-6.2-10.9-6.2-17.5 0-16.5 14.5-29.4 31.2-29.4 2.3 0 4.6.3 6.8.7 4.3-3.6 8.5-6.9 12.3-9.7-13.9-7.3-27-14.7-38-21.7-9.3-5.9-17.1-11.6-22.9-17-1-1-2-1.9-2.9-2.9zm81.8 50.7c-3.8 2.6-8.5 6-13.6 10.1 4.8 5.1 7.7 11.8 7.7 19.2 0 16.5-14.5 29.4-31.2 29.4-1.5 0-2.9-.1-4.3-.3.9 1.5 1.9 3.1 3.1 4.8 4.1 5.5 9.9 11.1 15.9 16.1 7.5 6.3 15 11.4 19.6 14.4 6.6-5 15.4-8.2 26.2-8 40.7.6 109.2 19.1 152.5 46.1.2-2.3-.3-5.6-1.9-9.9-3.4-8.8-11.4-20.4-21-32-17.3-20.6-39.2-40.6-50.5-51.4h-.6c-6.2-.4-13.5-2.3-22.6-5.2-18.1-5.9-42.5-15.9-67.2-27.5-4-1.9-8.1-3.9-12.1-5.8zm-37.1 17.8c-7.9 0-13.3 5.5-13.3 11.5 0 3.1 1.4 6 3.8 8.1a15.45 12.59 0 0 1-.1-1.8 15.45 12.59 0 0 1 15.4-12.6 15.45 12.59 0 0 1 6 1c-2.1-3.6-6.4-6.2-11.8-6.2zm-64.9 4.2l16.8 6.2c-6.1 16.3-6.3 16.9-6.3 29.4l-17.8.2c-.2-13.3 1.2-19.3 7.3-35.8zm198.4 43c13.7.1 23.2 5.1 31 8.4l-7 16.4c-8.8-3.7-14.7-6.9-24.2-6.9l.2-17.9z"}}]})(props);
};
module.exports.GiCastleRuins = function GiCastleRuins (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M382.975 17.701L306.678 119.43 459.27 93.998l-76.296-76.297zM106.24 77.895l-17.5 4.21 34.05 141.487 13.6-20.405-30.15-125.292zm-35.209 7.683c-8.85 41.457-17.725 90.065-41.402 111.129 9.026 2.35 21.416-1.194 34.652-23.71 6.948 15.963 2.313 17.464-1.957 28.737 16.561-3.429 25.204-18.531 24.873-37.806l-16.166-78.35zm366.957 30.215L361 128.623V160h-18v-28.377l-32 5.334V199h82v32h30v-32h15.846l-18.776-56.33 17.918-26.877zM148.816 217l-31.04 46.563-41.085 13.695 32 63.998-55.83 18.611L25 387.727V487h90.512l-11.075-33.225-45.43-30.287 9.985-14.976 50.57 33.713L134.488 487h147.95l27.845-55.69-13.398-40.195L208 361.488l-45.154 15.051-5.692-17.078 44.04-14.68 28.245-70.613L204.273 249H151v-32h-2.184zM217 217v19.273l28.33 28.329 62.695 31.347-8.05 16.102-55.252-27.625-24.82 62.054 91.212 30.405 16.752 50.254 31.53 31.529L373.562 487H487V336.816L452.525 359.8l-32.5 16.252-8.05-16.102 31.5-15.748L487 315.184V217h-46v32h-66v-32h-46v32h-66v-32h-46z"}}]})(props);
};
module.exports.GiCastle = function GiCastle (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M255.95 27.11L180.6 107.614l150.7 1.168-75.35-81.674h-.003zM25 109.895v68.01l19.412 25.99h71.06l19.528-26v-68h-14v15.995h-18v-15.994H89v15.995H71v-15.994H57v15.995H39v-15.994H25zm352 0v68l19.527 26h71.06L487 177.906v-68.01h-14v15.995h-18v-15.994h-14v15.995h-18v-15.994h-14v15.995h-18v-15.994h-14zm-176 15.877V260.89h110V126.63l-110-.857zm55 20.118c8 0 16 4 16 12v32h-32v-32c0-8 8-12 16-12zM41 221.897V484.89h78V221.897H41zm352 0V484.89h78V221.897h-78zM56 241.89c4 0 8 4 8 12v32H48v-32c0-8 4-12 8-12zm400 0c4 0 8 4 8 12v32h-16v-32c0-8 4-12 8-12zm-303 37v23h-16v183h87v-55c0-24 16-36 32-36s32 12 32 36v55h87v-183h-16v-23h-14v23h-18v-23h-14v23h-18v-23h-14v23h-18v-23h-14v23h-18v-23h-14v23h-18v-23h-14v23h-18v-23h-14zm-49 43c4 0 8 4 8 12v32H96v-32c0-8 4-12 8-12zm72 0c8 0 16 4 16 12v32h-32v-32c0-8 8-12 16-12zm80 0c8 0 16 4 16 12v32h-32v-32c0-8 8-12 16-12zm80 0c8 0 16 4 16 12v32h-32v-32c0-8 8-12 16-12zm72 0c4 0 8 4 8 12v32h-16v-32c0-8 4-12 8-12zm-352 64c4 0 8 4 8 12v32H48v-32c0-8 4-12 8-12zm400 0c4 0 8 4 8 12v32h-16v-32c0-8 4-12 8-12z"}}]})(props);
};
module.exports.GiCat = function GiCat (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M463.46 37.008l-30.694 50.738-7.043-2.28c-27.146-8.797-71.525-7.15-97.6.11L321.22 87.5l-28.68-48.543c-33.63 69.254-32.264 117.56-14.79 148.574 18.71 33.208 57.378 49.09 99.117 48.574 48.743-.606 88.968-19.665 107.035-54.194 16.918-32.332 15.684-80.456-20.443-144.902zM323.935 137.594c18.45.1 29.36 15.338 31.462 36.644-37.11 17.91-53.963 3.398-61.173-26.545 11.382-7.063 21.324-10.144 29.71-10.1zm109.26 0c8.385-.045 18.328 3.036 29.71 10.1-7.21 29.942-24.064 44.454-61.174 26.544 2.104-21.306 13.014-36.545 31.463-36.644zm-293.553 50.96c-1.226-.01-2.446-.003-3.66.018-30.175.536-56.142 10.59-75.743 26.574-43.444 35.43-57.27 100.752-12.824 166.192 20.293 33.995 44.432 54.24 70.797 64.187 32.85 12.395 66.655 8.823 99.94 4.114 33.284-4.71 65.854-10.63 96.896-8.42 31.04 2.212 62.09 10.18 90.505 41.165 19.374 21.125 46.887-1.627 23.82-24.156-35.024-34.207-72.527-47.42-109.377-50.04-36.85-2.62-72.2 4.698-104.207 9.228-32.007 4.53-60.272 6.552-84.558-2.61-14.39-5.43-28.308-14.802-41.55-31.142h351.744c13.673-52.293 14.867-106.368 1.873-142.072-19.765 8.49-42.412 12.9-66.2 13.197h-.002c-29.85.37-59.458-6.925-82.907-22.823-4.647 3.012-9.407 6.23-14.292 9.685l-5.734 4.057-5.49-4.382c-46.63-37.2-91.028-52.48-129.03-52.773z"}}]})(props);
};
module.exports.GiCatapult = function GiCatapult (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M197.746 30.38l-9.898 30.905-40.485 18.194-28.79 28.055 30.855 35.512 47.486-4.596 36.06 8.35 30.83-33.52-4.263-56.7-61.794-26.2zM25.902 133.32c-13.472 25.957-6.665 67.412 30.356 96.746 37.04 29.35 78.807 26.396 100.855 7.223L25.903 133.32zm359.174 68.99l-34.152 11.38 7.217 21.65-227.6 147.94c12.527 4.355 23.416 12.25 31.466 22.484L369.904 270.63l36.303 108.913c16.727.414 31.995 6.866 43.7 17.264l-64.83-194.498zM171.484 248.67c-9.358 9.058-21.296 15.425-34.656 18.715l63.496 49.064L232.3 295.67l-60.816-46.996zM292.66 342.31l-31.976 20.784L317.504 407h32.183c3.296-4.39 7.104-8.377 11.336-11.865L292.66 342.31zM108.166 397.5c-27.997 0-50.5 22.503-50.5 50.5s22.503 50.5 50.5 50.5 50.5-22.503 50.5-50.5-22.503-50.5-50.5-50.5zm296.334 0c-27.997 0-50.5 22.503-50.5 50.5s22.503 50.5 50.5 50.5S455 475.997 455 448s-22.503-50.5-50.5-50.5zM25 425v46h18.66c-2.58-7.196-3.994-14.937-3.994-23s1.415-15.804 3.994-23H25zm147.672 0c2.58 7.196 3.994 14.937 3.994 23s-1.415 15.804-3.994 23h167.322c-2.58-7.196-3.994-14.937-3.994-23s1.415-15.804 3.994-23H172.672zm296.334 0c2.58 7.196 3.994 14.937 3.994 23s-1.415 15.804-3.994 23H487v-46h-17.994zm-360.84 3.166A19.833 19.833 0 0 1 128 448a19.833 19.833 0 0 1-19.834 19.834A19.833 19.833 0 0 1 88.334 448a19.833 19.833 0 0 1 19.832-19.834zm296.334 0A19.833 19.833 0 0 1 424.334 448a19.833 19.833 0 0 1-19.834 19.834A19.833 19.833 0 0 1 384.666 448a19.833 19.833 0 0 1 19.834-19.834z"}}]})(props);
};
module.exports.GiCatch = function GiCatch (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M36.98 18l350.006 400.08c10.916 10.836 45.478-17.1 35.515-28.521L96.311 18zm237.871 75.049c-3.528-.018-7.08.44-10.687 1.293-4.523 1.091-6.394 3.412-7.073 7.992-3.196 21.83-6.453 43.604-9.748 65.395l29.473 33.843c1.519-10.236 3.04-20.474 4.52-30.605 3.43-22.962 6.841-45.947 10.333-68.867.483-3.197.196-5.09-3.255-6.454-4.53-1.765-9.027-2.574-13.563-2.597zm77.889 12.672c-1.442-.052-3.549 1.02-4.235 2.265-13.995 24.056-27.87 48.222-41.71 72.377-5.923 10.289-11.93 20.508-18.008 30.992L378.29 314.22c31.152-15.378 62.322-30.761 93.373-46.278 1.577-.796 3.12-3.293 3.253-5.127.7-9.277-2.2-17.538-8.007-24.775-1.954-2.473-3.744-3.432-7.094-1.834-18.946 9.378-38.051 18.465-57.139 27.625a12908.93 12908.93 0 0 0-39.039 18.908 3146.205 3146.205 0 0 0-10.433-15.129 260.85 260.85 0 0 0 3.255-3.138c28.947-27.247 57.84-54.56 86.805-81.748 2.611-2.382 3.176-4.469 2.006-7.664-2.825-7.68-7.444-13.744-14.406-18.303-3.881-2.55-6.277-2.224-9.649 1.033-12.749 12.205-25.803 24.113-38.752 36.12-17.15 15.944-34.304 31.91-51.576 47.74-1.133 1.128-3.92 2.14-4.773 1.519-4.408-3.04-8.485-6.688-12.633-10.12 9.769-16.682 19.24-32.9 28.77-49.116 11.56-19.79 23.14-39.55 34.501-59.473.86-1.48 1.114-4.37.176-5.654-5.79-8.301-13.937-12.907-24.19-13.084zm-210.93 94.494c-6.05.006-11.888 2.65-17.666 7.982 1.095 1.384 2.264 2.752 3.356 4.155 12.784 16.33 25.768 32.55 38.341 49.097 15.007 19.828 29.061 40.47 44.752 59.766 11.073 13.548 23.803 26.138 44.096 23.818a2753.003 2753.003 0 0 1 3.215 17.996c-24.303 3.428-41.3-8.792-57.344-24.638-1.017 2.67-1.6 4.52-2.42 6.312-7.719 16.98-14.814 34.267-23.314 50.818-8.869 17.258-47.666 68.734-71.535 98.479h177.12c.842-12.673 1.754-26.345 3.008-36.84 3.179-27.273 7.778-54.274 19.206-79.553 3.273-7.29 7.58-13.722 12.935-19.158l-95.39-109.648c-.062.506-.1.993-.14 1.478-.074.86-1.07 2.148-1.812 2.323-5.358.974-10.955 2.884-16.021 2.048-2.96-.489-5.069-5.636-7.547-8.714-1.15-1.406-2.18-2.865-3.31-4.27-10.1-12.61-19.514-25.868-32.92-35.342-5.769-4.065-11.272-6.114-16.61-6.11z"}}]})(props);
};
module.exports.GiCaterpillar = function GiCaterpillar (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M248.5 135.7c19.6 32.3 23.9 68.6 17.7 102.5 15.1 2.7 27.5 13.6 39.9 27.6 2.7 3.1 5.5 6.4 8.3 9.8 10.6-11.3 17.7-28.2 20.2-47.2 2.8-21.8-.7-45.4-10-63.1-.3-.4-.7-.9-1-1.3a22.65 43.28 6.281 0 1-26.1 32.2 22.65 43.28 6.281 0 1-17.5-45.9 22.65 43.28 6.281 0 1 2.2-11.6c-8-1.9-17.3-2.9-28.1-3zm-20.5 1.5c-5.2.6-10 1.5-14.3 2.6a37.86 20.25 64.9 0 1 2.1 3.9 37.86 20.25 64.9 0 1-.9 43.9 37.86 20.25 64.9 0 1-34.4-23.9 37.86 20.25 64.9 0 1-2.1-4.7c-6.3 6.5-10.9 14.1-14.7 22.7 21.7 14.6 33.3 33.9 38.5 53.9 2.3 8.5 3.5 17.1 4.2 25.6 1.2-1.5 2.5-2.9 3.8-4.3 10.3-11.1 21.8-17.6 37.8-19.2 7-33.8 2.3-69.4-20-100.5zM157.2 199c-1.6 4.9-3.1 10-4.7 15.1a25.71 14.31 34.53 0 1 12.6 26.1 25.71 14.31 34.53 0 1-22.4 1.1c-1.5 3.5-3.2 6.9-5.1 10.3 15.2 6.9 24.5 18.6 29.1 31.8 2.3 6.6 3.8 13.5 4.7 20.4 6.8-7.8 12.5-14.8 17.6-21.1 0-14.8-.7-29.4-4.2-42.5-4.1-15.8-11.7-29.6-27.6-41.2zm326 22.1c-13.4 17.1-18.8 39.2-21.3 59.5.1.1.3.1.5.2 5.8 2.4 11.5 5 16.8 8 2.4-20.5 7.1-42.5 18.2-56.7zm-130.7 8.6c0 .4-.1.7-.1 1.1-3 22.6-11.7 44.4-26.7 59.1 8 10.3 16.6 21.7 26.4 33.6 1.2 1.5 4.3 3.6 8.7 5.8 18.2-16.4 27.5-33.5 28.2-51.9-2.8-1.3-5.4-2.8-7.8-4.5a14.31 25.71 27.97 0 1-19.3 8 14.31 25.71 27.97 0 1-.6-29.4 14.31 25.71 27.97 0 1 .5-.9l-1.8-3.3c-2.8-5.6-5.3-11.5-7.5-17.6zM242 256c-7.9 1.5-12.8 5.5-19.9 13.2-1.4 1.5-2.9 3.2-4.4 5a20.74 15.03 67.92 0 0 .2.4 20.74 15.03 67.92 0 0 22.5 6.5A20.74 15.03 67.92 0 0 242 256zm30.9 4.7a15.58 20.74 40.18 0 0-6.6 25 15.58 20.74 40.18 0 0 23.9 1.6 15.58 20.74 40.18 0 0 5-5.1c-1.3-1.5-2.6-3.1-3.9-4.5-6.7-7.7-12.8-13.3-18.4-17zm-145.3 5.8c-.2.2-.4.5-.6.7a25.71 14.31 62.03 0 1-2.5 25.3 25.71 14.31 62.03 0 1-19.4-8.2c-1.2.4-2.5.8-3.8 1.2 6.2 11.2 8.8 23.2 9.3 34.1.2 6-.1 11.8-.8 17.1 6.4-.9 12.6-2.1 18.2-3.5 14-3.5 25-9.1 26.8-11 .1-.1.1-.2.2-.2-1-12.2-2.2-23.7-5.3-32.7-3.8-10.8-9.1-18.7-22.1-22.8zm279 16.2c-2.1 19.3-11.6 37.2-27 53.3.5.1.9.2 1.4.3 11.9 2.8 25.9 4.7 40 5.4 10.3-17 15.5-35.7 13-52-1.3-.3-2.7-.7-4-1.1a10.65 21.91 5.821 0 1-10.8 10.5 10.65 21.91 5.821 0 1-8.3-15.4c-1.5-.4-2.9-.7-4.3-1zM81.97 288c-4.53.2-9.08.2-13.55.2a25.89 16.75 75.16 0 1-11.93 20.9 25.89 16.75 75.16 0 1-20.99-18.5c-3.11.9-5.69 2.1-7.62 3.6-4.52 3.6-7.62 9-6.95 22.8.38 7.8 5.04 12.5 15.86 16.6 10.81 4.2 26.75 6 43.35 5.7 3.69-.1 7.41-.3 11.12-.5 1.02-5.7 1.65-12 1.38-18.5-.46-11-3.12-22.1-10.67-32.3zm370.63 7.8c.6 15.6-3.8 31.4-11.1 46 13.9-.5 26.7-2.3 35.7-5.2 5.6-1.9 9.7-4.2 11.7-6.1 2.1-1.9 2.3-2.7 2.2-4.5-.3-4.9-3.2-9.6-9.3-14.7-6-5-15-9.8-24.9-13.8-1.4-.6-2.9-1.1-4.3-1.7zm-259.6 9c-6 7.2-12.8 15.1-21 23.9a20.77 16.07 52.56 0 0 4 4.4 20.77 16.07 52.56 0 0 24.7.2 20.77 16.07 52.56 0 0-6-27.1 20.77 16.07 52.56 0 0-1.7-1.4zm125.5 6.9a14.85 20.66 27.26 0 0-3.2 26.7 14.85 20.66 27.26 0 0 22.4-2.5c-.3-.3-.6-.7-.9-1-6.7-8.2-12.6-15.8-18.3-23.2zm-171.7 34.5c-4.8 1.7-10.1 3.1-15.8 4.5-3.1.8-6.4 1.5-9.8 2.1a20.74 13.19 72.3 0 0 2.8 6.9 20.74 13.19 72.3 0 0 19.9 8.2 20.74 13.19 72.3 0 0 2.9-21.7zm-103.96 8.2a13.25 20.94 0 0 0 0 .2 13.25 20.94 0 0 0 13.25 20.9 13.25 20.94 0 0 0 13.12-18.2c-9.16-.2-18.08-1.1-26.37-2.9zm435.16.3c-8.3 2.4-17.7 3.8-27.7 4.6a20.48 14.24 70.89 0 0 3.2 5.7 20.48 14.24 70.89 0 0 21.1 3.9 20.48 14.24 70.89 0 0 3.4-14.2zm-96.6.4a20.76 15.54 83.84 0 0 1.2 7.4 20.76 15.54 83.84 0 0 20.4 12.7 20.76 15.54 83.84 0 0 9.4-15.9c-10.7-.8-21.3-2.2-31-4.2z"}}]})(props);
};
module.exports.GiCauldron = function GiCauldron (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M410.478 374.033c50.192-40.902 82.002-101.322 82.002-168.791 0-39.775-11.145-77.055-30.493-109.388a207.118 207.118 0 0 0 5.876-1.474c12.638-3.438 20.085-16.457 16.66-29.095-3.425-12.638-16.424-20.108-29.093-16.702-.733.199-74.898 19.832-193.895 19.832-110.53 0-202.801-19.902-203.718-20.103-12.818-2.797-25.447 5.308-28.254 18.101-2.804 12.798 5.292 25.445 18.091 28.253.315.07 1.27.276 2.707.574-19.575 32.472-30.84 69.98-30.84 110.002 0 68.303 32.587 129.4 83.864 170.31l-24.663 55.324c-5.338 11.965.042 25.993 12.007 31.327 12.296 5.259 26.798-2.42 31.332-12.012l21.674-48.613c33.399 17.026 71.63 26.698 112.263 26.698 41.476 0 80.435-10.097 114.325-27.786l22.157 49.702c7.795 11.978 19.23 17.286 31.331 12.011 11.966-5.334 17.346-19.361 12.007-31.326zm-90.163-242.518c-7.512 24.69-2.9 36.895 3.11 54.952 5.987 17.983-6.469 29.056-14.63 29.056-8.156 0-21.41-11.499-14.918-29.056 13.532-36.59-8.026-54.037-8.615-53.989-.033.003-8.379 11.894-7.907 26.89 1.118 35.315 13.779 94.118-1.723 94.118-15.826 0 .463-81.382-31.972-116.972-26.704 1.119-26.015-1.388-47.65-2.632-23.353 16.934-8.423 44.864-21.866 44.864-15.428 0-1.586-21.75-8.458-31.726-17.374-25.214-37.565-7.444-38.913 3.145.222 18.93 4.249 27.993 5.204 33.82 1.826 11.155-6.168 20.464-13.773 20.464-7.609 0-13.777-9.16-13.777-20.464 0-5.677 5.037-18.096 6.905-33.982-5.262-21.376-13.898-38.007-33.576-45.124 83.853 9.403 240.356 19.834 344.19 3.476-31.871 12.565-71.261 20.029-101.69 23.006.013.054.078.098.06.154z"}}]})(props);
};
module.exports.GiCavalry = function GiCavalry (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M258.962 29.14c-3.21.063-6.68 1.158-10.303 3.4-5.798 3.584-11.47 10.14-14.872 18.715-3.4 8.575-3.767 17.236-2.004 23.82 1.763 6.585 5.248 10.765 9.83 12.583 4.582 1.817 9.986 1.165 15.784-2.42 5.797-3.586 11.467-10.143 14.87-18.717 3.4-8.573 3.767-17.235 2.005-23.82-1.763-6.584-5.25-10.764-9.832-12.58-1.718-.683-3.55-1.018-5.478-.98zm83.428 36.012c-8.823 13.437-17.545 27.577-36.268 45.2l-1.615 1.52-2.137.596c-9.165 2.554-19 3.7-28.863 4.48-.54 5.822-1.76 11.47-3.492 16.946 14.814.187 28.827-.778 41.297-4.62 18.26-17.188 36.623-35.375 44.685-56.7l-13.607-7.422zm-133.135 31.58c-.172 0-.348.005-.527.02-1.248.117-2.846.825-5.022 2.126-11.898 12.29-14.007 33.196-.867 57.082 5.73 10.42 18.094 18.277 33.66 23.58 13.165 4.485 28.138 7.013 41.808 8.51l3.71-13.443c-6.24-1.808-14.008-3.65-22.142-6.082-11.813-3.53-24.576-8.437-34.355-18.432l-.343-.35-.303-.388c-5.047-6.43-5.557-13.842-5.6-22.496-.037-7.045.813-15.254 2.02-24.023-3.345-2.203-6.258-4.21-8.39-5.088-1.395-.575-2.445-1.008-3.65-1.018zm29.242 12.676c-.806 6.653-1.25 12.573-1.226 17.36.035 6.717 1.526 10.814 1.69 11.21 1.988 1.936 4.304 3.67 6.87 5.24 4.536-8.52 8.03-16.96 9.363-25.23l-16.696-8.58zm202.955 36.5c-38.698.407-97.748 25.527-127.31 46.75l21.93 26.664c23.08-25.157 50.67-42.282 78.29-49.248 28.02-7.068 56.45-3.25 78.33 13.597 1.784-1.8 2.504-3.56 2.694-5.432.305-3.01-.998-7.446-4.865-12.283-7.734-9.675-24.947-19.342-45.388-20.008-1.204-.04-2.43-.052-3.68-.04zm-259.16 8.734c-6.568 16.39-10.208 33.35-7.805 47.883 2.263 13.104 8.145 17.46 18.125 21.94 9.99 4.483 23.807 7.117 36.907 14.036l6.466 3.417-2.022 7.03c-5.67 19.72-14.65 38.776-28.312 56.41 8.66 10.85 24.016 19.95 40.84 29.016l6.138-10.893-17.434-29.078 4.14-4.914c10.787-12.804 16.836-38.882 20.882-55.754-7.692-7.7-25.79-16.08-42.803-28.55l-6.36-4.66 3.784-6.917c.52-.952 1.076-1.906 1.62-2.86-12.188-5.97-22.86-14.237-29.39-26.11-1.823-3.313-3.407-6.652-4.778-9.995zm260.135 29.922c-7.587-.093-15.517.908-23.664 2.963-26.07 6.576-53.767 24.346-75.986 51.377l-6.952 8.457-33.34-40.54c-1.77.288-3.426.55-5.21.842 9.908 16.11 16.95 31.17 25.693 40.888 5.715 6.352 11.743 10.584 20.38 12.742 8.025 2.006 18.66 2.104 33.263-1.126-2.695-7.855-2.26-16.004-.318-23.077 2.52-9.172 7.08-17.28 10.78-24.534l16.035 8.184c-2.167 4.244-4.322 8.392-6.112 12.324 5.102-.272 13.1-.745 20.61-1.246 8.984-.6 14.34-.982 17.38-1.197 1.703-3.57 3.562-6.718 5.905-9.497 3.513-4.17 8.686-7.383 14.256-8.108 1.392-.18 2.764-.257 4.13-.234 6.8.114 13.423 2.692 21.293 6.686 1.867-6.108 3.71-12.142 5.54-18.045-12.05-11.18-27.044-16.652-43.683-16.856zM277.92 210.86c-4.448.743-8.952 1.51-13.448 2.27 5.022 3.758 9.534 8.032 13.05 13.293l2.204 3.297-.948 3.852c-3.357 13.658-7.853 41.85-21.802 62.15l16.474 27.48-14.802 26.26c6.94-1.8 13.538-4.246 19.607-7.447l11-5.8 2.074 12.26c5.978 35.36-13.102 68.48-22.475 99.294 6.508 9.05 12.247 14.98 17.275 20.388 4.097 4.407 8.004 9.006 10.654 14.683h28.254c-1.863-9.857-5.227-15.497-17.834-26.75l-5.578-4.98 3.87-6.396c15.287-25.248 24.903-82.92 28.925-111.46l.92-6.526 6.503-1.092c10.253-1.72 16.833-5.857 22.162-11.826 5.33-5.97 9.233-14.076 12.258-23.29 1.334-4.067 2.448-8.31 3.478-12.62-16.163 3.494-29.45 3.68-40.754.855-12.36-3.088-21.957-9.893-29.4-18.164-12.948-14.39-20.65-32.733-31.665-49.73zm-108.337 19.524c-14.047 2.79-27.408 5.57-39.43 8.29-12.594 4.275-20.655 10.807-26.92 19.765-6.32 9.03-10.644 20.798-14.083 34.75-6.85 27.778-10.026 63.737-23.073 100.858l-17.465 65.434c3.948 3.74 7.722 6.273 11.717 9.855 3.488 3.13 6.69 7.757 8.58 13.504h23.447c.593-9.5-2.71-19.834-10.856-26.5l-5.18-4.235 26.142-62.953 5.35-.537c21.24-2.133 40.548-26.11 51.19-40.262l3.75-4.982 5.982 1.758c22.6 6.637 49.11 10.156 73.326 7.377-21.107-11.086-43.545-22.54-55.405-43.017l-3.175-5.483 4.09-4.84c12.58-14.873 20.877-30.868 26.6-47.8-8.712-3.39-18.953-6.002-28.93-10.48-5.508-2.472-10.967-5.897-15.657-10.5zm288.38.46c-.19-.005-.353.002-.493.02-1.118.146-1.406.185-2.817 1.858-1.352 1.604-3.214 4.944-5.216 9.785-1.614 5.982-.063 10.297 4.242 15.903 2.565 3.34 6.158 6.746 10.16 10.117 4.106-10.06 7.79-20.716 11.25-31.467-9.026-4.414-14.86-6.17-17.128-6.217zm-340.25 13.26c-.02 0-.32.076-.358.08.37.02.43-.086.36-.08zm313.353 4.83c-4.126.288-5.917.422-12.262.845-10.82.72-21.303 1.44-26.12 1.497.313 2.1 1.08 4.127 2.41 6.265l.532.854.33.95c.627 1.807 1.2 3.502 1.744 5.15 2.49 4.435 9.938 11.22 20.264 16.535 10.333 5.317 23.014 9.548 34.29 11.682 1.334-2.325 2.624-4.727 3.876-7.19-5.863-4.615-11.877-9.832-16.727-16.148-4.34-5.652-7.67-12.72-8.337-20.44zm-347.57 7.306c-5.687 2.507-11.285 5.163-16.114 7.74-6.134 3.273-10.633 6.54-12.37 8.03-4.556 15.79-6.52 30.088-11.78 44.884-4.72 13.276-12.487 26.58-26.66 40.11 11.624 10 23.234 16.21 37.47 15.316 8.202-29.22 11.38-58.08 17.63-83.44 2.888-11.71 6.472-22.743 11.825-32.64zm320.41 37.61c.224 5.742-.135 11.87-.944 19.608-.05 6.863 3.644 11.33 9.248 12.71 5.623 1.388 14.58-.295 24.822-12.622l.204-.244.22-.23c1.315-1.372 2.59-2.824 3.836-4.324-10.776-2.654-21.76-6.668-31.562-11.71-1.99-1.025-3.925-2.093-5.825-3.19zm-27.463 33.017c-6.36 6.718-14.816 11.936-25.082 14.857-.01.077-.026.17-.037.248l15.336 17.203-8.665 25.655-14.53 3.216c-1.706 8.07-3.678 16.264-5.95 24.278.423.08.85.17 1.27.246 10.442 1.892 19.172 1.915 26.915-1.684 17.515-18.86 28.118-31.565 31.95-53.44-1.87-7.903-10.127-20.008-19.666-29.138-.512-.49-1.026-.967-1.54-1.44zm-210.993 42.66c-5.333 6.792-12.013 14.51-20.16 21.164 16.307 31.444 34.568 62.892 57.48 92.173h26.753c-28.96-35.58-47.84-75.123-64.073-113.336z"}}]})(props);
};
module.exports.GiCaveEntrance = function GiCaveEntrance (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M346.951 24.582L299.193 72.34l-101.136-7.024-40.97 80.737 68.688 25.35 37.153-19.936 8.511 15.861-44.293 23.768-79.7-29.416-70.19 55.341 35.117 58.995-.375.2 13.014 21.585 29.134 2.361 55.06-35.123 9.679 15.176-60.16 38.377-44.364-3.596-18.23-30.234-56.8 30.586 33.712 61.804-33.713 40.735L18 444.177V494h170.62l-5.6-45.592a260.658 260.658 0 0 1-5.147-4.512c-4.186-3.761-5.89-5.444-8.027-7.484l-73.13 21.797-21.339-20.484 12.467-12.985 13.777 13.225 73.068-21.78 3.784 3.667s4.24 4.09 9.216 8.636l37.797-37.248 8.133 79.54 6.3-93.444 10.364 28.387 6.281-45.112 3.14-3.091-.29-.233 22.486-27.974.465-.907.188.096 11.453-14.248 14.03 11.277-9.122 11.348 67.803 34.715 27.008-9.489 22.478 17.71 22.924-12.036 8.367 15.938-33.262 17.46-23.875-18.81-24.964 8.772-9.584-4.907 39.04 87.842L383.923 494H494v-28.512L462.713 478.2l-6.776-16.678L494 446.06V211.176l-23.438-26.463-21.654-67.371-33.547 32.666-107.77-13.873-28.019-29.096 12.967-12.486 23.629 24.539 92.867 11.953 31.442-30.615-52.79-61.801zm27.53 177.74l34.177 41.428 28.863-6.56-4.136-13.59 17.22-5.243 9.77 32.098-58.543 13.307-31.377-38.033-33.086 19.853-9.262-15.436z"}}]})(props);
};
module.exports.GiCaveman = function GiCaveman (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M159.1 25.62l-3.5 12.53 134.9 36.28 4.4-13.19zM316.4 54.6l-8.6 25.73c14.6 13.43 29.6 14.58 47.1 13.07l6-29.18c-12.6-6.91-27.8-9.25-44.5-9.62zm128 27.27l-29.6 8.09-4.7 17.24 23.8 23 52.1-11.7zm-68.5.58L373 96.57l19.6 5.33 3.8-14.07zm-174.6 7.46c-7.3.18-14.4 3.61-20.7 9.95-7 7.24-12.4 18.24-13.9 31.04s1.4 24.7 6.7 33.3c5.4 8.4 12.7 13.5 21.1 14.4 8.4.8 16.7-2.6 23.8-9.9 7-7.2 12.5-18.2 14-31.1 1.4-12.7-1.5-24.6-6.8-33.1-5.4-8.55-12.7-13.61-21-14.47-1-.11-2.1-.15-3.2-.12zm113.3 16.39c-4.6 33.6-11.8 60.1-22 88.3l-27.5-3.6c-.4 15-2.4 30-7.5 45.2 20.6-.5 40.2-2.8 59.3-11.3 11.3-37.8 18.4-75.3 24.3-112.9-8.9-.4-17.8-1.9-26.6-5.7zm-174.1 76.9c-8.7 0-15.5.7-26.6 4.1-26.62 16.2-45.72 40.2-53 57.9-8.4 20.9-11.67 47-11.26 70.5l25.64 3.2c3.41-24 4.92-41.7 10.83-60.8l47.29-34-2.9 45.9 7.5-2.3c18-9.1 30.5-20.7 41.3-34.1 9.4-11.6 17.3-24.5 25.7-37.5-4.1.8-8.2 1-12.5.6-10.5-1-19.6-5.9-26.9-13.1-10.9 0-18.7-.4-25.1-.4zm106.1 4.8l-13.7.2c-12.9 17-23.3 36.5-37.9 55 6.4 2.3 11.4 8.4 11.5 13.9-.9 10.3-10.6 15-19 15.1-6.1-.4-11-2-15-5.6-12.1 10-26.8 18.8-45.4 25.2.2 2.4.5 4.9.6 7.3 3.1-1 6.3-1.5 9.8-1.5 11.5.3 23.1 7.4 23.3 18.1-1.3 12.4-13.3 18-23.3 18.1-3.7 0-7.2-.6-10.3-1.8-.9 7.5-2.5 15.1-5.1 22.7l27 2.5 5.8 29.4 24.9-23 12.5 32.3c5.4-10.2 11-20.4 17.2-30.4-11.3-.2-23.6-6.5-23.9-16.7 1.3-12.5 14.3-16.7 24-16.8 7.3.4 13.8 1.8 19 6.2 7.8-9.8 16.6-19.1 26.4-27.8-1.3-3.4-3-7-5.1-10.6-3 .8-6.4 1.2-9.9 1.2-10.2-1.1-22.7-3.5-22.9-14.5.4-6.3 4.9-10.2 9.9-12.3 1.3-.5 2.7-.9 4.1-1.2-2.7-3.5-5.1-6.5-7.8-10.1l3.7-5.5c15.5-23.2 19.4-45.3 19.6-69.4zm4.2 152c-8 8.9-15 18.3-21.6 28.3 4.5 3.8 9.4 7.8 14.2 11.9 9.4 8 19.2 17 21.7 30.3l14.4 75.9 27.8-10.4c-3.6-28.8-5.3-48.9-12.7-81.3v-.3l-.1-.3c-1.6-10-10.3-20.4-21.8-31.6-7.1-7-15.1-14.3-21.9-22.5zM126 373.4l-20 50.1c-24.75 5.4-51.43 1-72.64-3.4l-7.39 23.7c32.23 6.1 74.93 10.2 97.83 5.9l18.8-31.1-8.8-44.5z"}}]})(props);
};
module.exports.GiCctvCamera = function GiCctvCamera (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M109.285 30.402c-14.82-.007-30.414 2.144-46.822 6.932a9.5 9.5 0 0 0-.145.05 9.5 9.5 0 0 0-.496.173 9.5 9.5 0 0 0-.39.152 9.5 9.5 0 0 0-.47.218 9.5 9.5 0 0 0-.384.193 9.5 9.5 0 0 0-.463.273 9.5 9.5 0 0 0-.342.22 9.5 9.5 0 0 0-.435.32 9.5 9.5 0 0 0-.324.256 9.5 9.5 0 0 0-.397.357 9.5 9.5 0 0 0-.297.29 9.5 9.5 0 0 0-.37.405 9.5 9.5 0 0 0-.247.293 9.5 9.5 0 0 0-.342.463 9.5 9.5 0 0 0-.215.315 9.5 9.5 0 0 0-.282.472 9.5 9.5 0 0 0-.193.354 9.5 9.5 0 0 0-.233.497 9.5 9.5 0 0 0-.156.367 9.5 9.5 0 0 0-.178.512 9.5 9.5 0 0 0-.122.386 9.5 9.5 0 0 0-.17.688L33.42 156.55a9.5 9.5 0 0 0 5.625 10.614l82.023 34.578 31.62 162.133-116.534 25.313a9.5 9.5 0 0 0-7.5 9.156l-1.062 76.47a9.5 9.5 0 0 0 12.375 9.186l146.468-46.813 24.123-4.677c.177.003.353.015.53.015 9.956 0 19.332-4.742 25.88-12.472 6.543-7.724 9.966-17.79 9.956-28.16v-.026c.006-6.574-1.372-13.037-4.045-18.855l-25.273-130.57 125.774 53.02a9.5 9.5 0 0 0 .155.058 9.5 9.5 0 0 0 .545.197 9.5 9.5 0 0 0 .35.11 9.5 9.5 0 0 0 .543.138 9.5 9.5 0 0 0 .416.086 9.5 9.5 0 0 0 .483.073 9.5 9.5 0 0 0 .482.05 9.5 9.5 0 0 0 .43.02 9.5 9.5 0 0 0 .54.004 9.5 9.5 0 0 0 .363-.01l83.406-5.28a9.5 9.5 0 0 0 7.97-5.438l50.522-106.954.008-.014a9.5 9.5 0 0 0 0-.002 9.5 9.5 0 0 0 .02-.047 9.5 9.5 0 0 0-5.51-13.137c-7.787-4.27-15.802-7.26-23.956-9.148L152.273 36.688a9.5 9.5 0 0 0-.802-.268c-13.317-3.843-27.364-6.01-42.185-6.018zM82.938 44.125a9.5 9.5 0 0 1 3.687.72l290.75 116.53a9.508 9.508 0 0 1 5.77 10.79 9.5 9.5 0 0 0-.707 1.46l-.836 2.07a9.508 9.508 0 0 1-11.29 3.336L79.563 62.47a9.5 9.5 0 0 1 3.376-18.345zm357.308 128.367c4.4.038 8.75.508 13.068 1.404l14.74 5.72-23.67 50.114c.912-4.058 1.378-8.082 1.335-11.855-.1-8.732-2.94-15.95-7.845-19.563-4.905-3.613-11.688-3.48-18.375.25-1.65.92-3.305 2.063-4.906 3.375.614-.822 1.19-1.72 1.687-2.687 1.417-2.757 2.248-5.952 2.22-8.78-.032-2.835-.945-5.243-2.563-6.47-.808-.613-1.74-.922-2.75-.906-1.01.016-2.102.332-3.156.937-2.107 1.212-4.08 3.52-5.5 6.282-1.417 2.764-2.25 5.948-2.217 8.782.03 2.833.945 5.242 2.562 6.47 1.617 1.225 3.798 1.147 5.906-.064-3.416 3.562-6.546 7.9-9.092 12.72-4.608 8.716-7.226 18.798-7.125 27.53.1 8.732 3 15.98 7.906 19.594 4.904 3.614 11.624 3.45 18.31-.28 4.178-2.332 8.29-6.018 11.91-10.582l-8.41 17.8-62.75 4 37.253-92.39c14.635-7.746 28.272-11.513 41.463-11.4zm-298.078 38.145l16.014 6.752 29.732 139.555c-3.005-.917-6.143-1.41-9.342-1.41-2.724 0-5.4.366-7.988 1.037l-28.416-145.935zm37.353 15.748l17.017 7.174 23 118.83c-2.732-.75-5.564-1.156-8.447-1.156-1.643 0-3.266.14-4.865.39l-26.704-125.24zM211.09 370.3c3.863 0 8.258 1.978 11.472 5.772 3.215 3.795 5.433 9.89 5.424 15.795a9.47 9.532 0 0 0 0 .026c.01 5.905-2.21 12-5.423 15.795-1.525 1.8-3.316 3.177-5.188 4.142l-6.143 1.19c2.106-5.273 3.184-11.002 3.178-16.827v-.025c.004-3.773-.452-7.51-1.342-11.107a9.5 9.5 0 0 0-.193-2.248l-2.656-12.458c.29-.022.583-.055.87-.055zm-32.518 4.3c3.864 0 8.26 1.978 11.475 5.773 3.214 3.795 5.43 9.89 5.422 15.795a9.47 9.532 0 0 0 0 .025c.008 5.905-2.21 12-5.423 15.795-3.215 3.795-7.61 5.774-11.475 5.774-3.863 0-8.233-1.98-11.447-5.774-3.214-3.794-5.458-9.89-5.45-15.795a9.47 9.532 0 0 0 0-.025c-.008-5.905 2.236-12 5.45-15.795s7.584-5.773 11.447-5.773zm-34.496 10.59c-.87 3.56-1.316 7.25-1.312 10.978v.025c-.01 10.37 3.41 20.437 9.953 28.16.838.99 1.723 1.93 2.648 2.817L46.78 461.875l.782-55.72 96.514-20.966z"}}]})(props);
};
module.exports.GiCeilingBarnacle = function GiCeilingBarnacle (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M30.867 18c12.65 11.06 31.3 26.2 44.985 32.2 17.032 7.47 38.4 1.287 54.988 9.59-5.477-8.777-8.41-17.61-9.207-26.09-.515-5.483-.15-10.734.805-15.7h-91.57zm110.022 0c-1.246 4.476-1.79 9.165-1.335 14.018.818 8.717 4.722 18.385 15.29 29.267.32.33.63.667.926 1.01l.193-.113c.255.437.532.888.793 1.33a25.45 25.45 0 0 1 2.74 4.508c5.69 9.12 12.674 18.614 21.805 25.728 11.105 8.652 25.032 14.21 45.923 11.79l2.07 17.882c-25.174 2.916-44.854-4.41-59.055-15.473-4.365-3.4-8.24-7.116-11.707-10.955-3.803 10.373-8.874 20.164-9.628 24.29-2.652 14.53-9.086 27.746-13.47 39.945-4.385 12.2-6.614 22.717-3.668 32.267 4.606 14.934 14.197 28.927 26.466 40.906 9.46-14.322 24.7-23.213 40.327-26.728a70.313 70.313 0 0 1 12.548-1.676c11.136-.452 22.084 1.948 31.04 7.988 14.714 2.962 28.41 3.4 41.11 1.766 17.47-3.79 30.232-8.383 40.212-13.375 9.084-5.11 12.158-7.887 19.762-15.072l11.31 14.486c-5.327 5.032-4.732 4.77-10.815 8.98 6.572 8.777 10.043 19.63 11.36 30.986.504 4.332.71 8.777.68 13.295 5.377-.733 10.593-1.358 15.053-2.378 7.49-1.714 11.58-3.946 13.387-7.748 3.456-7.267 3.06-14.07.008-22.61-3.052-8.538-9.047-18.164-15.76-28.248-13.425-20.167-30.778-42.58-26.732-68.818 1.815-11.767 10.355-18.66 16.682-24.264 6.328-5.602 10.496-10 11.17-13.714.68-3.745-1.33-6.83-4.736-13.61a40.06 40.06 0 0 1-1.795-4.146 53.576 53.576 0 0 1-15.38 6.826c-13.728 3.666-28.27 2.59-41.812-.22-13.54-2.812-26.147-7.455-35.946-11.727-9.798-4.273-15.97-7.58-19.377-9.938l10.246-14.8c.2.138 7.356 4.326 16.328 8.238 8.97 3.912 20.578 8.146 32.41 10.603 11.832 2.457 23.82 3.04 33.508.453 9.562-2.554 16.974-7.552 22.328-18.247 2.03-6.903.398-14.886-3.094-22.703H140.89zm240.673 0c3.49 10.68 4.348 22.59-1.428 34.084-3.22 6.41-1.924 8.107.783 13.494 1.664 3.31 4.448 7.73 5.88 13.242 8.43-7.886 31.92-28.96 48.272-34.545 11.597-3.96 26.696 6.013 36.75-.994 6.514-7.855 6.166-16.655 10.682-25.28h-100.94zM283.06 133.574c10.816.026 22.858 3.918 33.096 7.557 10.238 3.64 18.332 7.28 18.332 7.28l-7.38 16.418s-7.488-3.362-16.98-6.736c-9.494-3.374-21.332-6.504-27.11-6.518-8.447-.02-24.147 4.163-36.834 8.604-12.688 4.44-22.704 8.883-22.704 8.883l-7.3-16.453s10.622-4.715 24.056-9.418c13.435-4.703 29.34-9.648 42.825-9.616zM118.187 208.62c-9.852 38.733 2.81 83.295 19.835 120.958 6.99-22.215 8.133-50.082 17.472-69.916-.072-1.11-.133-2.227-.18-3.35-15.91-13.017-29.21-29.15-37.126-47.693zm209.78 11.47c-8.96 4.17-19.533 7.938-32.35 11.174 20.208 38.092 21.473 71.305 23.624 103.172 5.584-14.437 11.1-31.037 14.617-47.545 3.29-15.437 4.793-30.625 3.35-43.06-1.172-10.1-4.204-17.948-9.24-23.74zm-113.93 3.945a45.573 45.573 0 0 0-2.358.018c-2.995.098-6.08.484-9.172 1.18-11.658 2.622-22.74 9.42-29.197 19.134-1.078 31.31 7.395 55.407 20.983 80.217 7.8 14.24 17.38 28.777 27.523 44.478-8.355-58.696-7.032-103.982 6.873-141.943-4.166-1.893-9.21-2.982-14.655-3.085zm31.665 8.85c-4.467 12.118-7.57 25.227-9.352 39.646 17.637 1.544 36.295-.585 55.267-4.112-3.334-10.953-8.054-22.24-14.888-34.12-9.927.655-20.282.235-31.026-1.413zm155.622 17.808a41.73 41.73 0 0 1-.86 1.96c-5.166 10.862-15.987 15.36-25.63 17.566-6.32 1.445-12.623 2.186-18.2 2.942 11.612 18.383 11.028 43.545 9.985 70.98 31.542-36.217 41.67-65.675 34.705-93.45zM278.598 289.12c-5.986.832-11.994 1.465-18.004 1.83 4.76 32.818 13.655 69.713 12.058 101.798-1.38 22.25-11.16 57.128-20.697 85.732a932.855 932.855 0 0 1-5.34 15.52h19.074c1.1-3.185 2.216-6.454 3.34-9.828 9.73-29.186 19.966-64.19 21.587-90.31.043-36.722-5.454-72.72-12.02-104.743zm-108.422 76.628s-16.99 38.27-10.7 56.09c1.55 4.398 6.118 8.588 10.518 8.488 4.957-.112 9.903-5.077 11.527-10.092 5.71-17.614-11.344-54.486-11.344-54.486zm147.113 44.607s-21.92 49.688-12.642 72.34c2.29 5.59 8.713 10.814 14.748 10.535 6.8-.313 13.405-6.853 15.452-13.343 7.19-22.798-17.56-69.532-17.56-69.532z"}}]})(props);
};
module.exports.GiCeilingLight = function GiCeilingLight (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M247 22v81h18V22h-18zm-31.975 99l-11.5 46h104.95l-11.5-46h-81.95zM192 185c-18 0-45.643 21.459-68.973 50.621-19.568 24.46-36.5 53.474-45.869 75.379h357.684c-9.371-21.905-26.308-50.917-45.88-75.377C365.63 206.461 337.983 185 320 185H192zm25.719 144c.687 5.463 2.03 12.676 4.717 19.838 2.655 7.077 6.541 13.756 11.806 18.437C239.507 371.956 246.008 375 256 375c9.992 0 16.493-3.044 21.758-7.725 5.265-4.68 9.15-11.36 11.806-18.437 2.688-7.162 4.03-14.375 4.717-19.838H217.72zm-17.326 6.137l-90.346 20.078 3.906 17.57 90.736-20.164c-2.131-6.242-3.465-12.3-4.296-17.484zm111.214.002c-.83 5.183-2.165 11.241-4.296 17.482l90.736 20.164 3.906-17.57-90.346-20.076zm-97.691 36.13l-60.748 70.874 13.664 11.714 59.775-69.736a46.747 46.747 0 0 1-4.324-3.396c-3.249-2.889-6.006-6.091-8.367-9.455zm84.168 0c-2.361 3.365-5.118 6.567-8.367 9.456a46.749 46.749 0 0 1-4.324 3.396l59.775 69.736 13.664-11.714-60.748-70.873zM247 392.272V492h18v-99.729a55.93 55.93 0 0 1-18 0z"}}]})(props);
};
module.exports.GiCelebrationFire = function GiCelebrationFire (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M290.72 13.396c-79.94 38.87 9.013 152.854-74.402 191.567 21.946-43.348 30.93-118.453-39.69-169.342v.003c57.41 92.152-39.578 101.073 10.68 235.037.884 2.098 1.724 4.216 2.467 6.383-.86-2.16-1.682-4.286-2.468-6.383-17.056-40.42-58.356-69.442-47.875-146.558-92.397 139.136 61.726 179.234 39.968 296.226-20.22-52.322-96.068-38.077-65.88-94.582-81.617 64.483 68 99.77-25.282 168.19h349.006c-44.892-35.722-38.733-108.488-9.29-92.71-14.63-42.75-54.515-10.383-56.477 22.604-15.55-101.866 86.23-108.78 74.388-226.197-19.395 67.794-73.366 65.522-92.71 55.322 68.964-32.598 91.818-125.04 17.15-161.248 23.033 28.635 15.785 123.762-33.243 84.998-18.193-14.385-70.182-60.235-46.34-163.31zm-165.656 4.778c-6.35.16-12.967 2.232-19.62 6.578 38.005 7.337 57.7 61.682 52.892 122.08 34.38-59.225 5.54-129.638-33.272-128.658zm218.29 44.633c8.507 47.444-17.105 75.028-38.82 30.52 22.306 83.01 95.766 93.25 38.82-30.52zm103.84 93.88c35.616 36.454 25.294 104.74-14.133 160.057 81.137-36.52 81.26-153.81 14.133-160.057zm-379.22 78.917c19.553 54.61-90.043 56.077 5.62 157.767-38.953-68.595 67.41-69.424-5.62-157.766z"}}]})(props);
};
module.exports.GiCellarBarrels = function GiCellarBarrels (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M266.5 45.39c-19.9 0-39.8 1.51-59.7 4.51-29.6 26.08-45.4 71.3-45.4 115.4 0 20.2 3.3 39.8 9.6 57 6.5-.3 12.9-.5 19.4-.5 18.5-.8 31.2 0 46.6 2.6-6.1-18.4-9.1-38.7-9.1-59.1 0-43.7 13.6-89.1 42.1-119.83h-3.5zm28.9 1.14c-32.3 25.42-49.5 72.67-49.5 118.77 0 22.2 3.9 43.6 11.5 61.9 12 1.9 23.9 4.3 35.9 7.2 5.8.2 11.5 1.4 16.9 3.4-12-21.2-19-48.7-19-78.8 0-31.8 7.8-60.77 21.1-82.38 6.2-10.15 13.9-18.81 22.6-25.13-13.2-2.3-26.3-3.97-39.5-4.96zm-118.3 8.95c-3.2.74-6.5 1.51-9.8 2.33l-.4.1-.3.1C96.79 69.64 80.62 173.7 118.1 228.1c11.4-2 22.8-3.5 34.2-4.6-5.9-18.1-8.9-38.1-8.9-58.2 0-39.2 10.9-79.7 33.7-109.82zm190.7 2.71c-14.7 0-29 9.74-40.1 27.87-11.2 18.14-18.5 44.14-18.5 72.94 0 28.8 7.3 54.8 18.5 72.9 11.1 18.2 25.4 27.9 40.1 27.9 14.7 0 29-9.7 40.1-27.9 11.2-18.1 18.5-44.1 18.5-72.9 0-28.8-7.3-54.8-18.5-72.94-11.1-18.13-25.4-27.87-40.1-27.87zm-.1 134.01h.2c7.2.1 11.6 5.3 13.9 10 2.3 4.7 3.4 10 3.4 15.9s-1.1 11.2-3.4 15.9c-2.3 4.7-6.7 9.9-13.9 10h-.2c-7.2-.1-11.6-5.3-13.9-10-2.3-4.7-3.4-10-3.4-15.9s1.1-11.2 3.4-15.9c2.3-4.7 6.7-9.9 13.9-10zm-177.3 47.5c-19.8 0-39.7 1.5-59.6 4.5-29.6 26.1-45.45 71.2-45.45 115.3 0 42 14.04 81.3 40.35 101.9 21.1 3.4 42.2 5.2 63.2 5.2-25-25.9-37-66.3-37-107 0-43.8 13.5-89.2 42.1-119.9zm29 1.1c-32.4 25.4-49.6 72.7-49.6 118.8 0 45 16.2 87 46.5 106.2 14.2-1 28.4-2.7 42.6-5.1-8.7-6.4-16.3-15-22.5-25.1-13.3-21.7-21.1-50.6-21.1-82.4 0-31.8 7.8-60.7 21.1-82.3 6.2-10.1 13.8-18.8 22.4-25.1-13.2-2.3-26.3-4-39.4-5zM101 249.9c-3.31.7-6.5 1.5-9.73 2.3h-.43l-.31.1c-90.831 15.1-90.831 186.8 0 201.9l.31.1h.43l3.65.9c-18.61-25.6-27.52-60.5-27.52-95.7 0-39.1 10.88-79.6 33.6-109.6zm190.8 2.5c-14.7 0-28.9 9.8-40.1 27.9-11.2 18.1-18.5 44.1-18.5 72.9 0 28.9 7.3 54.8 18.5 73 11.2 18.1 25.4 27.9 40.1 27.9 14.7 0 28.9-9.8 40.1-27.9 11.2-18.2 18.5-44.1 18.5-73 0-28.8-7.3-54.8-18.5-72.9-11.2-18.1-25.4-27.9-40.1-27.9zm139 0c-8.9.1-17.7 3.7-25.8 10.7-.2.2-.4.4-.6.5-4.9 4.4-9.5 10-13.6 16.8-11.1 18.1-18.4 44-18.4 72.8 0 28.8 7.3 54.8 18.5 72.9C402 444.3 416.3 454 431 454c14.7 0 29-9.7 40.1-27.9 11.2-18.1 18.5-44.1 18.5-72.9 0-28.8-7.3-54.8-18.5-72.9-11.1-18.2-25.4-27.9-40.1-27.9zm-139 134.1c7.2 0 11.7 5.2 14.1 9.9 2.3 4.7 3.3 10 3.3 16 0 5.9-1 11.3-3.3 15.9-2.4 4.8-6.9 9.9-14.1 9.9-7.2 0-11.7-5.1-14-9.9-2.4-4.6-3.4-10-3.4-15.9 0-6 1-11.3 3.4-16 2.3-4.7 6.8-9.9 14-9.9zm139.1 0h.2c7.2.1 11.6 5.3 13.9 10 2.3 4.7 3.4 10 3.4 15.9s-1.1 11.2-3.4 15.9c-2.3 4.7-6.7 9.9-13.9 10h-.2c-7.2-.1-11.6-5.3-13.9-10-2.3-4.7-3.4-10-3.4-15.9s1.1-11.2 3.4-15.9c2.3-4.7 6.7-9.9 13.9-10zm-69.5 16.8c-3.5 11.9-8.3 22.8-14.1 32.3-8.5 13.6-19.4 24.6-31.9 30.8 27.5.9 55.1-.9 82.6-5.7-8.6-6.3-16.3-15-22.5-25.1-5.8-9.5-10.6-20.4-14.1-32.3z"}}]})(props);
};
module.exports.GiCementShoes = function GiCementShoes (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M348.963 291.017h-20.2l-3.26-86.73-15.38-.154-.65 67.563 4.643 90.473c-.424 4.654-8.926 6.93-17.8 6.93-9.972 0-20.44-2.866-20.512-8.42l-8.367-87.422h-19.55l-12.08 86.305c0 5.885-11.13 8.926-21.722 8.926-9.31 0-18.287-2.39-18.72-7.303l5.595-89.47.062-67.584-15.298.155-3.29 86.72H162.97C149.635 220.092 165.884 142 221.977 133.3c-9.072-11.378-14.895-27.172-14.895-44.683 0-34.59 22.02-62.517 49.06-62.517.95 0 1.922-.082 2.884-.103h.952a10.22 10.22 0 0 1 1.23.103c24.69 3.207 43.97 30.09 43.97 62.516 0 17.955-6.144 33.977-15.62 45.406 51.376 9.67 74.515 84.164 59.403 156.99zm20.81 57.416c-9.308-6.6-23.55-12.008-40.607-15.99 0 0 1.613 23.427 1.437 31.236-.093 4.2-2.772 14.48-16.745 19.33a54.923 54.923 0 0 1-17.584 2.65 59.092 59.092 0 0 1-19.653-3.104c-10.435-3.806-16.88-11.502-17.396-20.687l-2.876-29.996-4.137 29.406c-.444 5.337-3.298 15.298-17.696 20.562a61.398 61.398 0 0 1-20.45 3.26 56.888 56.888 0 0 1-18.172-2.742c-14.243-4.986-16.964-15.38-17.036-19.653-.124-7.478 1.676-29.85 1.676-29.85-29.872 7.322-45.356 17.873-47.176 25.734-1.17 5.07 5.09 10.344 8.926 13.085 29.344 20.76 106.96 29.727 169.486 19.59 42.822-6.94 64.677-20.262 66.86-29.706 1.24-5.11-5.027-10.396-8.865-13.127zM164.48 462.21c4.85 11.275 39.16 23.79 91.537 23.79 53.786 0 87.61-14.222 91.094-22.983 4.677-14.77 16.87-54.034 21.412-68.66-57.147 27.142-172.455 26.108-225.02-.247 4.85 15.753 16.436 53.392 20.977 68.09z"}}]})(props);
};
module.exports.GiCentaurHeart = function GiCentaurHeart (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M147.9 25.75c-10.1 0-20.2 1.2-29.9 3.6-52 13-95.7 59.8-97.8 127.05-1.1 35.8 9.9 65.6 27.6 91.1 17.6 25.6 41.5 47.1 66.8 68.5C165.2 358.5 221 399.8 247 464.3l8.9 22 8.5-22.2C289 399.5 343 356.3 393 312.8c50-43.5 96.6-88.3 98.8-155.8 2.3-71.55-42.4-116.75-95.5-127.15-49-9.7-105.4 9.1-140.3 57.7-27.5-42.1-68.3-61.7-108.1-61.8zM80 112l80 32-64 32 116.4 23.3L256 112l43.6 87.3L416 176l-64-32 80-32 32 80-171.5 66L256 416l-36.5-158L48 192l32-80z"}}]})(props);
};
module.exports.GiCentaur = function GiCentaur (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M372.2 20.34c-21.4 1.16-30 25.84-29.7 42.79.3 18.28 10.2 43.97 29.7 42.87 21.4-1.2 30-25.94 29.7-42.87-.3-18.29-10.2-43.85-29.7-42.79zM175.3 72.73c-36.6 49.47-17.2 102.67 7.3 146.47l53.6-71.3c24.1 22.7 51.8 37.3 56.4 36.8 10-.9 29.9-16.4 42.8-35-5.6 22.9-9.2 46.2-21 63.9 9.3 36.5 48.2 85 85.4 64 10.3-38.2 12.3-89.7 6.7-127.6 29.6 14.8 43.7 46.1 49.3 72.4 2.4 11.9 31.4 19.7 22.1-14.6-10.8-39.7-31.1-84.1-73.6-99.6-8.2 9.5-19.5 16.8-32.1 15.8-16.3-1.4-30.2-10.4-37.3-22.8-11.9 7.1-36.6 41.1-45.7 55.5-14.5-11.2-24.2-20.9-35.3-32.4l60.3-80.27c-58.2-19.69-112.6-2.46-138.9 28.7zm107.4-16.67L241.4 111c-22.3-10.8-32.5 6.8-17.8 23.8L185 186c-18.4-34.8-15.1-75.7 4.7-102.33 27.2-30.02 57.5-32.98 93-27.61zm14.4 162.84c-51.3 11.4-105.7 15.9-151.3 28.6-27.5 7.7-35.1 30.8-41 54.5-11.28 61.7-24.24 105.4-40.5 166.3 8.4 6.9 17 13.6 20.31 23.3H108c-2.5-15.4-8.32-19.5-15.98-30.7L118.1 398c27.7-6.5 45.2-26 60.3-45.8 38 23.8 82.1 9.4 126.5-7.2 9.5 42-9.7 77.3-20.4 111.6 8.3 12.9 21.7 22.4 27.9 35h28.2c-5.6-16.9-11.9-21.5-23.4-31.7 20.1-41.4 28.2-84.3 33.7-124.4 22-8 32.9-16.9 41.2-35.9-52.5 8.7-85.3-50.5-95-80.7zM99.19 265c-12.02-.2-27.04 3.5-28.49 15.8-4.1 34.8-3.85 71.5-38.44 85 8.4 14 21.75 24.1 37.47 15.3 12.85-39.9 11.04-81.5 29.46-116.1zM392 335.7c-6.3 6.7-14.8 11.9-25 14.8 0 .1-.1.2-.1.3l15.4 17.2-8.7 25.6-14.5 3.2c-1.7 8.1-3.7 16.3-6 24.3 34.2 7.7 55.7-31.4 60.2-54.9-5.4-12-12.4-23.2-21.3-30.5zm-210.9 42.6c-5.4 6.8-12.1 14.5-20.2 21.2 16.3 31.4 34.6 62.9 57.5 92.2h26.7c-28.9-35.6-47.8-75.2-64-113.4z"}}]})(props);
};
module.exports.GiCentipede = function GiCentipede (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M103.12 15.697l-30.364 10.07c2.132 3.412 3.902 7.116 5.223 11.098.693 2.094 1.228 4.2 1.643 6.31l29.38-9.74-5.884-17.738zm-80.975 3.25c-1.438.126-2.884.317-4.336.567v129.812c4.642 3.457 10.744 5.995 17.336 7.317 1.792-2.69 3.824-5.25 6.067-7.664 3.214 5.766 6.57 11.448 10.055 17.047-8.84 12.366-9.92 28.358-1.98 40.64 5.96 9.215 15.91 14.655 26.802 15.536 1.91-4.064 4.302-7.973 7.166-11.642 4.07 4.942 8.252 9.784 12.54 14.526-10.71 16.322-8.597 37.015 4.847 48.705 8.243 7.17 19.245 9.643 29.908 7.52.592-6.093 2.13-12.2 4.65-18.09 5.02 4.246 10.14 8.37 15.355 12.362-5.245 17.902 1.975 36.393 17.36 44.117 8.827 4.43 18.888 4.585 27.98 1.103-.452-4.9-.29-9.918.49-14.932 5.874 3.315 11.832 6.476 17.87 9.472-.06 15.63 8.735 29.594 22.772 34.785 9.716 3.593 20.26 2.36 29.19-2.684-.755-3.713-1.154-7.538-1.197-11.418 6.297 2.03 12.652 3.897 19.064 5.577 2.214 15.41 12.886 27.908 27.47 31.04 10.786 2.314 21.726-.918 30.067-8.074-1.587-4.19-2.685-8.627-3.227-13.252 6.336.617 12.71 1.045 19.115 1.305 3.928 18.824 21.574 32.055 42.64 30.36 4.906-.397 9.55-1.593 13.815-3.427 50.857 41.905 57.015 94.14-26.582 113.084 94.115 2.325 106.816-72.573 45.854-129.438 4.343-6.848 6.654-14.918 6.168-23.337-.187-3.25-.78-6.37-1.713-9.326 73.82-44.358 76.68-122.575-17.778-137.824 78.128 32.182 63.177 84.56 2.39 117.61-7.312-4.797-16.425-7.286-26.294-6.49-14.564 1.172-26.844 9.335-33.633 20.653-6.755-.22-13.48-.655-20.166-1.31 1.882-4.65 4.353-9.032 7.325-13.053-4.956-7.48-12.43-12.924-21.377-14.844-2.396-.515-4.8-.756-7.18-.74-12.55.08-24.468 7.27-31.345 18.964-6.12-1.66-12.19-3.492-18.203-5.496 2.96-5.945 6.824-11.273 11.367-15.8-3.922-7.43-10.26-13.31-18.326-16.294-4.022-1.488-8.19-2.147-12.324-2.053-.59.015-1.18.043-1.77.087-9.92.743-19.512 5.808-26.358 14.192-5.603-2.85-11.136-5.844-16.59-8.988 3.493-4.782 7.612-8.966 12.187-12.437-3.116-7.598-8.68-13.954-16.203-17.73-4.38-2.2-9.066-3.347-13.787-3.518-.443-.016-.885-.025-1.328-.024-7.363.017-14.74 2.405-21.13 6.832-5.063-3.875-10.032-7.883-14.903-12.015 3.476-2.892 7.23-5.365 11.185-7.365-1.5-7.214-5.16-13.83-10.887-18.81-5.55-4.826-12.35-7.527-19.456-8.13-.74-.063-1.482-.104-2.228-.12-4.187-.098-8.445.522-12.583 1.852-4.45-4.82-8.78-9.755-12.984-14.8 4.905-2.315 10.048-3.945 15.27-4.84 1.405-8.398-.12-17.03-4.85-24.344-6.653-10.292-18.283-15.88-30.647-15.662-3.625.065-7.313.632-10.957 1.722-3.356-5.388-6.58-10.86-9.665-16.41 6.697-2.53 13.666-3.813 20.55-3.895.234-.003.468.012.704.012 2.56-8.096 2.275-16.83-1.353-24.714-5.758-12.515-18.612-20.043-32.78-20.168-.946-.008-1.896.016-2.85.074-2.167.132-4.355.447-6.544.934-2.233-5.84-4.31-11.743-6.24-17.7 5.77-1.484 11.626-2.09 17.37-1.873 1.985.076 3.956.254 5.906.524 3.1-7.53 3.635-15.884 1.01-23.8-4.48-13.518-17.1-22.556-31.787-23.8h-6.308zm101.837 54.176L94.928 86.49c2.497 3.156 4.662 6.643 6.416 10.453.922 2.004 1.69 4.04 2.336 6.09L131.793 90.1l-7.81-16.977zm26.405 53.55l-26.87 17.372c2.95 2.786 5.613 5.958 7.91 9.512 1.18 1.822 2.213 3.696 3.134 5.6l25.973-16.792-10.146-15.693zm25.342 42.343l-20.97 24.113c3.544 1.84 6.923 4.12 10.064 6.852 1.688 1.468 3.242 3.03 4.692 4.66l20.314-23.363-14.1-12.264zm38.915 30.623l-14.313 28.51c3.895.907 7.74 2.263 11.465 4.133 1.996 1.002 3.886 2.13 5.69 3.346l13.86-27.607-16.702-8.384zm-186.46 6.048l-10.376 6.708v22.254l19.612-12.68c-1.36-1.623-2.646-3.334-3.824-5.157-2.3-3.555-4.085-7.29-5.414-11.125zM270 225.494l-11.102 30.02c4.038.46 8.078 1.403 12.053 2.873 2.03.75 3.976 1.627 5.85 2.597l10.727-29.007L270 225.494zm56.537 19.194l-6.695 31.195c.375-.01.75-.03 1.127-.03 3.665-.02 7.383.353 11.11 1.153 2.15.46 4.23 1.065 6.254 1.773l6.477-30.17-18.273-3.923zM80.203 278.865l-21.912 25.2 14.103 12.263 21.25-24.437c-1.813-1.21-3.577-2.53-5.264-3.997-3.144-2.734-5.86-5.772-8.177-9.028zm69.164 50.81L134.35 359.59l16.703 8.385 14.56-29.008c-2.053-.722-4.086-1.565-6.082-2.567-3.724-1.87-7.11-4.142-10.163-6.724zm70.158 32.305l-11.6 31.374 17.526 6.482 11.224-30.348c-2.053-.482-4.1-1.082-6.127-1.832-3.98-1.47-7.653-3.396-11.022-5.676zm76.487 24.928l-7.033 32.764 18.27 3.922 6.81-31.733c-2.134-.183-4.278-.487-6.427-.948-4.11-.882-7.99-2.25-11.62-4.004z"}}]})(props);
};
module.exports.GiCenturionHelmet = function GiCenturionHelmet (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M256 25c-38.5 0-75.7 10.76-108.4 28.79l17.9 34.65-31.6-26.54C85.5 92.66 48.34 139.4 32.89 189.7l42.31 17.6-46.81.1c-2.04 10.1-3.18 20.3-3.32 30.5.15.1.01 0 .49.3 2 1.3 5.88 2.9 10.8 4.4 9.82 3 23.85 5.5 38.24 6.4 14.39 1 29.3.4 40.8-2 10.2-2.2 16.9-6.1 19.6-9.6.7-21.4 9.3-44.1 23.5-64.1L128 144l41.2 16c.1 0 .1-.1.1-.1 18.4-20.1 43.4-35.9 72.3-39.9L256 48l14.4 72c28.9 4 53.9 19.8 72.3 39.9 0 0 0 .1.1.1l41.2-16-30.5 29.3c14.2 20 22.8 42.7 23.5 64.1 2.7 3.5 9.4 7.4 19.6 9.6 11.5 2.4 26.4 3 40.8 2 14.4-.9 28.4-3.4 38.2-6.4 5-1.5 8.8-3.1 10.8-4.4.5-.3.4-.2.5-.3-.1-10.2-1.3-20.4-3.3-30.5l-46.8-.1 42.3-17.6c-15.4-50.3-52.6-97.04-101-127.8l-31.6 26.54 17.9-34.65C331.7 35.76 294.5 25 256 25zm0 112c-29 0-54.7 14.5-73.3 35.1-16.1 17.6-26.5 39.7-29 58.9h14c6-6.3 13-11.7 20.8-16.2 3.9-9.4 9.9-18 17.1-25.2C219.1 176.2 237 167 256 167s36.9 9.2 50.4 22.6c7.2 7.2 13.2 15.8 17.1 25.2 7.8 4.5 14.8 9.9 20.8 16.2h14c-2.5-19.2-12.9-41.3-29-58.9C310.7 151.5 285 137 256 137zm0 80c-38.2 0-62.9 11-79 30.7-9.6 11.7-16.2 27-20 45.6 70.2 13 127.8 13 198 0-3.8-18.6-10.4-33.9-20-45.6-16.1-19.7-40.8-30.7-79-30.7zm-101.7 94.1c-.6 5.7-.9 11.6-1.1 17.8 59.6 13.3 146 13.3 205.6 0-.2-6.2-.5-12.1-1.1-17.8-71.5 13.1-131.9 13.1-203.4 0zm-2.8 35.8-14.4 101.3c0 1.2 1.1 4.8 3.9 9.1 2.9 4.3 7.4 9.3 12.8 13.8 9.6 8.1 22.3 14.4 34.2 15.6 1.4-1.8 3.3-4.3 5.2-7.2 3.8-5.9 6-13.3 5.9-14.1-.3-2.2-6.5-10.3-13.6-15.9-7.1-5.7-14-9.7-14-9.7l-14.5-8.4 15-7.5c14.9-7.4 20.8-14.1 23-19.4 2.3-5.2 1.6-10.6-.8-17.7-5.9-17.8-11.8-28.7-16.3-35.1-9.1-1.3-17.9-2.9-26.4-4.8zm209 0c-8.5 1.9-17.3 3.5-26.4 4.8-4.5 6.4-10.4 17.3-16.3 35.1-2.4 7.1-3.1 12.5-.8 17.7 2.2 5.3 8.1 12 23 19.4l15 7.5-14.5 8.4s-6.9 4-14 9.7c-7.1 5.6-13.3 13.7-13.6 15.9-.1.8 2.1 8.2 5.9 14.1 1.9 2.9 3.8 5.4 5.2 7.2 11.9-1.2 24.6-7.5 34.2-15.6 5.4-4.5 9.9-9.5 12.8-13.8 2.8-4.3 3.9-7.9 3.9-9.1l-14.4-101.3z"}}]})(props);
};
module.exports.GiCeremonialMask = function GiCeremonialMask (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M256 21c-41 0-82 6.9-115.1 20.34-33 13.38-57.7 33.05-68.48 57.92C57.64 144.1 61.7 219.2 83.55 291.8 105.5 364.7 145 435.1 197.3 472.7c30.6 22.1 86.8 22.1 117.4 0 52.3-37.6 91.8-108 113.7-180.9 21.9-72.6 26-147.7 11.2-192.54-10.8-24.87-35.5-44.54-68.5-57.92C338 27.9 297 21 256 21zm0 18c13.7 0 25 11.3 25 25s-11.3 25-25 25-25-11.3-25-25 11.3-25 25-25zm-76 28c13.7 0 25 11.3 25 25s-11.3 25-25 25-25-11.3-25-25 11.3-25 25-25zm152 0c13.7 0 25 11.3 25 25s-11.3 25-25 25-25-11.3-25-25 11.3-25 25-25zm-220 36c13.7 0 25 11.3 25 25s-11.3 25-25 25-25-11.3-25-25 11.3-25 25-25zm288 0c13.7 0 25 11.3 25 25s-11.3 25-25 25-25-11.3-25-25 11.3-25 25-25zm-185.6 34.6l41.6 41.7 41.6-41.7 12.8 12.8-54.4 54.3-54.4-54.3 12.8-12.8zm-55 54.1h2.8c6.4.1 13.2 1.3 20.1 3.8 15.8 5.8 32 18 48.7 38.9l4.1 5.1-3.6 5.5C214 271.3 187 285 160 285s-54-13.7-71.49-40l-4.09-6.1 5.22-5.3c6.94-6.9 24.06-28.9 49.26-38.1 6.3-2.3 13.2-3.7 20.5-3.8zm190.4 0h2.8c7.3.1 14.2 1.5 20.5 3.8 25.2 9.2 42.3 31.2 49.3 38.1l5.2 5.3-4.1 6.1C406 271.3 379 285 352 285s-54-13.7-71.5-40l-3.6-5.5 4.1-5.1c16.7-20.9 32.9-33.1 48.7-38.9 6.9-2.5 13.7-3.7 20.1-3.8zm-190.1 17.9c-5.1.1-9.9 1.2-14.6 2.9-15.6 5.6-28.2 18.7-37.3 28.2C122 258.4 141 267 160 267c19.1 0 38.2-8.6 52.4-26.5-13.4-15.5-25.7-24.2-36.2-28-5.9-2.2-11.3-3-16.5-2.9zm192.6 0c-5.2-.1-10.6.7-16.5 2.9-10.5 3.8-22.8 12.5-36.2 28 14.2 17.9 33.3 26.5 52.4 26.5 19 0 38-8.6 52.2-26.3-9.1-9.5-21.7-22.6-37.3-28.2-4.7-1.7-9.5-2.8-14.6-2.9zM247 240h18l7 112c0 16-32 16-32 0l7-112zM61.29 279.1c-14.18 1.2-25.75 11.8-33.44 25.6C19.67 319.4 15 338.8 15 360c0 21.2 4.67 40.6 12.85 55.3C36.03 430 48.58 441 64 441c15.42 0 27.97-11 36.2-25.7 3.2-5.8 5.9-12.4 8-19.6-4.8-8.3-9.36-16.9-13.62-25.7-1.22 14.4-5.02 27.3-10.16 36.5C78.12 417.9 70.67 423 64 423c-6.67 0-14.12-5.1-20.42-16.5C37.29 395.2 33 378.5 33 360s4.29-35.2 10.58-46.5C49.88 302.1 57.33 297 64 297c.79 0 1.58.1 2.39.2-.02-.1-.05-.1-.07-.2-1.79-6-3.46-11.9-5.03-17.9zm389.41 0c-1.5 6-3.2 11.9-5 17.9 0 .1 0 .1-.1.2.8-.1 1.6-.2 2.4-.2 6.7 0 14.1 5.1 20.4 16.5 6.3 11.3 10.6 28 10.6 46.5s-4.3 35.2-10.6 46.5c-6.3 11.4-13.7 16.5-20.4 16.5-6.7 0-14.1-5.1-20.4-16.5-5.1-9.2-9-22-10.2-36.5-4.2 8.8-8.8 17.4-13.5 25.7 2 7.2 4.7 13.8 7.9 19.6C420 430 432.6 441 448 441c15.4 0 28-11 36.2-25.7 8.1-14.7 12.8-34.1 12.8-55.3 0-21.2-4.7-40.6-12.8-55.3-7.7-13.8-19.3-24.4-33.5-25.6zm-233.1 2.5l12.8 12.8c-9.1 9-25.3 21.1-44 31.5C167.7 336.3 147 345 128 345v-18c13 0 32.3-7.3 49.6-16.9 17.3-9.6 33.1-21.5 40-28.5zm76.8 0c6.9 7 22.7 18.9 40 28.5C351.7 319.7 371 327 384 327v18c-19 0-39.7-8.7-58.4-19.1-18.7-10.4-34.9-22.5-44-31.5l12.8-12.8zm-76.8 48l12.8 12.8c-9.1 9-21.7 17.3-34.4 23.7-12.7 6.3-25 10.9-36 10.9v-18c5 0 16.7-3.4 28-9.1 11.3-5.6 22.7-13.3 29.6-20.3zm76.8 0c6.9 7 18.3 14.7 29.6 20.3 11.3 5.7 23 9.1 28 9.1v18c-11 0-23.3-4.6-36-10.9-12.7-6.4-25.3-14.7-34.4-23.7l12.8-12.8zM256 391c18.6 0 35.4 2.7 48.4 7.6 6.5 2.4 12.1 5.4 16.5 9.3 4.5 4 8.1 9.5 8.1 16.1 0 6.6-3.6 12.1-8.1 16.1-4.4 3.9-10 6.9-16.5 9.3-13 4.9-29.8 7.6-48.4 7.6-18.6 0-35.4-2.7-48.4-7.6-6.5-2.4-12.1-5.4-16.5-9.3-4.5-4-8.1-9.5-8.1-16.1 0-6.6 3.6-12.1 8.1-16.1 4.4-3.9 10-6.9 16.5-9.3 13-4.9 29.8-7.6 48.4-7.6z"}}]})(props);
};
module.exports.GiChainLightning = function GiChainLightning (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M362.906 29.53c-11.523 11.09-23.063 23.04-34.5 34.5l-.594-11.374-.5-8.593-4.03 4.5-34.063 37.78c1.504 1.355 2.897 2.865 4.186 4.5l28.625-31.75.595 11.344v.032l.5 8.56 4.03-4.5 35.75-45zm-102.5 7.345c-.202.007-.543.063-1.47.063-9.874 0-18.81 10.648-18.81 24.906 0 7.198 2.404 13.675 6 18.187l3.843 4.782-6.095.938c-11.23 1.74-17.873 10.124-21.47 22.78-3.375 11.884-3.442 27.175-1 42.032h15.657l.218 3.344 3.595 54.5H275.5l4.063-54.53.25-3.314h16.5c2.712-15.118 2.154-30.222-1.594-41.906-3.986-12.42-11.072-20.653-21.22-22.562l-5.938-1.125 3.875-4.657c3.758-4.533 6.282-11.065 6.282-18.438 0-13.375-7.965-23.773-16.94-24.938l-.374-.062zm-123 21.438l42.78 38.437 4.72 3.75-.937-8.53.03-.032-1.313-11.282 32.813 25.97c.006-.023.025-.042.03-.064.592-2.08 1.294-4.09 2.095-6.03l-37.938-30.063-4.75-3.75.938 8.53v.03l1.344 11.314c-13.194-9.388-26.6-19.27-39.814-28.28zm167.188 62.968c.752 6.547.817 13.456.187 20.5l59.19 49.876-28.845 2.47v.03l-21.72 2 11.72 9.906 9.156 7.72-9.78 51.843-1.125 5.938 7.125-4.813v.03l9.406-6.436c-2.196 16.04-4.71 32.486-6.562 48.375L347.53 253l1.126-5.938-7.125 4.782h-.03l-9.375 6.406 7.563-39.938 62.5 52.657c1.763-5.292 4.22-10.092 7.437-14.095l-57.656-48.563 28.874-2.437v-.03l21.75-2-11.75-9.876-43.72-36.845 38.313-7.906-6.25 9.5v.03l-4.656 7.188 5.908-1.22 55.437-15.124c-15.856 2.117-32.22 4.91-48.22 7.375l6.25-9.5v-.032l4.69-7.188-5.908 1.22-51.5 10.655-36.593-30.844zm-131.78.657l-12.97 56-1 5.938 7.03-4.938 9.25-6.593-5.843 35.125-35.905 73.03c4.675 2.935 8.446 7.525 10.906 13.094l30.19-61.406 9.343 27.406.03.03L191 280.22l6.78-13.783 3.876-7.875 42.125-19.343-3.936 10.686-2.938 8.063 5.5-2.533 50.625-27.187c-14.973 5.627-30.302 12.03-45.342 18.03l3.968-10.655v-.03l2.938-8.064-5.5 2.532-43.156 19.813 26.937-54.78L230.812 164l-37.28 75.844-9.345-27.406-.03-.032-6.407-18.5 4.844-29.125 1-5.936-7.03 4.937-9.25 6.626c1.84-16.085 3.996-32.543 5.5-48.47zM-7.064 164.47l-12.188 9.655 19.844 25.03.062-24.968-7.718-9.718zm503.718 3.655c-3.743 7.56-7.457 15.157-11.187 22.625l-4.158-10.625-3.187-7.97-2.406 5.532-12.47 28.532c1.51 1.893 2.82 4.013 3.906 6.31l10.688-24.468L482 198.656v.03l3.188 7.94 2.406-5.5 9.03-24.782.032-8.22zm-481.03 25l-.032 24.97L57.53 271l-28.75-3.313-.03.032-13.25-1.44-.03 9.69 1.124 1.405 61.312 77.375c.087-.323.16-.65.25-.97 1.575-5.542 3.888-10.66 6.97-14.967l-42.69-53.875 28.752 3.343h.03l21.72 2.376-9.532-12.03-48.687-61.407 38.343 13.874 5.656 2.03-3.595-7.78h.03l-4.843-10.313c15.484 4.726 31.297 9.83 46.688 14.19l-52.75-22.907-5.656-2.032 3.593 7.782h-.03L67 222.375l-39.5-14.28-11.875-14.97zm430.655 10.688c-.198.007-.57.062-1.5.062-9.875 0-18.78 10.68-18.78 24.938 0 7.197 2.405 13.643 6 18.156l3.813 4.78-6.063.938c-11.23 1.74-17.904 10.124-21.5 22.78-3.376 11.885-3.414 27.204-.97 42.063h15.658l.218 3.314 3.594 54.5h34.625l4.063-54.53.218-3.283h16.499c2.72-15.128 2.19-30.244-1.562-41.936-3.985-12.42-11.07-20.654-21.22-22.563l-5.937-1.124 3.844-4.656c3.758-4.532 6.314-11.064 6.314-18.438 0-13.375-7.964-23.773-16.938-24.937l-.375-.063zm-323.25 80.28c-.198.008-.57.063-1.5.063-9.875 0-18.78 10.65-18.78 24.906 0 7.198 2.405 13.675 6 18.188l3.813 4.78-6.063.94c-11.23 1.74-17.904 10.123-21.5 22.78-3.378 11.89-3.418 27.196-.97 42.063H99.69l.218 3.312 3.594 54.5h34.625l4.063-54.53.218-3.283h16.499c2.72-15.13 2.19-30.245-1.562-41.937-3.985-12.42-11.07-20.653-21.22-22.563l-5.936-1.125 3.843-4.656c3.758-4.53 6.314-11.063 6.314-18.436 0-13.375-7.964-23.773-16.938-24.938l-.375-.062zm275.94 25.688l-30.908 23.845 1.438-11.28 1.03-8.5-4.78 3.655-43.22 37.906c13.325-8.852 26.82-18.553 40.126-27.78l-1.47 11.312h.033l-1.064 8.53 4.78-3.687 34.908-26.936c-.356-2.35-.643-4.706-.875-7.063zM167.81 382.03c-.058 2.353-.22 4.737-.437 7.126l37.03 25.313 4.97 3.405-1.53-8.438-2.095-11.187c13.81 8.453 27.848 17.358 41.656 25.438l-45.344-35.375-4.968-3.407 1.53 8.438 2.095 11.187-32.907-22.5zm293.594.44l6.688 36.686 1.062 5.938 4.938-7.03 6.47-9.377c3.712 15.76 7.27 32.007 11.248 47.5l-6.78-57.093-1.063-5.938-4.94 7-6.467 9.375-4.938-27.06H461.405zM80.312 404.936l-18.5 36.938-3.593-10.813h-.032l-2.75-8.125-2.688 5.407-22.53 52.875c8.167-13.754 16.134-28.352 24.124-42.44l3.562 10.814.032.03 2.75 8.126 2.687-5.406 23.78-47.406h-6.842z"}}]})(props);
};
module.exports.GiChainMail = function GiChainMail (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M174.688 61.094L144.125 78.75 43.53 136.813l-10.124 5.843-10.718 6.188-5.47 3.156 65.407 113.375 2.03-1.156 4.97-2.876 9.188-5.313V256l55.874-32.438-8.625 195.938-.156 3.22-1.125 24.03h222.126l-.125-2.688-.31-7.343-.783-17.22-8.593-195.53 55.22 32.06-.033.033 13.283 7.656.843.5 2.063 1.186L493.874 152l-5.47-3.156-10.717-6.188-94.438-54.5-16.28-9.406-22.408-12.938-8.156-4.687c-11.456 23.492-43.573 40.594-81.156 40.594-37.564 0-69.075-17.103-80.53-40.595l-.032-.03zm-17.313 31.562c38.33 35.412 91.103 46.482 137.03 34.563l-7.717 14.25 13.125 24.25 13.125-24.25-9.22-17.032c18.97-6.366 36.472-16.805 50.876-31.25l113.75 65.656-46.72 81L392 222.624l12.156-22.468-13.125-24.25-13.124 24.25L389.186 221l-19.31-11.22-33.563-19.874.5 8.5-12.938-23.906-13.156 24.25L323.874 223l12.97-23.97 1.467 24.626h.032l2.187 49.406-10.655-19.656-13.125 24.25L326.688 296h-60.22l9-16.625-13.124-24.25-13.125 24.25 9 16.625h-88l3.405-77.25h-.03l1.155-28.875-33.53 19.875-51.75 30.063-46.72-80.97 114.625-66.187zm4.563 16.78l-13.125 24.25 13.125 24.25 13.125-24.25-13.125-24.25zm270.093 39.626l-13.124 24.25 13.125 24.25 13.126-24.25-13.125-24.25zM128.69 166.72l-13.125 24.25 13.124 24.25 13.125-24.25-13.125-24.25zm113.843 38.186l-13.124 24.25 13.125 24.25 13.126-24.25-13.125-24.25zm55.876 19.813l-13.125 24.25 13.126 24.25 13.125-24.25-13.124-24.25zm-99.72 9.186l-13.124 24.25 13.125 24.25 13.157-24.25-13.156-24.25zm142.22 47.625l.625 14.47h-8.467l7.843-14.47zM169.47 312.97h172.81l.876 19.967H168.594l.875-19.968zm-1.626 36.936H207l-10.844 19.97 13.156 24.25 13.125-24.25-10.812-19.97h120.563l-11.563 21.375 13.125 24.25L345 374.75l1.97 44.75h-53.44l8.095-14.97-13.125-24.25-13.125 24.25 8.094 14.97H164.78l3.064-69.594zm167.47 0h8.592l.75 17.28-9.344-17.28z"}}]})(props);
};
module.exports.GiChainedArrowHeads = function GiChainedArrowHeads (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M97.53 20.705v.002l6.425 82.932-86.434-6.427v53.73l207.912 74.754L151.26 20.705H97.53zm-80.01.002v31.537L72.42 72.102 53.73 20.707H17.52zM237.366 45.21l15.754 207.743L45.374 237.2l300.363 108.374L237.368 45.21h-.003zm117.342 171.927l.002.008v-.008h-.003zm.002.008l11.272 148.67-148.68-11.272 214.968 77.562-77.56-214.96zm87.493 137.65l.002.008v-.008h-.002zm.002.008l7.158 94.396-94.404-7.16 136.49 49.247-49.245-136.484z"}}]})(props);
};
module.exports.GiChainedHeart = function GiChainedHeart (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M257.08 11.29l-9.232 1.437-62.868 9.765 3.586 23.08C175.62 49.84 163.09 55.3 151.15 61.875l-14.51-18.03-7.28 5.86-49.56 39.89 14.163 17.594C84.847 117.31 76.6 128.367 69.39 140.3l-20.78-8.046-3.374 8.715-22.976 59.325 20.26 7.846c-2.96 13.812-4.544 27.692-4.805 41.47l-21.02 3.267 11.2 72.1 20.634-3.206c4.347 13.326 9.955 26.213 16.74 38.474l-16.165 13.012 45.75 56.84 15.858-12.764c10.425 9.35 21.846 17.776 34.183 25.104l-7.27 18.773 68.042 26.347 7.266-18.76c14.02 2.89 28.103 4.36 42.074 4.482l3.115 20.05 72.1-11.2-3.168-20.386c13.326-4.498 26.2-10.26 38.433-17.205l13.075 16.24 56.84-45.747-13.315-16.543c9.093-10.365 17.275-21.698 24.394-33.906l20.11 7.787 26.35-68.038-20.63-7.988c2.71-13.685 4.057-27.422 4.133-41.05l22.29-3.462-1.434-9.234-9.765-62.866-22.85 3.55c-4.413-12.947-10.017-25.466-16.746-37.378l18.103-14.57-5.86-7.28-39.89-49.56-18.28 14.715c-10.058-8.863-21.032-16.864-32.835-23.868l8.562-22.112-8.713-3.375L309.7 16.88 301.136 39c-13.31-2.74-26.68-4.21-39.95-4.45-.166-.004-.33-.002-.494-.005l-3.61-23.252zm-15.598 21.337l3.108 20.008-35.164 5.463-3.11-20.006 35.166-5.465zm78.897 8.43l33.184 12.85-7.312 18.882-33.184-12.853 7.31-18.88zM263.6 53.27c10.2.34 20.456 1.458 30.687 3.406l-5.4 13.94 68.042 26.35 5.402-13.952c8.848 5.43 17.16 11.487 24.91 18.08l-11.842 9.53 45.75 56.84 12.098-9.735c4.986 9.14 9.272 18.65 12.787 28.45l-15.443 2.398 11.2 72.1 15.98-2.483c-.226 10.394-1.278 20.852-3.174 31.29l-15.395-5.964-3.373 8.714-22.977 59.327 15.975 6.188c-5.567 9.24-11.81 17.91-18.633 25.97l-10.926-13.575-7.278 5.86-49.56 39.89 11.24 13.964c-9.47 5.195-19.338 9.627-29.514 13.24l-2.78-17.908-9.235 1.433-62.866 9.766 2.828 18.202c-10.74-.272-21.548-1.413-32.328-3.47l6.7-17.3-8.713-3.375-59.327-22.974-6.695 17.29c-9.38-5.763-18.16-12.224-26.3-19.286l14.302-11.512-5.86-7.28-39.888-49.56-14.02 11.285c-5.058-9.483-9.343-19.362-12.826-29.53l17.688-2.75-1.436-9.232-9.765-62.867-17.182 2.67c.385-10.546 1.607-21.15 3.715-31.723l15.826 6.128 26.35-68.04-15.258-5.91c5.624-8.986 11.9-17.41 18.726-25.24l10.118 12.57 56.84-45.75-9.778-12.147c9.155-4.854 18.672-8.996 28.465-12.387l2.366 15.234 72.1-11.202-2.324-14.96zM133.8 70.124l12.694 15.772-27.723 22.312-12.694-15.77L133.8 70.122zm283.653 30.648l22.313 27.722-15.774 12.696-22.312-27.72 15.773-12.697zm-84.244 42c-1.918-.015-3.84.045-5.76.187-23.033 1.7-45.933 15.003-61.29 44.006l-7.906 14.933-8.445-14.636c-20.227-35.054-56.5-47.824-87.093-41.81-30.592 6.012-55.328 29.383-53.947 72.85 1.278 40.24 29.05 67.447 63.59 97.54 30.045 26.176 64.672 53.784 85.763 93.478 22.093-39.507 57.856-65.95 88.133-91.453 17.386-14.644 33.017-28.982 43.86-44.736 10.846-15.755 17.13-32.66 16.456-54.243-1.262-40.46-26.58-66.478-56.316-73.916-5.576-1.394-11.296-2.148-17.047-2.2zM59.286 156.433l18.88 7.31-12.85 33.186-18.88-7.31 12.85-33.186zm412.65 44.636l5.463 35.164-20.01 3.11-5.462-35.164 20.01-3.11zm-413.9 64.3l5.465 35.165-20.006 3.108-5.465-35.163 20.007-3.11zm391.846 42.33l18.88 7.312-12.85 33.185-18.88-7.312 12.85-33.186zM91.156 363.4l22.313 27.723-15.775 12.695-22.312-27.722L91.156 363.4zm305.274 33.02l12.695 15.77-27.723 22.316-12.695-15.774 27.723-22.312zm-227.315 35.23l33.186 12.852-7.31 18.88-33.185-12.85 7.31-18.882zm136.662 14.873l3.11 20.01-35.164 5.463-3.11-20.008 35.164-5.465z"}}]})(props);
};
module.exports.GiChaingun = function GiChaingun (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M256 16c-39.764 0-72 32.236-72 72s32.236 72 72 72 72-32.236 72-72-32.236-72-72-72zm0 48c13.255 0 24 10.745 24 24s-10.745 24-24 24-24-10.745-24-24 10.745-24 24-24zm-147.03 36c-24.314.545-47.766 13.4-60.814 36-19.882 34.437-8.093 78.462 26.344 98.344 34.437 19.882 78.493 8.093 98.375-26.344 19.882-34.437 8.062-78.462-26.375-98.344-11.838-6.834-24.796-9.94-37.53-9.656zm290.592 0c-11.606.3-23.3 3.443-34.062 9.656-34.437 19.882-46.257 63.907-26.375 98.344 19.882 34.437 63.938 46.226 98.375 26.344 34.437-19.882 46.226-63.907 26.344-98.344-13.67-23.675-38.748-36.663-64.28-36zM110 148c4.245-.095 8.554.94 12.5 3.22 11.48 6.626 15.41 21.3 8.78 32.78-6.626 11.48-21.3 15.41-32.78 8.78-11.48-6.626-15.41-21.3-8.78-GAAU,UAAW/W,OAAOqU,EAAGiC,cAAcxW,MAE1DuU,EAAGwC,QAAQ7U,MACT,mCAAmClC,kEAG9B,IAAIiX,GAAU,WAWP,SAAAjT,GACdsQ,EACAlR,GAEA,MAAMmR,EAAKvT,EAAmBsT,GAC9B,OAAQlR,GACN,IAAK,QACHmR,EAAGwC,QAAQ3T,SAAW8T,EAAiB/U,MACvC,MACF,IAAK,SACHoS,EAAGwC,QAAQ3T,SAAW8T,EAAiBrU,OACvC,MACF,QACE0R,EAAGwC,QAAQ3T,SAAW8T,EAAiBvU,OCzNhC,MAAAwU,GACXzY,YACmB0Y,EACAC,EACAC,EACAC,GAHAxY,KAAMqY,OAANA,EACArY,KAAOsY,QAAPA,EACAtY,KAAYuY,aAAZA,EACAvY,KAAMwY,OAANA,EAYnBC,kBACE7B,EACA8B,GAGA,IAAKA,EAEH,OADA1Y,KAAKwY,OAAOrV,MAAM,iDACX,EAIT,MAAMwV,EAAiBpU,KAAKD,MAAQoU,EAE9BD,EAAoBE,GAAkB/B,EAS5C,OAPA5W,KAAKwY,OAAOrV,MAER,+CAAsBwV,iEACyC/B,oBAC7C6B,MAGfA,EAGT/O,YAAYhB,GAEV,MAAOgQ,EAAoCjD,SACnC/N,QAAQqC,IAAI,CAChB/J,KAAKsY,QAAQM,wCACb5Y,KAAKsY,QAAQ1C,mCAIjB,GACEH,GACAzV,KAAKyY,kBACH/P,EAAQkO,kBACR8B,GAGF,OAAOjD,EAKT/M,EAAQqN,KACNN,GAA+BA,EAA4BM,KAG7D,MAAMzL,QAAiBtK,KAAKqY,OAAOjH,MAAM1I,GAInCmQ,EAAoB,CAExB7Y,KAAKuY,aAAaO,sCAAsCvU,KAAKD,QAY/D,OATwB,MAApBgG,EAASc,QAEXyN,EAAkBxE,KAChBrU,KAAKsY,QAAQS,+BAA+BzO,UAI1C5C,QAAQqC,IAAI8O,GAEXvO,GC5FK,SAAA0O,GACdC,EAAuC9I,WAEvC,OAEG8I,EAAkBC,WAAaD,EAAkBC,UAAU,IAG5DD,EAAkBE,SCeT,MAAAC,GACXzZ,YACmB0Z,EACApI,EACAqI,EACAlP,EACAkB,EACAgC,GALAtN,KAAqBqZ,sBAArBA,EACArZ,KAAUiR,WAAVA,EACAjR,KAASsZ,UAATA,EACAtZ,KAASoK,UAATA,EACApK,KAAMsL,OAANA,EACAtL,KAAKsN,MAALA,EAYnB5D,YAAYhB,GACV,MAAO6Q,EAAgBC,SAA2B9R,QAAQqC,IAAI,CAC5D/J,KAAKqZ,sBAAsB3F,QAC3B1T,KAAKqZ,sBAAsBrG,aAOvByG,EAAM,GAHVC,OAAOC,iCACP,6DAEoC3Z,KAAKoK,wBAAwBpK,KAAKsZ,uBAAuBtZ,KAAKsL,SAE9FM,EAAU,CACd,eAAgB,mBAChB,mBAAoB,OAGpB,gBAAiBlD,EAAQqN,MAAQ,KAG7B6D,EAAgC,CAEpCC,YAAa7Z,KAAKiR,WAClB6I,gBAAiBP,EACjBQ,sBAAuBP,EACvBQ,OAAQha,KAAKsN,MACb2M,cAAejB,MAIXpF,EAAU,CACdnP,OAAQ,OACRmH,QAAAA,EACAmF,KAAMG,KAAKC,UAAUyI,IAIjBM,EAAe9I,MAAMqI,EAAK7F,GAC1BuG,EAAiB,IAAIzS,SAAQ,CAAC0S,EAAUxS,KAE5Cc,EAAQoO,OAAO7O,kBAAiB,KAE9B,MAAMtE,EAAQ,IAAIjE,MAAM,8BACxBiE,EAAM1D,KAAO,aACb2H,EAAOjE,SAIX,IAAI2G,EACJ,UACQ5C,QAAQ2S,KAAK,CAACH,EAAcC,IAClC7P,QAAiB4P,EACjB,MAAOI,GACP,IAAIrD,EAAoC,uBAIxC,KAHuC,gBAAlCqD,MAAAA,OAAa,EAAbA,EAAyBra,QAC5BgX,EAAoC,iBAEhChN,GAAc1J,OAAO0W,EAAW,CACpCsD,qBAAuBD,MAAAA,OAAA,EAAAA,EAAyBza,UAIpD,IAAIuL,EAASd,EAASc,OAGtB,MAAMoP,EAAelQ,EAASsB,QAAQ9F,IAAI,cAAWM,EAErD,IAAI0P,EACA2E,EAIJ,GAAwB,MAApBnQ,EAASc,OAAgB,CAC3B,IAAIsP,EACJ,IACEA,QAAqBpQ,EAASU,OAC9B,MAAOsP,GACP,MAAMrQ,GAAc1J,OAA8B,qBAAA,CAChDga,qBAAuBD,MAAAA,OAAA,EAAAA,EAAyBza,UAGpDiW,EAAS4E,EAAsB,QAC/BD,EAAQC,EAAoB,MAiB9B,GAbc,+BAAVD,EACFrP,EAAS,IACU,cAAVqP,EACTrP,EAAS,IACU,gBAAVqP,GAAqC,iBAAVA,IAEpC3E,EAAS,IAOI,MAAX1K,GAA6B,MAAXA,EACpB,MAAMnB,GAAc1J,OAA+B,eAAA,CACjDoa,WAAYvP,IAIhB,MAAO,CAAEA,OAAAA,EAAQ2K,KAAMyE,EAAc1E,OAAAA,ICpF5B,MAAA8E,GACXjb,YACmB0Y,EACAC,GADAtY,KAAMqY,OAANA,EACArY,KAAOsY,QAAPA,EAGnB5O,YAAYhB,GACV,MAAMmS,QAA0B7a,KAAKsY,QAAQwC,uBAA0B,CACrEvZ,aAAc,EACdwZ,sBAAuBxW,KAAKD,OAG9B,OAAOtE,KAAKgb,aAAatS,EAASmS,GAQpCnR,mBACEhB,GACAqS,sBAAEA,EAAqBxZ,aAAEA,UAxEb,SACduV,EACAiE,GAEA,OAAO,IAAIrT,SAAQ,CAACC,EAASC,KAE3B,MAAMqT,EAAgBtZ,KAAKuZ,IAAIH,EAAwBxW,KAAKD,MAAO,GAE7D6W,EAAUhP,WAAWxE,EAASsT,GAGpCnE,EAAO7O,kBAAiB,KACtBmT,aAAaD,GAGbvT,EACEqC,GAAc1J,OAAiC,iBAAA,CAC7Cwa,sBAAAA,WA4DAM,CAAoB3S,EAAQoO,OAAQiE,GAE1C,IACE,MAAMzQ,QAAiBtK,KAAKqY,OAAOjH,MAAM1I,GAKzC,aAFM1I,KAAKsY,QAAQgD,yBAEZhR,EACP,MAAO9K,GACP,IA3DN,SAA0BA,GACxB,KAAMA,aAAaC,GAAmBD,EAAEM,YACtC,OAAO,EAIT,MAAM6a,EAAahQ,OAAOnL,EAAEM,WAAuB,YAEnD,OACiB,MAAf6a,GACe,MAAfA,GACe,MAAfA,GACe,MAAfA,EA+COY,CAAiB/b,GACpB,MAAMA,EAIR,MAAMqb,EAAmB,CACvBE,sBACExW,KAAKD,MAAQhD,EAAuBC,GACtCA,aAAcA,EAAe,GAM/B,aAFMvB,KAAKsY,QAAQkD,oBAAoBX,GAEhC7a,KAAKgb,aAAatS,EAASmS,KCxG3B,MAAAY,GA4BX9b,YAEW4T,EAOAoD,EAIAX,EAIAL,EAIAqC,GAnBAhY,KAAGuT,IAAHA,EAOAvT,KAAO2W,QAAPA,EAIA3W,KAAagW,cAAbA,EAIAhW,KAAQ2V,SAARA,EAIA3V,KAAOgY,QAAPA,EA5CXhY,KAAyBsW,2BAAG,EAQ5BtW,KAAAyW,SAAiC,CAC/BC,mBAtBiC,IAuBjCG,2BAtBiC,OAyBnC7W,KAAayX,cAAiD,GAE1DiE,sBACF,OAAO1b,KAAKgW,cAAc4C,0CAA4C,EAGpE5B,sBACF,OAAOhX,KAAKgW,cAAc2F,sBAAwB,gBCjCtD,SAASC,GAAgB9M,EAAcmI,GACrC,MAAMqD,EAAiBxL,EAAM/I,OAAsBpC,YAASyC,EAC5D,OAAO6D,GAAc1J,OAAO0W,EAAW,CACrCsD,qBAAsBD,IAAkBA,MAAAA,OAAA,EAAAA,EAAyBza,WAkFxD,MAAAgc,GAMXlc,YACmB2N,EACAD,EACAiM,EACAwC,EAhDL,WACd,OAAO,IAAIpU,SAAQ,CAACC,EAASC,KAC3B,IACE,MAAMc,EAAUnJ,UAAUqP,KA/BhB,yBACG,GA+BblG,EAAQqT,QAAUjN,IAChBlH,EAAOgU,GAAgB9M,EAAK,kBAE9BpG,EAAQsT,UAAYlN,IAClBnH,EAASmH,EAAM/I,OAA4B8C,SAE7CH,EAAQuT,gBAAkBnN,IACxB,MAAMG,EAAMH,EAAM/I,OAA4B8C,OAQvC,IADCiG,EAAMC,YAEVE,EAAGE,kBAlDoB,sBAkDmB,CACxC+M,QAAS,kBAIjB,MAAOvY,GACPiE,EACEqC,GAAc1J,OAA+B,eAAA,CAC3Cga,qBAAuB5W,MAAAA,OAAA,EAAAA,EAAiB9D,eAoBbsc,IAHhBnc,KAAKsN,MAALA,EACAtN,KAAOqN,QAAPA,EACArN,KAASsZ,UAATA,EACAtZ,KAAa8b,cAAbA,EAGnBH,qBACE,OAAO3b,KAAK8F,IAAiB,qBAG/BiR,mBAAmB3L,GACjB,OAAOpL,KAAKuG,IAAiB,oBAAqB6E,GAKpDwN,wCACE,OAAO5Y,KAAK8F,IAAY,0CAG1BgT,sCAAsCsD,GACpC,OAAOpc,KAAKuG,IACV,yCACA6V,GAIJxG,iCACE,OAAO5V,KAAK8F,IAAmB,kCAGjCiT,+BAA+BzO,GAC7B,OAAOtK,KAAKuG,IAAmB,iCAAkC+D,GAGnEkN,kBACE,OAAOxX,KAAK8F,IAAgC,iBAG9CmQ,gBAAgBH,GACd,OAAO9V,KAAKuG,IAAgC,gBAAiBuP,GAG/DD,sBACE,OAAO7V,KAAK8F,IAAY,sBAG1BoQ,oBAAoBmG,GAClB,OAAOrc,KAAKuG,IAAY,qBAAsB8V,GAGhDvB,sBACE,OAAO9a,KAAK8F,IAAsB,qBAGpC0V,oBAAoBc,GAClB,OAAOtc,KAAKuG,IAAsB,oBAAqB+V,GAGzDhB,yBACE,OAAOtb,KAAKuP,OAAO,qBAGrB7F,UAAazI,GACX,MAAMgO,QAAWjP,KAAK8b,cACtB,OAAO,IAAIpU,SAAQ,CAACC,EAASC,KAC3B,MACMvB,EADc4I,EAAGrI,YAAY,CA7IN,uBA6I6B,YAC1BP,YA9IH,uBA+IvBkW,EAAevc,KAAKwc,mBAAmBvb,GAC7C,IACE,MAAMyH,EAAUrC,EAAYP,IAAIyW,GAChC7T,EAAQqT,QAAUjN,IAChBlH,EAAOgU,GAAgB9M,EAAK,iBAE9BpG,EAAQsT,UAAYlN,IAClB,MAAMjG,EAAUiG,EAAM/I,OAAsB8C,OAE1ClB,EADEkB,EACMA,EAAO3H,WAEPkF,IAGZ,MAAO5G,GACPoI,EACEqC,GAAc1J,OAA8B,cAAA,CAC1Cga,qBAAuB/a,MAAAA,OAAA,EAAAA,EAAaK,eAO9C6J,UAAazI,EAAoCC,GAC/C,MAAM+N,QAAWjP,KAAK8b,cACtB,OAAO,IAAIpU,SAAQ,CAACC,EAASC,KAC3B,MACMvB,EADc4I,EAAGrI,YAAY,CA1KN,uBA0K6B,aAC1BP,YA3KH,uBA4KvBkW,EAAevc,KAAKwc,mBAAmBvb,GAC7C,IACE,MAAMyH,EAAUrC,EAAYgJ,IAAI,CAC9BkN,aAAAA,EACArb,MAAAA,IAEFwH,EAAQqT,QAAWjN,IACjBlH,EAAOgU,GAAgB9M,EAAK,iBAE9BpG,EAAQsT,UAAY,KAClBrU,KAEF,MAAOnI,GACPoI,EACEqC,GAAc1J,OAA8B,cAAA,CAC1Cga,qBAAuB/a,MAAAA,OAAA,EAAAA,EAAaK,eAO9C6J,aAAazI,GACX,MAAMgO,QAAWjP,KAAK8b,cACtB,OAAO,IAAIpU,SAAQ,CAACC,EAASC,KAC3B,MACMvB,EADc4I,EAAGrI,YAAY,CArMN,uBAqM6B,aAC1BP,YAtMH,uBAuMvBkW,EAAevc,KAAKwc,mBAAmBvb,GAC7C,IACE,MAAMyH,EAAUrC,EAAYkJ,OAAOgN,GACnC7T,EAAQqT,QAAWjN,IACjBlH,EAAOgU,GAAgB9M,EAAK,oBAE9BpG,EAAQsT,UAAY,KAClBrU,KAEF,MAAOnI,GACPoI,EACEqC,GAAc1J,OAAiC,iBAAA,CAC7Cga,qBAAuB/a,MAAAA,OAAA,EAAAA,EAAaK,eAQ9C2c,mBAAmBvb,GACjB,MAAO,CAACjB,KAAKsN,MAAOtN,KAAKqN,QAASrN,KAAKsZ,UAAWrY,GAAKwb,QCjP9C,MAAAC,GACX/c,YAA6B2Y,GAAAtY,KAAOsY,QAAPA,EAY7BqD,qBACE,OAAO3b,KAAKgX,gBAGd4B,wCACE,OAAO5Y,KAAK0Y,mCAGdlB,kBACE,OAAOxX,KAAKiY,aAMdvO,wBACE,MAAMiT,EAAyB3c,KAAKsY,QAAQqD,qBACtCiB,EACJ5c,KAAKsY,QAAQM,wCACTiE,EAAsB7c,KAAKsY,QAAQd,kBAQnCR,QAAwB2F,EAC1B3F,IACFhX,KAAKgX,gBAAkBA,GAGzB,MAAM0B,QACEkE,EACJlE,IACF1Y,KAAK0Y,mCACHA,GAGJ,MAAMT,QAAqB4E,EACvB5E,IACFjY,KAAKiY,aAAeA,GAOxBlB,mBAAmB3L,GAEjB,OADApL,KAAKgX,gBAAkB5L,EAChBpL,KAAKsY,QAAQvB,mBAAmB3L,GAGzC0N,sCACEgE,GAGA,OADA9c,KAAK0Y,mCAAqCoE,EACnC9c,KAAKsY,QAAQQ,sCAAsCgE,GAG5D7G,gBAAgBgC,GAEd,OADAjY,KAAKiY,aAAeA,EACbjY,KAAKsY,QAAQrC,gBAAgBgC,IC7DjCvO,eAAeqT,GACpBxH,GAIA,OAFAA,EAAetT,EAAmBsT,SAC5BgB,GAAYhB,GACXD,GAASC,GAaX7L,eAAesT,KACpB,IAAK1d,IACH,OAAO,EAGT,IAEE,atCsGK,IAAIoI,SAAQ,CAACC,EAASC,KAC3B,IACE,IAAIqV,GAAoB,EACxB,MAAMC,EACJ,0DACIxU,EAAU8D,KAAKjN,UAAUqP,KAAKsO,GACpCxU,EAAQsT,UAAY,KAClBtT,EAAQG,OAAOoF,QAEVgP,GACHzQ,KAAKjN,UAAU4d,eAAeD,GAEhCvV,GAAQ,IAEVe,EAAQuT,gBAAkB,KACxBgB,GAAW,GAGbvU,EAAQqT,QAAU,WAChBnU,GAAoB,QAAbuF,EAAAzE,EAAQ/E,aAAK,IAAAwJ,OAAA,EAAAA,EAAEtN,UAAW,KAEnC,MAAO8D,GACPiE,EAAOjE,OsC3HT,MAAOA,GACP,OAAO,GCpBTgQ,EACE,IAAIxR,EZ7ByB,iBYwC/B,SACEmR,GACE8J,mBAAoB9D,IAItB,MAAM/F,EAAMD,EAAUE,YAAY,OAAO7C,eAEnChB,EAAgB2D,EACnBE,YAAY,0BACZ7C,eAGH,GAAsB,oBAAX+I,OACT,MAAMzP,GAAc1J,OAAM,uBAG5B,IAAKjB,IACH,MAAM2K,GAAc1J,OAAM,0BAG5B,MAAM6J,UAAEA,EAASkB,OAAEA,EAAMgC,MAAEA,GAAUiG,EAAIK,QACzC,IAAKxJ,EACH,MAAMH,GAAc1J,OAAM,2BAE5B,IAAK+K,EACH,MAAMrB,GAAc1J,OAAM,wBAE5B,IAAK+M,EACH,MAAMrD,GAAc1J,OAAM,uBAE5B+Y,EAAYA,GAAa,WAEzB,MAAMhB,EAAU,IAAIuD,GAAQvO,EAAOiG,EAAItT,KAAMqZ,GACvCf,EAAe,IAAImE,GAAapE,GAEhCE,EAAS,IAAI7T,EAAO0Y,IAI1B7E,EAAOnU,SAAW8T,EAAiBvU,MAEnC,MAAM0Z,EAAa,IAAIlE,GACrBzJ,EAEA4N,EACAjE,EACAlP,EACAkB,EACAgC,GAEIkQ,EAAiB,IAAI5C,GAAe0C,EAAYhF,GAChDmF,EAAgB,IAAIrF,GACxBoF,EACAlF,EACAC,EACAC,GAGIkF,EAAuB,IAAIC,GAC/BpK,EACAkK,EACAlF,EACAD,EACAE,GAOF,OAFArC,GAAkBuH,GAEXA,IA9EN,UAAC9a,sBAAqB,IAGzBqR,EAAgBoJ,YAEhBpJ,EAAgBoJ,WAAsB","preExistingComment":"firebase-remote-config.js.map"}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               module.exports={C:{"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0.00368,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0.00368,"52":0.03682,"53":0,"54":0,"55":0,"56":0.00736,"57":0.00368,"58":0,"59":0,"60":0,"61":0.00368,"62":0,"63":0,"64":0,"65":0.00368,"66":0,"67":0,"68":0.00368,"69":0,"70":0,"71":0,"72":0.00736,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0.00368,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0.00368,"94":0.00368,"95":0,"96":0,"97":0,"98":0,"99":0.00368,"100":0,"101":0.00368,"102":0.01473,"103":0.00368,"104":0.00368,"105":0.00368,"106":0.00368,"107":0.00736,"108":0.00736,"109":0.02577,"110":0.43448,"111":0.35347,"112":0.00368,"113":0,"3.5":0,"3.6":0},D:{"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0.00736,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0.00368,"48":0,"49":0.02577,"50":0,"51":0,"52":0,"53":0.00368,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0.00736,"64":0.00368,"65":0,"66":0.00368,"67":0,"68":0.00368,"69":0,"70":0.00368,"71":0.00368,"72":0.00368,"73":0.00736,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0.06628,"80":0,"81":0.01841,"83":0.01473,"84":0.00736,"85":0.01473,"86":0.01105,"87":0.01841,"88":0.00736,"89":0,"90":0.00368,"91":0.00736,"92":0.00368,"93":0.00736,"94":0.00736,"95":0.00736,"96":0.00736,"97":0.00736,"98":0.00368,"99":0.02209,"100":0.01105,"101":0.00736,"102":0.01105,"103":0.01473,"104":0.01105,"105":0.01473,"106":0.01841,"107":0.02577,"108":0.05523,"109":1.77841,"110":3.09656,"111":4.84551,"112":0.00736,"113":0,"114":0},F:{"9":0,"11":0,"12":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0.01105,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0.00368,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0.01473,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"60":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0.00368,"71":0,"72":0,"73":0,"74":0.01841,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0.00368,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0.00368,"95":0.19146,"9.5-9.6":0,"10.0-10.1":0,"10.5":0,"10.6":0,"11.1":0,"11.5":0,"11.6":0,"12.1":0},B:{"12":0,"13":0,"14":0,"15":0.01105,"16":0,"17":0,"18":0,"79":0,"80":0,"81":0,"83":0,"84":0.00368,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0.00368,"108":0.00368,"109":0.01105,"110":0.3682,"111":0.30192},E:{"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0.00736,"15":0,_:"0","3.1":0,"3.2":0,"5.1":0,"6.1":0,"7.1":0,"9.1":0,"10.1":0,"11.1":0,"12.1":0,"13.1":0.01105,"14.1":0.02577,"15.1":0,"15.2-15.3":0,"15.4":0.00368,"15.5":0.01105,"15.6":0.04418,"16.0":0.00736,"16.1":0.01105,"16.2":0.02577,"16.3":0.09205,"16.4":0.00368,"16.5":0},G:{"8":0,"3.2":0,"4.0-4.1":0,"4.2-4.3":0,"5.0-5.1":0.00189,"6.0-6.1":0,"7.0-7.1":0.02453,"8.1-8.4":0.00189,"9.0-9.2":0.00189,"9.3":0.06039,"10.0-10.2":0,"10.3":0.03586,"11.0-11.2":0.01132,"11.3-11.4":0.00566,"12.0-12.1":0.00566,"12.2-12.5":0.41329,"13.0-13.1":0.00377,"13.2":0.00377,"13.3":0.04152,"13.4-13.7":0.09813,"14.0-14.4":0.19626,"14.5-14.8":0.65861,"15.0-15.1":0.07737,"15.2-15.3":0.16229,"15.4":0.18305,"15.5":0.40385,"15.6":1.1455,"16.0":1.68145,"16.1":2.93263,"16.2":1.81166,"16.3":7.39574,"16.4":0.18494,"16.5":0},P:{"4":0.15418,"20":2.1071,"5.0-5.4":0.02056,"6.2-6.4":0,"7.2-7.4":0.01028,"8.2":0,"9.2":0,"10.1":0,"11.1-11.2":0.03084,"12.0":0.01028,"13.0":0.04111,"14.0":0.02056,"15.0":0.01028,"16.0":0.03084,"17.0":0.07195,"18.0":0.03084,"19.0":0.21585},I:{"0":0,"3":0,"4":0,"2.1":0,"2.2":0,"2.3":0,"4.1":0.04199,"4.2-4.3":0.01547,"4.4":0,"4.4.3-4.4.4":0.04199},K:{_:"0 10 11 12 11.1 11.5 12.1"},A:{"6":0,"7":0,"8":0.00736,"9":0.00368,"10":0,"11":0.01105,"5.5":0},S:{"2.5":0,_:"3.0-3.1"},J:{"7":0,"10":0},N:{"10":0,"11":0},R:{_:"0"},M:{"0":0.08213},Q:{"13.1":0},O:{"0":0.01264},H:{"0":0.17346},L:{"0":65.39216}};
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              32.78 4.348-7.533 12.176-11.818 20.28-12zm290.844 0c8.51-.22 16.88 4.108 21.437 12 6.63 11.48 2.7 26.154-8.78 32.78-11.48 6.63-26.154 2.7-32.78-8.78-6.63-11.48-2.7-26.154 8.78-32.78 3.587-2.072 7.475-3.12 11.344-3.22zm-143.438 60.03A48 48 0 0 0 208 256a48 48 0 0 0 96 0 48 48 0 0 0-46.594-47.97zM108.562 268c-11.606.3-23.3 3.443-34.062 9.656C40.063 297.538 28.274 341.563 48.156 376c19.882 34.437 63.907 46.226 98.344 26.344 34.437-19.882 46.257-63.907 26.375-98.344-13.67-23.675-38.78-36.663-64.313-36zm291.375 0c-24.312.545-47.764 13.4-60.812 36-19.882 34.437-8.062 78.462 26.375 98.344 34.437 19.882 78.462 8.093 98.344-26.344 19.882-34.437 8.093-78.462-26.344-98.344-11.838-6.834-24.827-9.94-37.563-9.656zm-290.062 48c8.51-.22 16.85 4.108 21.406 12 6.63 11.48 2.7 26.154-8.78 32.78-11.48 6.63-26.154 2.7-32.78-8.78-6.63-11.48-2.7-26.154 8.78-32.78 3.587-2.072 7.506-3.12 11.375-3.22zm291.094 0c4.244-.095 8.584.94 12.53 3.22 11.48 6.626 15.41 21.3 8.78 32.78-6.626 11.48-21.3 15.41-32.78 8.78-11.48-6.626-15.41-21.3-8.78-32.78 4.348-7.533 12.145-11.818 20.25-12zM256 352c-39.764 0-72 32.236-72 72s32.236 72 72 72 72-32.236 72-72-32.236-72-72-72zm0 48c13.255 0 24 10.745 24 24s-10.745 24-24 24-24-10.745-24-24 10.745-24 24-24z"}}]})(props);
};
module.exports.GiChainsaw = function GiChainsaw (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M415.01 24.54l-11.534 15.874-6.784-12.55-6.052 20.284-10.82-10.822V59.59l4.927-4.928c1.285-1.285 2.6-2.472 3.938-3.572l1.548-1.55 1.752-.946c3.075-2.14 6.244-3.83 9.452-5.108l1.56-.843 1.385-.22c4.262-1.358 8.56-2.017 12.76-2.034 4.26-.02 8.418.626 12.337 1.84l1.277.19.728.488c4.625 1.7 8.865 4.218 12.475 7.428l.02-.03.08.116c.51.458 1.013.927 1.498 1.412 9.712 9.712 14.015 24.82 9.85 39.69l-.067.763.098.008-.664 1.295c-1.39 4.16-3.46 8.28-6.277 12.238l-.002.002 14.234 7.305-6.69-20.785 15.238 1.345-14.136-16.873 14.986-4.27-18.652-10.384 12.31-8.625-21.447-3.773 8.095-12.086-21.213 4.193 2.28-15.225-16.255 12.022-2.236-14.133zm-46.505 24.1v22.264l11.133-11.133-11.133-11.13zm48.902 8.983c-6.054-.044-12.86 2.697-19.93 9.768l-90.437 90.434-61.594 61.594 32.528 32.527L430 99.918c14.143-14.142 10.963-27.224 2.83-35.356-4.065-4.065-9.368-6.895-15.423-6.94zm-60.215 2.332v22.262l11.13-11.13-11.13-11.132zm-11.314 11.313V93.53l11.13-11.13-11.13-11.132zm69.412 2.67a8.745 8.745 0 0 1 8.744 8.748 8.745 8.745 0 0 1-8.744 8.744 8.745 8.745 0 0 1-8.744-8.744 8.745 8.745 0 0 1 8.744-8.747zm-80.727 8.644v22.264l11.133-11.133-11.133-11.13zM323.25 93.895v22.263l11.132-11.13-11.13-11.133zm-11.313 11.314v22.263l11.13-11.13-11.13-11.134zm136.464.75c-1.64 2.29-3.515 4.53-5.67 6.685l-4.924 4.923 10.595 10.596V105.96zm-264.524 7.02l-15.45 9.23 33.032 55.286-.246 28.295h-23.346c4.726 6.403 9.315 12.9 13.76 19.472l6.004-8.407 16.598 16.598 4.95-14.848-.08-.08.403-45.925-35.624-59.622zm116.746 3.543v22.264l11.133-11.133-11.133-11.13zm136.465 1.764l-10.594 10.594 10.594 10.597v-21.19zm-147.777 9.55V150.1l5.002-5.002 6.128-6.13-11.13-11.132zm136.464 1.763l-10.595 10.595 10.594 10.596V129.6zm-147.78 9.55v22.264l11.134-11.133-11.133-11.13zm136.466 1.764l-10.596 10.596 10.596 10.595v-21.19zm-147.777 9.55v22.263l11.13-11.13-11.13-11.134zm136.463 1.765l-10.594 10.592 10.594 10.596v-21.19zm-147.778 9.547v22.264L266.5 172.91l-11.132-11.13zm136.465 1.764l-10.596 10.597 10.596 10.595v-21.19zm-272.45.925l-9.898 9.896c51.183 53.098 93.407 120.56 116.97 183.82l8.632-8.633c-21.83-62.468-64.416-131.767-115.705-185.082zm124.67 8.627v22.263l11.134-11.132-11.133-11.13zm136.466 1.763l-10.597 10.596 10.596 10.597v-21.192zm-147.78 9.55v22.263l11.132-11.13-11.13-11.134zm136.464 1.765l-10.594 10.594 10.594 10.595v-21.19zm-272.746.342c-7.49 13.277-9.05 27.2-5.568 40.146 2.025 7.532 5.466 14.662 9.906 21.446l13.152-13.153c-2.605-4.405-4.542-8.754-5.676-12.968-1.974-7.342-2.096-14.397.91-21.74-4.177-4.68-8.418-9.265-12.724-13.73zm261.434 10.97l-10.596 10.596 10.596 10.596v-21.192zm-11.315 11.315l-10.596 10.596 10.597 10.593v-21.19zm-11.312 11.312l-10.596 10.595 10.595 10.596v-21.19zm-11.315 11.314l-10.596 10.596 10.596 10.595v-21.19zm-90.54 1.412l-4.952 14.848 27.33 27.33-20.035 28.05c4.44 9.612 8.486 19.194 12.127 28.688 11.856-17.912 22.027-37.11 30.435-54.01l-6.705-6.705-38.2-38.2zm-95.042 3.152l-32.703 32.703-.9 11.392 17.115 1.13-2.522 38.145-17.603-1.164-.65 8.22c6.142 19.093 14.25 36.545 24.17 48.837 10.192 12.628 21.517 19.733 35.677 20.13 18.773.53 36.16-8.02 52.067-22.02-2.85-8.232-6.06-16.588-9.61-25.018l-8.622 12.072.248-.365c-5.264 8.19-14.726 12.155-23.21 11.388-8.482-.767-16.196-4.998-22.764-10.97-13.138-11.947-22.39-32.392-15.39-53.386l.427-1.283 26.754-37.46c-7.085-10.993-14.606-21.814-22.486-32.352zm174.268 6.75l-10.596 10.596 10.596 10.594v-21.19zm-11.313 11.313l-10.595 10.596 10.595 10.596v-21.19zm-90.66 1.294c5.73 9.71 11.107 19.502 16.12 29.308l5.495-7.693-21.615-21.616zM55.396 274.426l-2.67 45.176 17.968 1.062.803-13.603 30.516 1.805 1.187-17.963-30.64-1.81.804-13.606-17.968-1.06zm115.732 10.496l-20.62 28.87c-3.68 12.636 2.224 25.683 10.663 33.356 4.334 3.94 9.138 6.08 12.278 6.364 3.14.284 4.405-.02 6.446-3.196l.12-.185 14.874-20.823c-7.017-14.794-14.985-29.68-23.76-44.385zm-83.762 57.055l-47.494 59.37 47.842 86.112 74.078-74.077c-.45-.005-.895.003-1.346-.01-5.527-.156-10.785-1.093-15.765-2.68l-49.01 49.01-33.06-63.266 31.582-37.97c-2.48-5.315-4.752-10.83-6.826-16.49z"}}]})(props);
};
module.exports.GiChakram = function GiChakram (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M256 19C125 19 19 125 19 256s106 237 237 237 237-106 237-237S387 19 256 19zm31.2 24.62c32 8.05 45.4 16.11 62.4 33.82-14.2 10.15-32.7 13.37-52.5 14.63 27.8 6.96 52.9 20.83 73.3 39.63 8.3 3.4 15.9 5.1 21.4 2.9-16-9.8-21.9-32.5-17.9-46.12 20.6 23.02 30.2 38.12 54.3 39.32 16.9 28.3 20.7 43.5 20.2 68.1-17.3-2.9-32.7-13.7-47.6-26.9 14.3 23.6 22.9 51.1 24.1 80.4 3.4 8.1 7.5 14.6 12.9 16.8-4.3-18.3 7.5-38.5 20-45.3-1.8 30.8-5.7 48.3 10.5 66.2-8 32-16.1 45.4-33.8 62.4-10.1-14.2-13.3-32.6-14.6-52.3-7 27.9-21 53.1-40 73.6-3.2 8.1-4.8 15.5-2.6 20.9 9.9-16 32.5-21.9 46.1-17.9-23 20.5-38.1 30.1-39.3 54.3-28.3 16.9-43.5 20.7-68.1 20.2 2.9-17.1 13.6-32.4 26.6-47.3-23.6 14.3-51.1 22.8-80.4 23.9-7.9 3.3-14.2 7.5-16.4 12.7 18.3-4.3 38.5 7.6 45.3 20-30.8-1.7-48.3-5.6-66.2 10.6-32-8-45.4-16.1-62.4-33.8 14.1-10.1 32.3-13.3 51.9-14.6-27.8-7-52.9-21-73.3-40-8-3.2-15.5-4.8-20.8-2.7 16 9.9 21.9 32.6 17.9 46.2-20.6-23-30.2-38.1-54.31-39.3-16.97-28.3-20.72-43.5-20.22-68 17.15 2.8 32.4 13.5 47.23 26.5-14.17-23.6-22.7-51-23.77-80.2-3.39-8-7.53-14.4-12.81-16.6 4.3 18.3-7.6 38.5-20 45.3 1.7-30.8 5.6-48.3-10.6-66.2 8-32 16.1-45.4 33.8-62.4 10.16 14.1 13.35 32.5 14.61 52.2a168.64 168.64 0 0 1 39.77-73.2c3.4-8.2 5-15.8 2.8-21.2-9.9 16-32.6 21.8-46.13 17.9 23.03-20.6 38.13-30.2 39.33-54.32 26.5-15.91 41.5-20.2 63.5-20.26 1.5-.01 3 .01 4.5.04-2.8 17.31-13.7 32.65-26.9 47.64 23.7-14.31 51.1-22.93 80.4-24.06 8.2-3.41 14.7-7.6 16.9-12.96-18.3 4.31-38.5-7.53-45.3-19.99 30.8 1.71 48.3 5.62 66.2-10.57zm12.9 14.02c-5.5 0-10 4.48-10 10s4.5 10 10 10 10-4.48 10-10-4.5-10-10-10zm-146.1 24c-2.6 0-5.1.98-7.1 2.92-3.9 3.89-3.9 10.25 0 14.14 3.9 3.9 10.3 3.9 14.2 0 3.8-3.89 3.8-10.25 0-14.14-2-1.94-4.5-2.92-7.1-2.92zM420.3 144c-2.5 0-5.1 1-7.1 2.9-3.9 3.9-3.8 10.2 0 14.1 3.9 3.9 10.3 3.9 14.2 0 3.9-3.9 3.9-10.3 0-14.1-1.9-1.9-4.5-2.9-7.1-2.9zM67.72 201.9c-5.5 0-10 4.5-10 10s4.5 10 10 10 10-4.5 10-10-4.5-10-10-10zM444.3 290c-5.5 0-10 4.5-10 10s4.5 10 10 10 10-4.5 10-10-4.5-10-10-10zM91.74 347.9c-2.56 0-5.13 1-7.07 2.9-3.89 3.9-3.89 10.3 0 14.2 3.89 3.9 10.25 3.9 14.14 0 3.89-3.9 3.89-10.3 0-14.2-1.94-1.9-4.51-2.9-7.07-2.9zm266.16 62.3c-2.5 0-5 .9-7 2.9-3.9 3.9-3.9 10.3 0 14.2 3.9 3.9 10.2 3.9 14.1 0 3.9-3.9 3.9-10.3 0-14.2-2-2-4.5-2.9-7.1-2.9zm-145.9 24c-5.5 0-10 4.5-10 10s4.5 10 10 10 10-4.5 10-10-4.5-10-10-10z"}}]})(props);
};
module.exports.GiChaliceDrops = function GiChaliceDrops (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M206.47 19.5c-4.53 42.503-28.564 74.22-28.564 95.53.004 10.575 15.696 23.5 30.344 23.5 4.005 0 7.924-.994 11.47-2.686-2.032 5.148-3.804 10.014-5.19 14.625-14.796 1.954-28.22 4.893-39.655 8.655-10.928 3.596-20.086 7.868-27.125 13.344-7.04 5.474-12.5 12.918-12.5 21.905 0 1.2.096 2.357.28 3.5h-.06c0 71.244 44.097 130.45 101.936 141.97-8.37 41.925-29.252 79.813-58.344 110.092-8.084 4.503-12.75 9.735-12.75 15.344 0 16.683 41.04 30.22 91.625 30.22s91.657-13.537 91.657-30.22c0-5.672-4.772-10.962-13.03-15.5-29.02-30.266-49.46-68.122-57.627-110C336.594 328.085 380.5 268.967 380.5 197.876h-.094c.187-1.143.28-2.3.28-3.5.002-8.987-5.49-16.43-12.53-21.906-7.04-5.477-16.196-9.75-27.125-13.345-16.012-5.27-35.905-8.914-58.03-10.5-7.514-27.144-27.472-62.53-34.656-104.22-2.246 21.072-8.228 40.076-14.72 57.064-5.578-21.2-21.483-49.06-27.155-81.97zm110.81 9.438c-4.078 38.274-25.717 66.84-25.717 86.03 0 9.523 14.153 21.157 27.343 21.157 12.9 0 24.626-11.597 24.625-21.625 0-19.986-20.012-49.374-26.25-85.563zm-31.405 138.656c19.192 1.662 36.208 4.97 49.313 9.28 9.588 3.156 17.065 6.895 21.5 10.345 4.434 3.45 5.312 5.84 5.312 7.155 0 1.314-.877 3.675-5.313 7.125-4.435 3.45-11.91 7.22-21.5 10.375-19.176 6.31-46.743 10.438-77.218 10.438-30.477 0-58.075-4.128-77.25-10.438-9.59-3.155-17.066-6.925-21.5-10.375-4.436-3.45-5.282-5.81-5.282-7.125 0-1.314.846-3.706 5.28-7.156 4.436-3.45 11.913-7.19 21.5-10.345 8.754-2.88 19.266-5.3 31-7.094 2 13.153 21.07 28.064 38.938 28.064 18.173 0 34.696-16.06 35.22-30.25z"}}]})(props);
};
module.exports.GiChalkOutlineMurder = function GiChalkOutlineMurder (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M403.425 19.299L281.232 99.354l45.166 80.685-70.531 74.764-96.022 32.947-20.248 101.426-38.095 3 1.083 58.568 86.213-6.248 24.397-106.637 55.072-13.36 21.385 74.804 55.13 34.213-19.853 31.593 52.004 27.592 50.865-75.572-81.103-52.332-12.567-49.137 46.518-54.855 13.201 31.976-40.763 41.801 33.783 41.022 78.111-66.213-31.418-88.645c16.485-5.976 30.692-19.808 39.576-32.7 14.597-23.06 18.935-49.879 2.957-70.292-18.962-19.83-39.886-19.706-61.07-7.244-13.22 7.918-24.606 19.565-32.223 32.08l-15.91-25.639 66.899-45.408zm-178.12 16.584c-.37-.01-.735-.01-1.098.004-28.11 1.002-40.308 71.436-73.14 83.677-30.314 11.304-69.61-23.941-96.845-6.476-20.375 13.065-34.59 45.303-25.826 67.865 13.478 34.7 63.441 58.38 99.758 50.203 28.439-6.403 28.177-54.969 53.728-69.002 20.05-11.011 59.002 14.364 68.313-6.529 5.336-11.973-18.796-19.335-23.39-31.611-14.24-38.045 43.357-86.468-1.5-88.131zm-64.27 7.373c-17.951-.223-50.581 42.837-29.698 51.04 17.149.037 55.673-50.718 29.698-51.04zm236.369 1.508l12.387 21.312-67.307 45.686 44.123 71.1c5.973-23.32 19.118-45.365 37.666-56.91 14.959-8.169 27.974-8.762 37.826 3.122 17.114 23.72-6.151 56.46-23.598 69.092-11.466 7.922-17.522 6.155-30.341 4.799l35.7 100.728-54.706 46.373-11.916-14.47 37.77-38.73-28.995-70.223-71.627 84.468 16.62 64.983 71.613 46.209-31.567 46.9-20.576-10.916 19.18-30.521-64.608-40.092-24.224-84.744-82.694 20.062-23.91 104.512-53.99 3.914-.418-22.629 34.772-2.736 20.886-104.635 90.44-31.031 82.652-87.608c-14.476-25.855-28.95-51.712-43.424-77.568zM251.755 182.158c.505 16.04 29.413 13.718 27.041 1.24-2.017-10.614-27.317-10.017-27.04-1.24zm-49.714-4.19c-10.263.111-19.229 3.684-18.846 11.948 1.31 28.305 48.694 24.597 47.746 2.191-.368-8.698-15.706-14.28-28.9-14.138zm28.193 49.048c9.692 11.541 28.526-5.324 20.89-14.489-9.34-4.919-24.937 8.837-20.89 14.489z"}}]})(props);
};
module.exports.GiChameleonGlyph = function GiChameleonGlyph (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M339.84 22.826c-11.426-.31-12.328 45.05-22.45 39.772a191.87 191.87 0 0 0-14.56-6.83c-16.185-14.734-46.642-37.874-64.021-24.497-3.572 3.012-6.117 6.768-7.7 10.99-11.616-10.495-28.427-14.229-41.449-4.036-4.47 3.694-7.297 8.63-8.633 14.033-9.662-2.189-19.68-2.032-29.4 5.806-4.347 3.57-7.173 8.353-8.508 13.663-4.285 2.856-8.32 6.333-12.389 9.687l117.891 64.455-142.697-39.525c-.932 1.118-1.771 2.33-2.67 3.478l130.928 71.567L83.35 139.598c-.403.714-.87 1.364-1.243 2.078l137.668 75.262L67.08 174.65c-.248.621-.435 1.243-.684 1.864l135.31 73.923c26.421-21.888 62.156-24.309 85.474-30.083 36.791-9.098 51.943-16.954 51.943-16.954l116.928 19.034c35.023-38.19-66.162-198.242-116.211-199.608zm37.988 93.654a15.824 15.824 0 0 1 12.31 5.73c5.62 6.738 4.72 16.798-2.019 22.417-6.768 5.651-16.829 4.75-22.447-2.049-5.62-6.737-4.72-16.765 2.017-22.385a15.969 15.969 0 0 1 10.14-3.713zM55.967 211.068c-.249.932-.498 1.833-.715 2.733l122.64 67.033c2.328-4.098 4.472-8.135 7.266-12.389 4.564-6.954 9.936-12.418 15.617-17.261L55.967 211.068zm-6.397 37.756c-.187 1.707-.186 3.446-.31 5.123l113.2 61.88c3.013-10.153 7.453-20.742 13.663-31.95L49.57 248.824zm219.752 15.485c-28.142.391-44.547 9.23-44.547 9.23s-.23.121-.31.154c-34.637 14.406-45.39 72.114-36.078 96.002 11.053 28.358 41.303 47.732 60.855 51.975 17.773 3.857 45.333-.696 65.418-31.824 6.697-10.378 14.323-57.535-27.416-69.58-26.456-7.635-34.93 7.98-34.93 7.98s14.164-5.73 28.1 5.62c20.187 16.437 18.34 54.34-21.576 51.864-27.85-1.726-45.872-29.982-37.217-55.947 9.119-27.357 34.752-33.761 62.457-29.822 29.473 4.19 42.504 28.068 42.504 28.068l.434.807c4.937 8.166 8.134 17.201 9.687 26.422 3.229 18.473-.62 37.723-9.562 53.154 0 0-11.37 27.842-49.83 37.631-44.693 11.375-95.271-30.419-100.659-39.215-9.92-16.198-16.239-32.165-18.318-48.838L53.482 328.96c1.18 5.59 2.857 11.052 4.442 16.548l89.82 49.088-80.32-22.262c12.201 28.72 30.365 55.42 56.166 77.713 0 0 60.818 48.07 155.93 37.652 76.495-8.38 105.011-74.86 96.832-139.273 0 0 .047-60.048-61.815-77.793-17.205-4.935-32.423-6.503-45.215-6.324zm-220.59 23.79c.125 3.074.125 6.117.373 9.16l109.196 59.675c-1.367-12.016-.311-24.466 3.166-37.6L48.732 288.1z"}}]})(props);
};
module.exports.GiChampagneCork = function GiChampagneCork (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M255.4 23.36c4.3 9.66 13.2 22.08 25.9 34.75 18 17.99 42.6 36.94 68.5 53.39 25.9 16.5 53 30.6 75.6 39.2 11.3 4.2 21.6 7.1 29.7 8.3 3.4.5 6.4.7 8.9.6-22.2-33.8-56.4-66.36-94.5-91.13-37.3-24.25-78.1-40.9-114.1-45.11zm-18.1 4.13c-41.7 28.17-56 76.31-65.5 124.01 8.1 17.3 35.4 46.3 71.3 72.1 36.6 26.3 81.9 50.1 123.5 60.3 34.5-8.8 56.1-26.4 71.3-48.1 12.4-17.6 20.4-38 26.7-58.1-3.9.1-8-.3-12.2-.9-10-1.4-21.2-4.7-33.4-9.3-22.6-8.6-48.2-21.8-73.3-37.3l-52.5 48.1 24.4-66.8c-18.3-13.05-35.2-26.88-49-40.67-14.7-14.63-26.3-28.9-31.3-43.34zM184 197.5L48.21 359l-.22.3c-.5.5-.63.6-.63 1.7s.28 3.2 1.45 6c2.35 5.6 7.92 13.6 15.85 22.2.57.6 1.18 1.3 1.78 1.9l27.01-22.9-19.34 30.6c15.51 15 36.19 31.3 57.99 45.7 21.1 14 43.4 26.3 62.6 34.3l37.8-71.3-12.1 79.6c6 1.3 11.2 1.7 14.9 1.4 6-.6 7.6-1.8 8.9-5.1l.1-.2 87.2-191.3c-8.4-3.1-16.9-6.6-25.3-10.5L278.9 308l11.8-34.1c-20.6-10.6-40.3-22.9-58.1-35.7-18.7-13.4-35.3-27.2-48.6-40.7z"}}]})(props);
};
module.exports.GiChampions = function GiChampions (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M256 33c-25 0-47.7 2.03-63.6 5.15-6.2 1.23-11 2.65-14.7 4.01 3.7 1.36 8.5 2.78 14.7 4.01 15.9 3.12 38.6 5.15 63.6 5.15s47.7-2.03 63.6-5.15c6.2-1.23 11-2.65 14.7-4.01-3.7-1.36-8.5-2.78-14.7-4.01C303.7 35.03 281 33 256 33zm-100.8 5.31c-19.1 8.9-29.4 26.02-26.8 43.08 2 12.32 10.9 23.51 25 29.31 8.1 3.4 17.9 5.2 29.4 5.1 13.3 24.7 31.3 45.1 50.6 54.6v43.9c-17 10.3-28.3 31.7-39.4 53.7 38.8 9.9 85.3 9.4 123.9-.1-11-22-22.4-43.3-39.3-53.6v-43.9c19.3-9.5 37.3-29.9 50.6-54.6 11.5.1 21.3-1.7 29.4-5.1 14.1-5.8 23-16.99 25-29.31 2.6-17.06-7.7-34.18-26.8-43.08.4 1.2.6 2.48.6 3.85 0 4.35-2.3 7.91-4.7 10.15-2.3 2.24-4.9 3.73-7.8 5.08-5.8 2.7-13.1 4.72-21.9 6.44-17.5 3.46-41 5.49-67 5.49s-49.5-2.03-67-5.49c-8.8-1.72-16.1-3.74-21.9-6.44-2.9-1.35-5.5-2.84-7.8-5.08-2.4-2.24-4.7-5.8-4.7-10.15 0-1.37.2-2.65.6-3.85zm6.6 16.31c2.3 14.34 6.5 28.91 12.3 42.74-5.6-.55-10.1-1.71-13.8-3.24-9.4-3.9-13.2-9.63-14.1-15.51-1.2-7.93 3.3-18.15 15.6-23.99zm188.4 0c12.3 5.84 16.8 16.06 15.6 23.99-.9 5.88-4.7 11.61-14.1 15.51-3.7 1.53-8.2 2.69-13.8 3.24 5.8-13.83 10-28.4 12.3-42.74zm70.7 219.58c-10.2.2-20.1 5.2-28.7 14.2-9.6 10.3-17 25.8-18.9 43.7-1.9 17.9 1.9 34.6 9.1 46.7 7.3 12.2 17.6 19.6 29.3 20.8 11.8 1.3 23.4-3.7 33.1-14 9.7-10.3 17-25.8 19-43.7 1.9-17.9-1.9-34.6-9.1-46.7-7.4-12.2-17.6-19.6-29.4-20.8-1.5-.2-2.9-.2-4.4-.2zm-329.8 0c-1.5 0-3 0-4.4.2-11.8 1.3-22 8.8-29.3 20.8-7.3 12.2-11.1 28.9-9.1 46.8 1.9 17.9 9.2 33.4 18.9 43.7 9.7 10.2 21.3 15.3 33.1 14 11.8-1.3 22-8.7 29.3-20.8 7.3-12.2 11.1-28.9 9.1-46.8-1.9-17.9-9.2-33.4-19-43.7-8.4-8.9-18.4-13.9-28.6-14.2zM309 288.3c-10.8 2.1-21.9 3.6-33.2 4.4 13.5 43.8 37.4 83.5 63.8 122.1 5.6-8.2 11.8-14.7 18.6-19.9 3-2.3 6.1-4.3 9.2-6l.1-.1c-.2-.3-.3-.5-.5-.8-3.9-6.5-6.9-13.8-9-21.7-17.9-22.1-35.9-45.6-49-78zm-106.1.2c-13.1 32.2-31 55.7-48.8 77.7-2.1 7.9-5.2 15.3-9.1 21.9-.1.2-.3.5-.5.7l.1.1c3.1 1.7 6.2 3.7 9.2 6 6.8 5.2 13 11.7 18.6 19.9 26.4-38.5 50.2-78.2 63.8-122-11.3-.8-22.5-2.2-33.3-4.3zm250.7 113.6c-12.3 10.9-27.6 17.2-43.8 15.4-11.7-1.2-22.2-6.5-30.7-14.4-3.5 1.7-6.8 3.7-9.9 6.1-15.2 11.6-28.5 41.8-38.1 85.8H487v-59.8c-2.2-2.8-9-11.5-19.3-21.4-4.4-4.3-9.3-8.3-14.1-11.7zm-395.2.1c-4.8 3.3-9.7 7.3-14.1 11.6-10.3 9.9-17.1 18.6-19.3 21.4V495h155.9c-9.6-44-22.9-74.2-38.1-85.8-3.1-2.4-6.4-4.4-9.9-6.1-8.5 7.9-18.9 13.2-30.7 14.5-16.1 1.8-31.6-4.5-43.8-15.4z"}}]})(props);
};
module.exports.GiChanterelles = function GiChanterelles (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M198.5 62.04c-16.7 0-34.1.48-53.4.63 16.6 9.6 37.8 20.63 59.8 30.78 36 16.85 73.5 31.75 88.5 35.45 4 .9 18.3 2.5 36.4 3.4 18 1 40.5 1.5 63.6 1.4 38.2-.2 78.8-2.7 103-7.4-15.9-18.8-30.9-31.95-52.1-39.18-25.1-8.61-60.4-9.63-117.1-.77l-2.6.41-2.5-1.08c-45.6-20.3-81.9-23.64-123.6-23.64zm-5.7 45.76c35.9 40.5 66.2 81.5 88.1 123.8 32.9 63.6 46.6 130.7 31.2 202.6 6 9.1 12.1 13.8 18.3 15.3 6.6 1.5 14.6-.2 25-6.7 31.5-43.2 27.4-105.4 31-166.3 1.9-30.7 5.9-61.1 19.2-88 6.7-13.7 15.9-26.4 28.2-37.6-9.2.3-18.5.5-27.9.7-21.3 27-35.3 68.1-34.7 105.9-20.8-33.3 0-77.1 15.6-105.8-19.4 0-38-.4-53.9-1.2 5.6 23.9 7.2 56.3 7.6 72.8-15.7-6.8-15.3-46.7-25.5-73.8-11.4-.9-20.1-1.8-25.8-3.2-7.9-1.9-19-5.7-31.9-10.7 30.6 40.6 73.7 106.8 57.8 126-14.9-44.2-51.2-96-92.1-140.1-8.4-3.7-17.1-7.6-25.7-11.6zm-80.9 81.7c-38.51 4.3-69.01 22.1-96.28 37 16.53 3.7 34.99 8.1 53.13 11.7 28.43 5.6 55.95 7.5 66.05 3.1 32.1-14.2 65.2-23.4 88.3-36.9-32.8-6-72.4-14.4-111.2-14.9zm83.6 47.9c-8 3-16.2 5.9-24.3 8.9-4 14.5-8.6 54-11.8 54.8-3.3.8-11.5-36.8-9-46.9-2.8 1.1-5.6 2.3-8.4 3.5-9.8 4.4-21.7 5.3-34.9 4.5 7 12.5 24.3 38.4 24.9 61 0 0-34.02-47.3-56.5-65.4-3.38-.6-6.8-1.2-10.24-1.9-9.46-1.9-18.89-4-28.13-6.1C75.45 271 102.1 300.1 119.8 330c24 40.7 32.1 82.6 32.8 111 9.6 2.4 17.6 2.8 23.8 1.4 6.3-1.4 11.1-4.3 15.3-9.3-5.8-29.7-15.5-69.1-15.9-109.7-.2-29.2 4.6-59.2 19.7-86z"}}]})(props);
};
module.exports.GiCharacter = function GiCharacter (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M255 45.4c-24.5 0-47 11.8-63.9 33.4-16.9 21.5-27.1 52.6-27.1 86.5 0 36 12.1 67.5 31 89.5l13.5 15-19.6 4.6c-52.3 11.9-77.4 36.9-91.75 75.2-13.7 35.7-15.6 84.8-16.1 143.3H431c-.2-58.7-.5-109.3-13-145.5-13.4-39.4-37.9-64.3-94-75.4l-19.9-3.7 12.9-15.7c17.7-21.9 28.8-52.6 28.8-87.5 0-33.9-10.3-64.9-27.2-86.3-16.8-21.7-39.3-33.6-63.6-33.4z"}}]})(props);
};
module.exports.GiCharcuterie = function GiCharcuterie (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"m429.7 55.3-42.8 64.8 4.9 16.9c33.7-25.9 41.1-58.8 41.7-80.6-.8-2.44-2.2-2.48-3.8-1.1zm-51.8 78.5-86.3 130.7c9.9-2.6 20.7-5 31.8-6.5l66.6-81.8c-4-14.1-8.1-28.3-12.1-42.4zM249 202.2c-24.1.1-51.3 4.4-76.4 17.8l4.6 20.5 51.2 18.6-1.1 20.7c5.9.5 12.1.8 18.4.8 4.7-2.1 14.4-6.2 27.2-10.4l39.3-59.6c-12.3-3.3-35.8-8.6-63.2-8.4zm46.9 16.7c-48.4 18.2-102.1 4.2-102.1 4.2 33.3-9.9 67.3-13.5 102.1-4.2zm65 30.4c-7.4 8.1-12.8 16.7-15.8 24.5.9-.4 1.9-.8 2.9-1.3 16.3-7 32.5-9.2 44.1-7.2l1.2.3c6.5-8.8 10.6-17.7 11.8-25.2 2.9-31.4-38.8 3.2-44.2 8.9zm-218.1-8c-6.2.4-35 3.5-53.04 21.4l3.01 13.9 36.23-8.8c2.3-.6 4.8.2 6.3 2.1l11.5 14.2 24.1-5.9c2.3-.5 4.8.3 6.3 2.2l10.9 13.5c15.4-3.2 0 0 26.3-5.4l1-20.8zm273.2 7.3c-2 6.9-5.8 14.5-11 22 2.8 2.1 4.8 4.7 6.1 7.6 1.9 4.4 2 9.5.2 14.8 2.8-1.7 5.6-3.6 8.3-5.7 11.9-9 20.5-19.7 23.8-29 5.9-20.9-17.3-14-27.4-9.7zm-82.5 20.6c-33.4 3.2-64.7 15.1-78.3 20.9l3.2 4.2 68.2-9.3c1.1-.9 2.3-1.8 3.5-2.6.6-4.6 2-9.5 3.4-13.2zm48.5 7.9c-8.6.1-18.7 2.5-29.1 6.9-13.7 5.9-24.6 14.3-30 22.5-2.5 3.9-4 7.7-2.6 10.8 1.4 3.2 5.1 4.7 9.7 5.6 9.7 1.7 23.2-.5 36.9-6.4 13.8-5.9 24.7-14.3 30-22.5 2.6-3.9 4.1-7.7 2.7-10.8-1.4-3.2-5.1-4.7-9.7-5.6-2.4-.4-5.1-.6-7.9-.5zm-253.9 3.7L82.28 292l29.62 36.9 14.1-4.2-17.7-22c-2.4-4-.8-8.9 3.4-10l21.6-5.3zm326.5.9c-55.7 57.4-118.7 54.2-118.7 54.2-2.9 0-5.6-.3-8.1-.7-9.5-1.7-16.2-6.4-19-12.9-2.8-6.5-1.6-14.6 3.7-22.7l.1-.1-56.2 7.6c-6-.2-8.2-5.6-11.6-10.1-7.5 0-14.8-.4-21.5-1l32.1 39.9c2.5 3.9.9 8.6-3.1 9.9l-57 17.3c-2.4.7-5.1-.1-6.7-2.1l-12.3-15.3-22.9 6.9c-2.4.7-5.1-.1-6.7-2.1l-12.3-15.3-22.9 6.9c-2.5.7-5.1-.1-6.7-2.1l-23.32-29-44.12 12.3c-10.86 3.4-8.18 17.7.96 20.3L80.14 354c29.36 9-27.27 10-44.59 23.7-7.53 13.3 2.71 26.7 11.65 30.3 49.15 19 88.5-42.5 148.2-25.1 8.6 1.9 46 11.3 62.8 15.5 6.5 1.6 13.3 1 19.4-1.7 36.7-16.3 169.7-75.3 201.2-89.3 9.9-4 13.4-20.2 1.2-22.2zM170 291.3l-45.8 11.2 29.6 36.9 14.1-4.3-17.7-21.9c-2.4-4-.8-8.9 3.4-10l21.7-5.3zm41.9 10.5L166.1 313l29.6 36.9 44.1-13.4z"}}]})(props);
};
module.exports.GiChargedArrow = function GiChargedArrow (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M19.83 19.6v14.8L279.6 310.8l20.5-11.4 9.4-16.9L42.87 19.6zm140.87 0l25.2 53.3-16.2 4-51-37 43.4 62 34-7.3 26.2 55.5 75.3-43.4c17.6 26.7 32 48.1 46.2 72.7l-21.9 14-69.6-26.1 71.6 57c32-25.5-.1-.1 32-25.7l83.5 240.1C362 415.1 277.1 389.8 207.6 365c-20.9-13.7-43.2-31.7-60.6-50.4l43.7-18.1L109.5 168l-24.08 49.3-65.59-92.5v32.3l68.54 96.6 23.23-47.4 51.4 81.4-46.9 19.4c38.6 46.2 90 85.7 137.7 112.2l-137.9-2 15.6-39.6-66.44-33 7.19-30.1 46.55-41.9L69.04 292l-49.21-58.6v29.1l35.54 42.3-11.93 50 64.36 32c-5.8 19.5-15 36.6-25.49 53.7l-44.54-20.9 43.13 56.7 30.2-40.4 130.4 1.9-48.7 17.8 144.7 1.7c56.5 21.1 112.5 33.4 154.7 35.1-1.2-30.4-7.9-68-19.4-107.7l11.4-153.5-22.5 31.3-6.7-161.6 32.1-18.1L470.5 27l-7.2 43.6c-22.9 12.9-44.7 25.27-67.7 38l-49.3-89h-21.4L388.3 134l48.3-26.7 3.2 78.1-16.9-.4-4.2-49-18.2 59.5 40.4 16.4 3.9 94.8c-37.2-78.9-87.9-144.4-131.1-209.5l2.2-47.2-73.6-11 53.3 28-4.9 22.1-60.1 34.7-49.2-104.2zM352 244.2l-38.1 69-68.9 38.1 164.1 57.1z"}}]})(props);
};
module.exports.GiChargingBull = function GiChargingBull (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M151.22 61.008c-45.151 7.449-99.44 35.085-131.642 54.097V297.21c5.34 7.523 13.07 12.906 24.904 17.07 5.308 1.868 11.417 3.433 18.221 4.783-21.112-27.026-26.391-50.921-21.297-79.236l17.715 3.192c-6.724 34.584 13.695 64.344 34.152 77.013l7.15 4.37 2.407 3.814c9.482 17.063 28.034 25.752 51.426 41.152l9.723 6.403-8.645 7.798c-9.834 8.873-17.062 16.44-18.367 26.559l-1.592 12.342-24.098-11.545c-11.192 12.316-20.47 25.593-27.652 40.025 10.977 6.704 36.525 19.136 49.105 16.346 32.21-21.813 59.517-67.5 71.09-97.953-6.484-24.65-21.778-46.56-40.277-70.047l-4.1-5.205c4.853-7.592 11.429-14.973 18.084-19.31 26.259-20.873 35.437-38.189 37.44-53.362.675-21.155-6.159-35.841-14.106-53.04l16.34-7.55c9.207 20.935 17.712 44.638 15.611 62.947-1.68 12.732-7.198 25.876-17.857 39.399 9.34-1.382 16.555-2.574 25.883-4.121l.262 10.343c.44 17.375 1.668 24.569 15.748 49.57l1.554 2.763-8.457 51.103c7.432 10.524 20.33 11.513 30.994 10.781 25.144-26.855 42.492-57.16 57.1-89.058-8.896-1.83-15.986-6.023-20.451-11.895-5.026-6.609-6.408-14.801-5.057-22.137 2.702-14.67 16.832-27.65 34.66-25.044l-.304-.04c4.278.478 8.63.829 13.035 1.09-42.222-45.878-38.747-104.57-74.713-138.82-37.98-22.166-89.34-36.372-133.988-36.701zm299.657 133.017c-25.974 8.19-52.938 16.89-80.334 23.028a3126.23 3126.23 0 0 1 8.764 18.293c29.023-10.805 51.564-25.555 71.57-41.32zm19.978 55.053c-40.912 3.884-85.203 8.795-125.962 4.25l-.153-.017-.152-.022c-8.297-1.213-13.24 4.437-14.356 10.494-.557 3.029-.034 5.724 1.684 7.983 1.688 2.22 4.886 4.52 11.58 5.46 52.566 1.922 92.792-11.677 127.36-28.148zm-163.32 43.738c4.068-.076 9.831 6.07 9.94 9.87.123 4.33-4.278 13.351-12.106 22.978-2.335-8.081-8.27-32.478 2.166-32.848zm-13.96 64.67l-19.882 19.58s-2.011-12.095 1.621-16.068c6.037-2.969 12.016-3.867 18.26-3.512zm-44.636 38.348l-11.55 35.494s-12.831-12.815-20.018-10.535c-12.026 3.815-17.207 33.71-17.207 33.71l-23.176-9.13s3.691 28.627 14.748 34.416c15.559 8.145 51.621-10.535 51.621-10.535s1.372 21.203 9.483 23.176c15.088 3.669 35.467-30.2 35.467-30.2s36.32 34.765 51.972 23.88c14.938-10.39 2.14-52.38-4.103-54.432-7.744-2.546-16.676 17.888-16.676 17.888s-10.826-24.025-22.063-27.017c-9.81-2.613-28.445 10.885-28.445 10.885l5.393-31.528c-3.305-.031-6.567-.272-9.77-.781l-10.37 29.932 4.347-31.245c-3.373-.936-6.912-2.436-9.653-3.978zM84.4 398.047c-11.613 11.065-20.069 23.628-27.237 37.137 3.725 1.954 7.425 4.1 11.086 6.3 7.066-13.88 15.86-26.738 26.148-38.648z"}}]})(props);
};
module.exports.GiCharging = function GiCharging (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M322 25l-10 30h103l-10-30h-83zM66.5 32v55h-23v18h128V87h-23V32h-18v55h-46V32h-18zm210 41v302h174V73h-174zm-208 48v51.3L95.23 199h24.57l26.7-26.7V121h-78zm222 62h146v50h-146v-50zm-192 34v167c0 31.4 18.6 55.7 44.5 70.8 25.8 15.1 59.2 22.2 92.5 22.2s66.7-7.1 92.5-22.2c23.4-13.6 40.8-34.7 44-61.8h-18.1c-2.9 20-15.6 34.9-34.9 46.2-22.2 12.9-52.8 19.8-83.5 19.8-30.7 0-61.3-6.9-83.5-19.8-22.1-12.9-35.5-30.6-35.5-55.2V217h-18zm192 30h146v50h-146v-50zm0 64h146v50h-146v-50z"}}]})(props);
};
module.exports.GiChariot = function GiChariot (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M209.986 51.92a40 56 0 0 0-40 56 40 56 0 0 0 13.477 41.846c-40.456 21.169-48.044 96.905-54.803 163.783a97.018 97.018 0 0 1 8.346 2.303c4.57.595 9.395 1.16 14.361 1.623 11.195 1.041 22.845 1.545 32.246.847 9.401-.698 16.27-3.332 17.58-4.638 9.87-9.83 18.914-29.808 27.893-47.692.696-1.387 1.401-2.735 2.103-4.094 2.05-16.533 3.63-34.34 3.176-51.252 7.972 4.436 16.409 8.223 25.303 11.368l77.64-52.202-1.511-2.505.389-.293c-.241-.086-.483-.176-.723-.262l-11.192-18.559-64.76 46.616c-12.723-12.713-18.757-24.97-34.222-35.202a40 56 0 0 0 24.697-51.687 40 56 0 0 0-40-56zm144.368 121.422l-15.403 11.635c52.51 18.497 105.418 33.336 157.049 26.587v-16.166c-44.88 6.349-92.64-5.42-141.646-22.056zm-88.721 72.037c-2.56 0-5.571 1.632-9.602 6.572-4.03 4.94-8.317 12.597-12.646 21.22-8.66 17.248-17.252 38.258-30.9 51.85-7.004 6.975-16.79 8.45-27.688 9.258-4.578.34-9.41.422-14.334.334 20.851 17.856 34.086 44.308 34.086 73.787 0 15.963-3.88 31.039-10.748 44.342 11.545 2.497 24.625 3.756 38.465 3.637 26.28-.226 55.001-5.286 80.826-14.19.754-9.259 1.377-18.149 1.873-26.687l-90.815 6.928 35.28-43.33 2.146-2.637 54.838-4.588c.187-36.819-2.743-64.755-8.377-84.555-4.502-15.82-10.602-26.34-17.535-32.744-6.933-6.403-14.728-9.197-24.87-9.197zm-158.746 81.728c-19.7 0-37.733 6.9-51.815 18.4l42.285 42.114a22.677 22.677 0 0 1 9.53-2.101c2.502 0 4.915.414 7.18 1.17l37.335-46.48c-12.794-8.279-28.069-13.103-44.515-13.103zm57.035 23.069l-37.367 46.515a22.568 22.568 0 0 1 3.277 11.71c0 3.373-.754 6.582-2.094 9.476l42.305 42.13c11.57-14.026 18.506-31.992 18.506-51.607 0-22.859-9.43-43.47-24.627-58.224zM43.73 356.793C32.162 370.82 25.227 388.786 25.227 408.4c0 22.86 9.428 43.472 24.627 58.227L87.22 420.11a22.578 22.578 0 0 1-3.278-11.71c0-3.374.755-6.582 2.094-9.475L43.73 356.793zM496 372.908L269.69 391.84l-9.612 11.805L496 385.646v-12.738zM116.418 429.18a22.674 22.674 0 0 1-9.531 2.103 22.65 22.65 0 0 1-7.18-1.17L62.373 476.59c12.794 8.28 28.068 13.103 44.514 13.103 19.7 0 37.734-6.898 51.816-18.4l-42.285-42.113z"}}]})(props);
};
module.exports.GiCharm = function GiCharm (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M146.47 21.594c-19.843.39-40.255 13.992-46.94 38.937-36.28-36.277-90.65-8.066-79 41.595 11.826 50.403 99.55 64.537 114.25 90 0-32.133 66.5-82.522 54.19-135.125-5.728-24.468-23.862-35.773-42.5-35.406zM237 154.47c-35.243.73-68.834 22.932-79.688 69.31C133.202 326.807 263.438 425.5 263.438 488.44c28.8-49.877 200.592-77.563 223.75-176.282 22.82-97.274-83.624-152.5-154.687-81.437-13.49-50.343-55.558-77.08-95.5-76.25z"}}]})(props);
};
module.exports.GiChart = function GiChart (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M23 23v466h466v-18H41v-82.184l85.854-57.234 70.023 70.022 65.133-260.536L387.28 203.7 455.07 95.73l19.317 11.858 6.102-71.1-60.644 37.616 19.884 12.207-59.01 93.99-130.732-65.366-62.865 251.462-57.98-57.978L41 367.184V23H23z"}}]})(props);
};
module.exports.GiChatBubble = function GiChatBubble (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M229.7 22.66A155.2 235.6 80.24 0 0 23.81 215.6 155.2 235.6 80.24 0 0 236.7 333.4c23.8 55.6-17.1 109.3-83.6 161.1 86.2-28.3 176.2-94.4 179.7-178.7a155.2 235.6 80.24 0 0 155.4-180.1A155.2 235.6 80.24 0 0 229.7 22.66z"}}]})(props);
};
module.exports.GiCheckMark = function GiCheckMark (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M17.47 250.9C88.82 328.1 158 397.6 224.5 485.5c72.3-143.8 146.3-288.1 268.4-444.37L460 26.06C356.9 135.4 276.8 238.9 207.2 361.9c-48.4-43.6-126.62-105.3-174.38-137z"}}]})(props);
};
module.exports.GiCheckboxTree = function GiCheckboxTree (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M249.28 106.28V250h-77.186v-56.25H22.47V319.406h149.624v-50.719h77.187v148.407h18.69V357.22h71.686v50.718H489.28V282.28H339.657v56.251H267.97V189.407h71.686v50.72H489.28V114.47H339.657V170.718H267.97v-64.44h-18.69zm109.064 26.876h112.25v88.28h-112.25v-88.28zm-317.188 79.28h112.25v88.283H41.156v-88.283zm317.188 88.533h112.25v88.28h-112.25v-88.28z"}}]})(props);
};
module.exports.GiCheckedShield = function GiCheckedShield (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M48.906 19.656v10.782c0 103.173 10.53 206.07 41.313 289.53 30.78 83.463 82.763 148.094 164.53 170.563l2.188.626 2.25-.5c89.686-19.12 142.322-84.028 171.187-168.344 28.865-84.315 35.406-188.656 35.406-291.875v-10.78l-10.655 1.53C323.26 39.954 191.452 40 59.595 21.188l-10.69-1.53zM67.75 41.03c63.242 8.536 126.495 12.792 189.75 12.782v184.532h174.78c-4.905 27.572-11.31 53.747-19.592 77.937-27.348 79.884-73.757 137.33-155.157 155.564-.008-.003-.02.003-.03 0v-233.5H86.53c-12.87-60.99-18.277-128.81-18.78-197.313z"}}]})(props);
};
module.exports.GiCheckeredDiamond = function GiCheckeredDiamond (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M362.04 15.275l-21.56 71.582c-3.005 1.19-5.892 2.606-8.628 4.252l-61.207-69.18L64.457 196.37l83.205 296.763h19.41L87.302 208.62l.733.278L269.5 49.18l.084.095.004-.336 47.984 54.234c-4.402 5.114-7.938 10.99-10.38 17.412l-38.678 11.65.748-57.95-161.487 142.136 1.094.416-.25.074 80.962 276.22h19.475l-78.57-268.052 135.753 51.746-29.303 216.307h62.276L405.318 234.5l-36.058 10.932 14.967-49.69c3.656-1.494 7.13-3.34 10.375-5.508L427.75 227.7l-1.545.468 1.637.672-108.43 264.293h20.31L451.745 226.62l-43.453-49.112c3.133-4.01 5.77-8.426 7.785-13.174l73.024-21.996-72.198-21.746c-5.852-15.404-18-27.693-33.304-33.742l-21.56-71.575zm73.343 25.903c-13.13 0-23.774 10.644-23.774 23.773 0 13.13 10.642 23.775 23.773 23.775 13.13 0 23.773-10.645 23.773-23.774 0-13.13-10.643-23.772-23.773-23.772zM268.253 152.36l39.768 11.98c6.038 14.21 17.523 25.54 31.83 31.394l16.177 53.707-89.377 27.095 1.604-124.174z"}}]})(props);
};
module.exports.GiCheckeredFlag = function GiCheckeredFlag (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M375.7 20.11l-15.6 3.53c5.5 24.18 10.9 48.4 16.4 72.61-12.4-1.91-22.7-3.61-34-5.36l6.5 28.91c12.4 1.6 22.6 3.6 34 5.3l7.6 33.6c9.4 41.6 18.9 83.3 28.3 124.9-12.4-1.9-22.6-3.7-34-5.4l6.5 28.8c12.3 2.1 22.7 3.4 34 5.4 13.6 59.8 27 119.7 40.6 179.5l15.6-3.7c-37.4-162.5-73.8-328.9-105.9-468.09zM391.4 307c-12.9-1.9-23.9-3.4-33.7-4l7.4 32.9h.4c12.2 1.3 22.5 3.1 33.5 4.7zm-33.7-4l-6.7-29.5c-14.4-1.5-24.2-1.5-32.7.3l7 31.3c10.4-2.4 20.6-2.9 32.4-2.1zm-32.4 2.1c-10.3 2.4-19.7 6.3-30.1 12l7.4 32.7c9.8-5.2 20.1-11.2 29.8-13.4zm-30.1 12l-6.6-29.5c-7.8 4.8-17.2 11.1-28.6 18.8l6.5 28.9c10.8-7.4 20.2-13.4 28.7-18.2zm-28.7 18.2c-10.3 7-18.9 13-28.4 19.5l7.6 33.2c10-7.2 18.8-13.1 28.3-19.6zm-28.4 19.5l-6.5-28.9c-10.8 7.4-20.1 13.4-28.7 18.2l6.7 29.5c7.8-4.8 17.2-11.1 28.5-18.8zm-28.5 18.8c-12.3 7.5-21.2 11.7-29.7 13.7l7 31.2c10.4-2.4 19.8-6.4 30.1-12.1zm-29.7 13.7l-7.1-31.2c-10.3 2.3-20.5 2.8-32.3 2.1l6.7 29.5c14.3 1.5 24.1 1.5 32.7-.4zm-32.7.4c-9.1-.9-20.3-2.6-33.9-4.7l7.6 33.6s16 2.9 33.7 4zm-33.9-4.7l-6.5-28.8c-12.35-2-22.71-3.4-34.02-5.4l6.53 28.8c12.36 1.8 22.69 3.8 33.99 5.4zm-6.5-28.8c12.9 1.9 23.9 3.4 33.7 4l-7.5-32.9c-9.1-1-20.2-2.6-33.8-4.7zm-7.6-33.6l-6.52-28.9c-12.39-1.8-22.66-3.7-34.02-5.3l6.52 28.8c12.35 2 22.71 3.4 34.02 5.4zm-6.52-28.9c12.82 2 23.92 3.5 33.72 4.1l-7.5-32.9c-9.1-1-20.19-2.6-33.82-4.7zm-7.6-33.6l-6.52-28.9c-12.38-1.8-22.66-3.6-34.02-5.2l6.52 28.8c12.38 1.9 22.64 3.7 34.02 5.3zm-6.52-28.9c12.89 2 23.94 3.5 33.74 4.1l-7.5-33c-9.07-.9-20.22-2.5-33.84-4.7zm-7.6-33.6l-6.52-28.8c-12.33-2.1-22.71-3.3-34.02-5.3l6.52 28.9c12.36 1.9 22.66 3.6 34.02 5.2zm-6.52-28.8c12.89 2 23.93 3.5 33.72 4l-7.45-32.9c-11.72-2.1-24.9-3.3-33.87-4.7zm33.72 4l6.64 29.5c14.4 1.6 24.2 1.5 32.7-.4l-7-31.2c-10.4 2.4-20.6 2.9-32.34 2.1zm32.24-2.1c10.4-2.3 19.8-6.3 30.2-12l-7.5-32.9c-12.3 7.5-21.2 11.7-29.7 13.7zm-7-31.2c-.1 0-.1 0 0 0zm37.2 19.2l6.6 29.5c7.8-4.8 17.2-11 28.6-18.8l-6.6-28.8c-10.7 7.3-20.1 13.4-28.6 18.1zm28.6-18.1c10.3-7 18.9-13.1 28.5-19.4l-7.6-33.66c-10.4 7.05-19 13.01-28.5 19.56zm28.5-19.4l6.5 28.7c10.8-7.3 20.1-13.4 28.7-18.1l-6.7-29.5c-7.8 4.8-17.2 11.1-28.5 18.9zm28.5-18.9c12.3-7.55 21.2-11.74 29.7-13.68l-7-31.2c-11.1 3-21.8 7.36-30.1 11.95zm29.7-13.68l7.1 31.28c10.3-2.4 20.5-2.9 32.3-2.2l-6.7-29.53c-14.3-1.51-24.1-1.48-32.7.45zm32.7-.45c9.1.97 20.3 2.59 33.9 4.72l-7.6-33.59s-16.1-2.91-33.7-4.03zm6.7 29.53l7.4 32.8c9.2 1 20.3 2.6 33.9 4.8l-7.6-33.5c-12.9-2-23.9-3.5-33.7-4.1zm41.3 37.6l6.5 28.8c12.4 1.9 22.7 3.7 34.1 5.3l-6.6-28.8c-12.4-1.9-22.7-3.7-34-5.3zm6.5 28.8c-12.8-2-23.9-3.5-33.7-4l7.5 33c9.1.9 20.2 2.5 33.8 4.6zm7.6 33.6l6.6 28.9c12.4 2 22.7 3.4 34 5.3l-6.5-28.9c-12.4-1.8-22.7-3.7-34.1-5.3zm6.6 28.9c-12.9-2-24-3.5-33.8-4l7.5 32.9c9.1.8 20.2 2.6 33.9 4.7zm-33.8-4l-6.6-29.5c-14.4-1.6-24.2-1.5-32.7.4l7 31.1c10.3-2.3 20.6-2.8 32.3-2zm-32.3 2c-10.3 2.5-19.8 6.4-30.1 12l7.5 33c12.3-7.5 21.1-11.8 29.7-13.8zm-30.1 12l-6.7-29.5c-7.8 4.9-17.1 11-28.5 18.9l6.5 28.8c10.8-7.3 20.1-13.5 28.7-18.2zm-28.7 18.2c-10.5 6.9-18.7 13.2-28.4 19.5l7.6 33.6c10.4-7 19-13 28.4-19.5zM224 292.2l-6.5-28.8c-10.8 7.3-20.1 13.4-28.7 18.2l6.7 29.5c7.8-4.8 17.1-11.1 28.5-18.9zm-28.5 18.9c-12.3 7.5-21.2 11.7-29.7 13.6l7 31.4c10.3-2.4 19.8-6.4 30.1-12zm-29.7 13.6l-7.1-31.1c-10.3 2.3-20.5 2.8-32.2 2.1l6.5 29.5c14.4 1.5 24.2 1.5 32.8-.5zm-7.1-31.1c10.3-2.4 19.8-6.2 30.1-11.9l-7.4-33.1c-12.3 7.7-21.2 11.9-29.8 13.7zm-7.1-31.3l-7-31.2c-10.3 2.4-20.5 3-32.2 2.2l6.6 29.5c14.3 1.5 24.1 1.5 32.6-.5zm-7-31.2c10.3-2.3 19.7-6.3 30.1-12l-7.5-32.9c-12.3 7.6-21.1 11.9-29.7 13.7zm30.1-12l6.7 29.5c7.8-4.6 17.1-11 28.5-18.8l-6.5-28.8c-10.8 7.3-20.1 13.4-28.7 18.1zm28.7-18c10.2-7.2 18.9-13 28.4-19.5l-7.6-33.7c-10.3 7.2-19 13.1-28.4 19.6zm28.4-19.5l6.5 28.8c10.8-7.3 20.1-13.4 28.7-18.1l-6.7-29.5c-7.8 4.7-17.1 11-28.5 18.8zm28.5-18.9c12.3-7.6 21.2-11.8 29.7-13.6l-7-31.2c-10.3 2.2-19.8 6.1-30.1 11.8zm29.7-13.6l7.1 31.1c10.3-2.3 20.5-2.9 32.3-2.1l-6.7-29.5c-14.3-1.6-24.1-1.5-32.7.5zm7.1 31.1c-10.3 2.4-19.8 6.4-30.1 12l7.4 32.9c12.3-7.5 21.2-11.8 29.8-13.6zm-58.8 30.1c-10.3 7.1-19 13-28.4 19.5l7.6 33.7c10.3-7.2 18.9-13 28.4-19.5z"}}]})(props);
};
module.exports.GiChecklist = function GiChecklist (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M122.31 84.615l-2.85 8.54-11.394 34.185-5.703-5.703L96 115.27 83.27 128l6.367 6.363 26.297 26.297 20.605-61.814 2.845-8.537-17.076-5.695zM151 119v18h242v-18H151zm0 64v18h242v-18H151zm0 64v18h242v-18H151zm-28.69 29.615l-2.85 8.54-11.394 34.185-5.703-5.703L96 307.27 83.27 320l6.367 6.363 26.297 26.297 20.605-61.814 2.845-8.537-17.076-5.695zM151 311v18h242v-18H151zm0 64v18h242v-18H151z"}}]})(props);
};
module.exports.GiCheerful = function GiCheerful (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M147.886 34.688c-10.106-.02-20.147 1.212-29.89 3.646-51.954 12.984-95.682 59.773-97.782 126.98-1.12 35.802 9.933 65.568 27.54 91.12 17.61 25.552 41.55 47.156 66.847 68.44 50.597 42.573 106.392 83.872 132.4 148.294l8.903 22.05 8.49-22.212c24.648-64.483 78.63-107.776 128.604-151.27 49.974-43.493 96.634-88.202 98.783-155.833 2.275-71.536-42.364-116.7-95.523-127.137-49-9.622-105.34 9.122-140.23 57.744-27.546-42.14-68.33-61.74-108.14-61.822zm108.43 90.36l92.414 115.144c-17.518-4.413-34.638-7.367-51.426-9.104l-40.988-51.068-41.475 51.678c-17.227 1.92-34.183 4.84-50.938 8.496zm10.964 104.22c3.744.203 7.524.536 11.338.998 23.128 58.72 94.71 72.16 144.393 37.942-12.702 13.278-27.086 26.205-42.282 39.43-13.117 11.417-26.774 23.008-40.272 35.16-38.64-3.292-79.145-49.547-73.176-113.53zm-22.613.21c5.097 64.43-37.687 112.014-77.23 115.173-13.762-11.76-27.61-22.97-40.805-34.073-14.815-12.465-28.802-24.828-41.06-37.637 49.857 39.712 124.645 21.8 147.51-42.287 3.834-.497 7.693-.895 11.585-1.174z"}}]})(props);
};
module.exports.GiCheeseWedge = function GiCheeseWedge (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M265.625 44.094c-11.92-.006-23.856.406-35.72 1.28l-8.75 7.407c10.17 6.262 17 15.568 18.782 26.064 1.987 11.69-2.516 24.07-12.125 33.562-19.217 18.984-51.41 23.684-75.718 11.344-3.116-1.582-5.967-3.43-8.53-5.5L16.75 225.28l73.844-19.374c7.536-18.897 26.34-33.647 48.312-37.594 3.574-.64 7.115-.964 10.563-.968 10.34-.013 19.93 2.784 27.655 8.125 2.484 1.716 4.762 3.703 6.78 5.936l292.376-76.72c-44.976-39.156-127.223-60.55-210.655-60.592zm224.97 74.687l-298.22 77.72c1.1 3.658 1.72 7.54 1.72 11.563 0 27.05-23.283 50.49-51.876 55.625-14.298 2.567-27.89-.067-38.19-7.188-10.298-7.12-16.968-19.036-16.968-32.563L19.69 241.5v95.375c.307-.08.527-.21.843-.28 14.397-3.31 28.193-1.258 38.69 5.592 10.495 6.85 17.25 18.793 17.25 32.407 0 27.227-23.146 51.74-51.876 58.344-1.705.39-3.29.547-4.907.75v13.218l202.563-52.812c-2.63-5.602-4.063-11.73-4.063-18.156 0-26.515 24.672-48.032 55.125-48.032 26.018 0 47.824 15.708 53.625 36.813 1.365.34 2.746.686 4.125 1.06l159.532-41.092V118.78zm-341.126 67.25c-2.306.005-4.726.204-7.25.657-20.205 3.63-36.47 21.794-36.47 37.25 0 7.73 3.215 13.253 8.906 17.188 5.69 3.935 14.148 5.97 24.25 4.156 20.204-3.628 36.5-21.76 36.5-37.218 0-7.728-3.215-13.283-8.906-17.218-4.268-2.952-10.118-4.823-17.03-4.813zm247.468 64.032c20.694 0 38.843 15.04 38.843 35.032 0 19.992-18.148 35.062-38.842 35.062-20.695 0-38.875-15.07-38.875-35.062 0-19.992 18.18-35.03 38.875-35.03zm0 18.688c-11.896 0-20.188 7.946-20.188 16.344 0 8.397 8.292 16.344 20.188 16.344 11.895 0 20.156-7.947 20.156-16.344 0-8.398-8.26-16.344-20.156-16.344z"}}]})(props);
};
module.exports.GiChefToque = function GiChefToque (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M268.608 25.48c-26.47.197-43.568 5.534-55.357 13.75-13.473 9.39-21.036 23.152-27.08 40.974 2.562 20.932 23.94 48.19 19.657 70.38-16.48-28.212-33.466-67.988-63.31-76.116-17.075-4.62-36.54-5.802-43.54-1.436-8.273 5.16-13.81 14.76-16.943 26.854-3.132 12.095-3.66 26.237-2.69 38.285 2.432 30.134 24.784 74.997 46.92 111.093 16.58 27.035 32.78 49.416 39.87 58.953a263.647 263.647 0 0 1 22.85-5.62c-1.538-18.02 1.384-34.673.828-53.947 4.206 18.19 7.84 34.576 14.275 51.36 12.383-1.772 25.42-2.8 38.85-2.82a262.144 262.144 0 0 1 28.256 1.463l14.22-41.562-2.373 43.103c17.118 2.644 34.412 7.158 51.38 13.978 12.21-12.758 16.877-27.402 24.99-41.186.398 16.003-4.507 31.896-15.052 45.464 8.902 4.1 17.684 8.87 26.268 14.38 41.514-67.15 66.69-133.49 61.885-198.7-1.497-20.33-6.088-38.187-12.69-51.105-6.6-12.92-14.827-20.444-23.493-22.704-6.985-1.822-24.825 2.828-39.44 9.496-26.947 10.81-48.5 45.717-55.894 69.53-.253-11.64 3.003-44.39 15.947-60.698-3.98-12.57-6.914-26.394-12.085-36.362-10.442-16.115-20.236-16.91-36.247-16.806zm-26.836 289.85c-25.985.123-50.39 4.192-70.77 10.214l-11.626 98.96c10.16-5.65 22.32-9.144 35.318-11.17 9.958-1.553 20.53-2.233 31.362-2.17 1.547.01 3.1.034 4.658.073 12.457.313 25.19 1.57 37.674 3.582 24.965 4.023 48.854 11.044 67.463 20.175 7.344 3.604 14.094 7.5 19.717 11.9l8.33-96.945c-38.464-25.67-82.153-34.81-122.125-34.62zm-15.84 113.86c-10.017-.06-19.652.554-28.464 1.928-16.116 2.513-29.044 7.62-37.168 14.707 50.417 46.585 123.38 52.03 190.373 22.225-3.786-4.99-11.387-11.32-22.752-16.897-16.367-8.032-38.93-14.78-62.398-18.562-13.2-2.127-26.71-3.32-39.59-3.4z"}}]})(props);
};
module.exports.GiChelseaBoot = function GiChelseaBoot (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M247.3 86.6c-30.5 8.58-50.4 30.6-50.6 58l18-5.6c2.7-18.5 20.6-31 36.6-34.8zm-206.52 1L29.2 101.4c19.15 16.1 34.3 32.5 35.25 47.5l17.96 6.8c-1.04-30.9-21.74-51.4-41.63-68.1zm150.52 86.3l13.8 136.8c5.9 44.1-74.9 48.1-82.7 5.4L104.7 197c-8.62-24.3-19.67-24.7-40.02-30.1.5 45.4-.6 85.3-12.73 125.4-11.17 36.8-14.35 71.9-12.82 93.5C72.78 392.1 243 422.5 333.6 418c43.5-2.1 133.3-16.5 155.8-20.2 2.6-10.9 1.8-27.3-34.5-34.2-64.5-11.1-112.5-25.4-169.7-64.2-14.3-7.5-57.8-56.3-68.9-143.3-10.2-.5-25.5 8.6-25 17.8zm-16.9 12.2c-18.2 4.2-35.6 5.4-52.3 5.2l18.1 122.2c3.1 21.1 48.6 16 46.9-1zm-135.23 218l-4.68 56.2c42.9 15.6 94.81 17.1 139.41 11.2l2.6-26c35.2 8.6 83.5 25.5 108.3 26.5 59.5 2.5 153.8-12.7 205.9-32l-.1-24.1c-24.4 4-110.8 17.9-156.2 20.1-91.9 4.5-253.05-24-295.23-31.9z"}}]})(props);
};
module.exports.GiChemicalArrow = function GiChemicalArrow (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M65.28 17.906c-4.534.112-8.9 1.748-11.874 4.938L78.188 47.53c3.6-2.498 6.062-6.59 6.062-12.374 0-11.547-9.8-17.476-18.97-17.25zm50.907 47.25c-5.456.135-10.72 2.086-14.312 5.906l100.094 99.563c6.396-3.838 10.874-10.576 10.874-20.406 0-15.813-11.598-24.957-24.125-26.907 2.274-4.11 3.593-9.1 3.593-15 0-30.203-34.627-40.495-54.063-28.313-2.82-10-12.71-15.074-22.063-14.844zm185.125 4.5c-8.09.2-15.687 5.2-15.687 15.344 0 21.643 34.656 23.643 34.656 1.906 0-11.547-9.798-17.476-18.967-17.25zM38 70.97c-8.036 3.474-14.03 10.785-14.03 22.155 0 25.048 29 33.652 45.06 23.344-.02.356-.03.722-.03 1.093 0 21.643 34.656 23.642 34.656 1.906 0-16.772-20.605-21.663-30.03-13.095L38 70.97zm285.28 50.624c-5.445-.06-11.186 1.354-16.905 4.656-36.6 21.133.49 77.543 36.938 56.5.29-.168.562-.36.843-.53 3.576 10.24 20.815 13.49 24.28.686 2.364-8.723-4.358-15.083-11.436-16.22 6.43-19.766-11.307-44.84-33.72-45.092zM47.69 157.344c-8.09.2-15.72 5.17-15.72 15.312 0 21.642 34.657 23.643 34.657 1.906 0-11.547-9.768-17.444-18.938-17.218zm83.156 5.937c-6.61 4.913-11.063 12.715-11.063 23.532 0 18.466 12.97 29.59 27.532 32.688-.978 3.754-1.53 7.847-1.53 12.313 0 32.11 27.323 48.72 52.937 48.156 3.2 15.24 16.224 24.036 29.936 25.842-.203 1.525-.312 3.114-.312 4.782 0 8.336 2.636 15.158 6.875 20.437-10.43-1.978-21.4-.696-30.345 3.97 2.996-14.892-20.645-22.33-24.72-7.125-2.556 9.508 5.674 16.226 13.376 16.406-4.655 5.905-7.53 13.667-7.53 23.376 0 35.93 39.046 49.723 64.156 38.28-.05.78-.094 1.565-.094 2.377 0 35.293 47.376 43.74 62.72 20.656 6.813 5.087 15.516 7.62 23.968 7.467-1.963 4.567-3.094 9.853-3.094 15.907 0 45.924 63.77 55.7 80.72 22.812 19.862 23.187 63.74 25.98 73.624-10.906 6.62-24.708-8.318-43.653-27.344-51.25 17.534-1.69 33.188-13.284 33.188-35.594 0-19.965-12.55-32.753-27.75-37.812.12-1.355.187-2.748.187-4.188 0-6.354-1.24-11.99-3.374-16.937 6.76-2.78 11.844-8.816 11.844-18.345 0-6.834-2.624-12.166-6.594-15.938.665-.247 1.322-.517 2-.906 13.934-7.994 2.29-31.03-11.625-23-6.915 3.988-7.51 11.67-4.655 17.408-5.89-.726-11.958.447-16.594 3.625-2.23-18.2-17.765-28.094-33.342-28.97.942-2.997 1.468-6.33 1.468-10.03 0-41.226-64.075-45.623-67.312-6.813-11.85-3.468-24.845-3.02-35.75 1.5.933-3.418 1.437-7.176 1.437-11.28 0-42.605-54.43-53.9-76.092-29.5l99.593 99.06c-1.305 1.31-2.334 3.038-2.936 5.283-4.166 15.5 20.3 23.54 24.5 8.03 1.77-6.54-1.58-11.727-6.344-14.406 9.1-10.287 23.79-29.242 31.844-52.093 38.66 53.382 76.884 131.425 73.875 200.97-69.06-4.08-152.798-36.757-206.126-72.314 48.474-22.737 60.437-36.688 60.437-36.688l-94.905-94.406c4.782-2.24 8.28-6.774 8.28-13.687 0-18.36-24.72-22.504-32.405-10.314l-52.656-52.375zm303.219 39.595c-8.09.2-15.688 5.17-15.688 15.313 0 21.643 34.656 23.674 34.656 1.937 0-11.548-9.798-17.476-18.967-17.25zm-328.282 88.78c-7.082.193-14.056 4.065-16.343 12.595-4.212 15.72 13.806 23.61 25.47 17.813.85 23.095 40.252 28.895 47.25 2.78 6.222-23.22-23.28-34.08-38.657-21.906-2.103-7.306-9.983-11.49-17.72-11.28zm85.595 137.5c-4.7.043-9.128 2.557-10.688 8.376-2.88 10.71 7.893 17.846 16.22 16.126.83 27.68 45.468 30.024 45.468 1.75 0-21.135-24.955-27.91-37.906-18.47-2.365-4.844-7.892-7.825-13.095-7.78zm114.656 24.908c-1.76.058-3.627.59-5.53 1.687-13.904 8.014-2.31 30.964 11.625 22.97 11.757-6.747 5.32-24.193-5.344-24.658-.246-.01-.497-.008-.75 0z"}}]})(props);
};
module.exports.GiChemicalBolt = function GiChemicalBolt (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M39.344 15c-.778 0-1.554.045-2.344.125-12.645 1.288-21.85 12.573-20.563 25.22 1.288 12.644 12.574 21.85 25.22 20.56C54.3 59.62 63.506 48.334 62.218 35.688 61.01 23.832 51.01 14.997 39.343 15zm121.187 9.125c-.46 0-.937.015-1.405.063-7.48.76-12.918 7.457-12.156 14.937.76 7.48 7.456 12.918 14.936 12.156 7.48-.76 12.918-7.425 12.156-14.905-.714-7.013-6.63-12.252-13.53-12.25zM84.72 42.063c-.46 0-.91.014-1.376.062-7.48.762-12.95 7.457-12.188 14.938.762 7.48 7.457 12.918 14.938 12.156 7.48-.763 12.918-7.427 12.156-14.907-.714-7.013-6.63-12.252-13.53-12.25zm109.718 11.812c-.747 0-1.492.017-2.25.094-12.136 1.235-20.986 12.082-19.75 24.218 1.235 12.135 12.083 20.985 24.218 19.75 12.135-1.236 20.955-12.084 19.72-24.22-1.16-11.376-10.744-19.846-21.94-19.843zM119.53 77.72c-1.322 0-2.654.05-4 .186-7.677.782-14.606 3.768-20.25 8.22-5.088-4.18-11.774-6.408-18.843-5.69-14.072 1.435-24.34 13.99-22.906 28.064 1.434 14.073 14.022 24.308 28.095 22.875.483-.05.964-.112 1.438-.188 4.48 11.417 14.082 20.036 25.75 23.344-1.302 3.463-1.838 7.26-1.438 11.19 1.385 13.598 13.557 23.51 27.156 22.124 13.6-1.385 23.48-13.526 22.095-27.125-.692-6.8-4.06-12.686-8.97-16.69 7.707-8.002 11.996-19.206 10.782-31.124-2.053-20.166-19.062-35.193-38.906-35.187zm108.876 43.405c-1.983 0-3.984.076-6 .28-32.25 3.286-55.722 32.094-52.437 64.345.494 4.868 1.572 9.53 3.155 13.938-16.95 7.738-27.9 25.62-25.906 45.187 2.5 24.564 24.434 42.44 49 39.938 4.128-.42 8.062-1.405 11.75-2.844.047 1.358.14 2.72.28 4.092 3.11 30.542 28.016 53.592 57.72 55.282-4.984 15.2-6.945 31.654-5.22 48.594.05.49.1.98.156 1.468-.312.024-.624.03-.937.063-19.733 2.008-34.073 19.642-32.064 39.374 2.01 19.73 19.612 34.103 39.344 32.094 7.937-.81 15.016-4.143 20.5-9.125 24.262 28.84 61.9 45.574 102.22 41.468 64.763-6.594 111.907-64.453 105.31-129.217-4.034-39.622-27.25-72.647-59.5-90.813 1.907-7.465 2.546-15.39 1.72-23.5-3.77-37.03-36.846-63.99-73.875-60.22-25.248 2.572-45.788 18.78-55.125 40.564-9.945-8.12-22.39-13.146-35.813-13.813 10.245-11.804 15.77-27.628 14.063-44.405-3.08-30.236-28.592-52.758-58.344-52.75zm108.78 1.72c-.994 0-1.987.052-2.998.155-16.18 1.648-27.96 16.1-26.313 32.28 1.648 16.182 16.1 27.962 32.28 26.314 16.182-1.648 27.962-16.1 26.314-32.28-1.546-15.17-14.356-26.474-29.283-26.47zm59.564 26.343c-.46 0-.94.046-1.406.093-7.48.763-12.918 7.427-12.156 14.907.76 7.48 7.457 12.92 14.937 12.157 7.48-.762 12.918-7.426 12.156-14.906-.713-7.013-6.63-12.252-13.53-12.25zM61.562 202.375c-.46 0-.907.015-1.374.063-7.48.76-12.95 7.425-12.188 14.906.635 6.24 5.41 11.045 11.313 12.03-.555 2.602-.722 5.338-.438 8.126 1.465 14.388 14.3 24.87 28.688 23.406 14.387-1.465 24.87-14.33 23.406-28.72-1.466-14.386-14.3-24.87-28.69-23.405-2.86.293-5.572 1.042-8.06 2.157-2.028-5.095-7.024-8.564-12.657-8.562zm44.126 75.906c-.67 0-1.352.026-2.032.095-10.883 1.108-18.796 10.835-17.687 21.72 1.107 10.882 10.834 18.795 21.718 17.686 10.883-1.107 18.795-10.803 17.687-21.686-1.04-10.203-9.648-17.815-19.688-17.813zm48.78 37.25c-1.467.002-2.945.068-4.437.22-23.873 2.43-41.243 23.782-38.81 47.656 2.43 23.874 23.75 41.244 47.624 38.813 10.225-1.043 19.265-5.562 26.062-12.25 5.16 2.962 11.255 4.397 17.625 3.75 16.182-1.65 27.962-16.102 26.314-32.283-1.648-16.18-16.1-27.96-32.28-26.312-1.783.18-3.495.523-5.158 1-7.74-12.493-21.584-20.598-36.937-20.594z"}}]})(props);
};
module.exports.GiChemicalDrop = function GiChemicalDrop (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M433.814 68.664c-2.74.05-5.495.423-8.242 1.152-8.47 2.25-15.3 7.512-20.44 14.49C292.905 120.865 186.494 154.58 75.276 190.4c-39.714 12.79-64.6 51.163-53.006 86.784 11.597 35.62 54.342 52.277 94.035 39.277l-.002.002c109.41-35.827 214.424-69.036 325.12-104.656.56.212 1.13.39 1.694.58-2.62 2.935-4.226 6.796-4.226 11.04 0 9.164 7.43 16.593 16.594 16.593 9.165 0 16.596-7.43 16.596-16.593 0-4.32-1.664-8.24-4.367-11.192 12.75-4.865 21.353-16.866 25.535-30.898 4.547-15.257 4.504-33.654-.584-52.48-5.088-18.828-14.327-34.77-25.94-45.712-8.712-8.206-19.263-13.79-30.175-14.43-.91-.052-1.822-.07-2.736-.054zm.497 18.68c.455-.007.914.005 1.377.035 5.567.358 11.818 3.34 18.22 9.37 8.535 8.04 16.44 21.165 20.716 36.986 3.622 13.4 4 26.397 2.012 36.852h-52.783c-3.517-6.207-6.512-13.352-8.622-21.158-4.276-15.822-4.046-31.094-.716-42.266 3.33-11.172 9.122-17.497 15.855-19.285 1.262-.336 2.578-.517 3.94-.536zm-38.414 17.043c-3.815 14.734-3.516 32.133 1.29 49.92 1.544 5.707 3.472 11.143 5.728 16.26h-151.22c-64.405 20.742-125.856 40.507-163.35 52.59-23.24 7.486-35.353 27.407-30.406 42.593 4.946 15.188 26.582 24.333 49.75 16.75 66.89-21.89 199.01-64.39 302.822-97.803 3.76 5.807 7.998 10.967 12.62 15.323.066.06.135.118.2.18-104.876 33.753-241.66 77.74-309.83 100.05-30.827 10.09-64.424-1.334-73.344-28.72-8.92-27.385 11.603-56.22 42.438-66.155 68.055-21.93 208.2-66.996 313.302-100.988zm59.58 180.205c-16.948 63.255-40.507 54.472-40.507 91.5 0 22.36 18.146 40.508 40.507 40.508 22.36 0 40.507-18.147 40.507-40.508 0-39.97-23.256-27.12-40.507-91.5z"}}]})(props);
};
module.exports.GiChemicalTank = function GiChemicalTank (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M99.5 18.406V92.22h321.594V18.405H99.5zm24.75 92.5v288.531h18.688v-288.53H124.25zm253.406 0v288.531h18.688v-288.53h-18.688zm-216.47 58.53v230l199.033.002v-230h-43.5c-.717 8.933-8.194 15.937-17.314 15.937s-16.596-7.004-17.312-15.938H267.75c.968 3.02 1.5 6.223 1.5 9.563 0 17.317-14.058 31.344-31.375 31.344S206.53 196.317 206.53 179c0-3.34.535-6.542 1.5-9.563h-46.843zm138.095 30.845c24.18 0 43.783 19.603 43.783 43.782 0 24.18-19.602 43.782-43.782 43.782-24.178 0-43.78-19.602-43.78-43.78 0-24.18 19.602-43.783 43.78-43.783zm-81.25 20.814c14.265 0 25.814 11.58 25.814 25.844 0 14.264-11.55 25.812-25.813 25.812-14.263 0-25.843-11.548-25.843-25.813 0-14.264 11.58-25.843 25.844-25.843zm68.564 79.344c14.264 0 25.844 11.58 25.844 25.843 0 14.265-11.58 25.814-25.844 25.814-14.264 0-25.813-11.55-25.813-25.813 0-14.263 11.55-25.842 25.814-25.842zM99.5 418.125v73.844h321.594v-73.845H99.5z"}}]})(props);
};
module.exports.GiCherish = function GiCherish (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M159.361 28.344c-51.352.63-79.54 56.303-79.244 86.957 1.504 47.346 34.181 79.356 74.82 114.763 35.351 30.799 76.091 63.283 100.907 109.987.05-.092.105-.18.156-.272.051.092.105.18.156.272 24.816-46.704 65.556-79.188 100.906-109.987 40.64-35.407 73.317-67.417 74.82-114.763.297-30.654-27.891-86.327-79.243-86.957C314.636 27.878 270 54 256 96c-14-42-58.636-68.122-96.639-67.656zM60.17 198.06c-8.818-.137-17.843 11.093-17.895 39.882-.078 44.153-4.356 56.616 16.077 106.551C73.335 381.112 80.054 409.257 128 432c5.68 20.022 3.413 24.73-.44 41.84-3.596 15.974 33.423 18.91 60.534 5.453 29.091-15.868 26.65-59.557 21.453-89.184-6.044-34.454-25.06-41.615-41.543-56.332-17.115-24.475-21.098-68.813-48.856-86.699-5.797-3.735-35.37-7.527 5.262 93.942-53.571-13.268-43.813-74.773-47.687-120.31-1.154-13.561-8.773-22.53-16.553-22.65zm391.66 0c-7.78.12-15.399 9.088-16.553 22.65-3.874 45.536 5.884 107.041-47.687 120.309 40.633-101.47 11.059-97.677 5.262-93.942-27.758 17.886-31.74 62.224-48.856 86.7-16.482 14.716-35.5 21.877-41.543 56.331-5.197 29.627-7.638 73.316 21.453 89.184 27.111 13.456 64.13 10.521 60.533-5.453-3.852-17.11-6.119-21.818-.439-41.84 47.946-22.743 54.665-50.888 69.648-87.506 20.433-49.935 16.155-62.398 16.077-106.55-.052-28.79-9.077-40.02-17.895-39.883z"}}]})(props);
};
module.exports.GiCherry = function GiCherry (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M278.814 35.137c-3.87 29.372 2.21 62.917 23.563 91.277 24.7 32.807 70.077 59.506 146.49 64.467-10.864-53.306-31.943-84.387-60.87-107.415-23.07-18.367-51.784-31.734-84.02-45.96 29.838 36.785 60.63 73.392 105.382 92.694l-7.13 16.527c-55.713-24.03-90.292-70.698-123.416-111.59zM259.2 46.79c-42.613 88.792-88.927 175.71-147.975 257.08-1.967-1.61-3.77-3.225-5.454-4.725-4.98-4.436-9.11-7.99-15.42-10.407-2.338-.896-4.675-1.33-7.02-1.326-7.035.01-14.15 3.948-21.65 11.11-10 9.553-18.946 24.412-23.893 37.62-14.318 38.227 4.955 80.574 43.186 94.89 38.23 14.32 80.582-4.952 94.9-43.178 4.94-13.187 8.024-30.42 6.8-44.243-.61-6.91-2.283-12.897-4.786-17.208-2.503-4.31-5.532-7.033-10.21-8.627-4.466-1.52-10.517-1.707-17.765-1.85-6.83-.133-14.742-.297-22.97-3.064 53.342-73.767 96.236-151.695 135.23-230.99-7.14 56.593-14.18 114.543-29.91 170.29-7.03-.83-12.847-3.195-17.887-5.144-6.222-2.407-11.337-4.285-18.094-4.336-10.013-.077-17.4 6.766-23.415 19.216-5.06 10.48-8.094 24.21-8.93 36.708 3.11.388 6.3 1.027 9.544 2.132 8.872 3.023 15.68 9.234 19.973 16.627 4.293 7.394 6.374 15.88 7.15 24.662.775 8.75.267 17.862-1.156 26.727 11.08 6.646 24.062 10.47 37.967 10.47 40.825 0 73.725-32.898 73.725-73.718 0-14.08-3.156-31.3-9.15-43.817-2.997-6.257-6.663-11.276-10.52-14.435-3.856-3.16-7.648-4.648-12.59-4.5-4.713.142-10.445 2.09-17.282 4.498-3.142 1.107-6.54 2.286-10.188 3.25 11.84-43.77 18.6-88.247 24.276-131.803C263.302 95.443 258.402 70.4 259.2 46.79zm46.732 110.605c1.617 5.452 3.26 10.96 4.945 16.554 20.44 67.845 45.324 144.313 68.207 195.255-4.537.18-8.715-.204-12.46-.52-6.65-.564-12.083-.93-18.583.917-9.63 2.738-14.8 11.38-17.075 25.017-2.275 13.638-.524 30.894 3.437 44.43 11.464 39.178 52.28 61.515 91.463 50.052 39.182-11.464 61.52-52.276 50.057-91.454-3.955-13.514-11.82-29.155-21.086-39.484-4.634-5.164-9.564-8.953-14.152-10.902-2.295-.975-4.456-1.554-6.63-1.698-2.177-.143-4.368.15-6.718.915-4.485 1.458-9.44 4.937-15.324 9.168-4.337 3.118-9.218 6.61-15.076 9.29-21.51-47.232-46.358-122.123-66.762-189.375-9.007-5.556-17.075-11.646-24.242-18.168z"}}]})(props);
};
module.exports.GiChessBishop = function GiChessBishop (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M406.02 476.915h-300v-60h300v60zm-83.46-181H189.48v17.65h133.08v-17.65zm11.78-77.69a200 200 0 0 1-9.39 61.69H187.09a200 200 0 0 1-9.39-61.69c0-59.09 23.82-109 56.41-124.67a33.34 33.34 0 1 1 43.82 0c32.59 15.71 56.41 65.58 56.41 124.67zm-51.07-48.91h-19.25v-23.92h-16v23.92h-19.26v16h19.26v51.54h16v-51.54h19.25v-16zm38.15 180.69v-20.44h-130.8v20.44H93.29v.11l49.46 49.46h82.08l31.15-36 31.15 36h82.44l48.87-48.87.27-.69h-97.29z"}}]})(props);
};
module.exports.GiChessKing = function GiChessKing (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M405.995 477.15h-300v-60h300v60zm-10.3-107.13h-279.4a96.88 96.88 0 0 1 6.65 31.12h266.1a96.88 96.88 0 0 1 6.65-31.12zm-139.7-241.06a35.76 35.76 0 0 0-35.76 35.76c0 50.16 35.76 99.34 35.76 99.34s35.76-49.18 35.76-99.34a35.76 35.76 0 0 0-35.76-35.76zm8-15.38V94.24h18.36v-16h-18.36V54.85h-16v23.39h-18.36v16h18.36v19.38a51.9 51.9 0 0 1 16-.04zm81.64 51.36a98.74 98.74 0 0 0-38.13 7.61c-3.23 51.75-37.07 98.85-38.58 100.93l-4.93 6.76V354h140c16.57-26.15 40.78-42.41 40.78-90a99.13 99.13 0 0 0-99.14-99.07zm-141.16 7.61a99.16 99.16 0 0 0-137.25 91.51c0 47.55 24.21 63.82 40.78 90h139.99v-73.82l-4.94-6.79c-1.51-2.05-35.34-49.15-38.58-100.9z"}}]})(props);
};
module.exports.GiChessKnight = function GiChessKnight (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M60.81 476.91h300v-60h-300v60zm233.79-347.3l13.94 7.39c31.88-43.62 61.34-31.85 61.34-31.85l-21.62 53 35.64 19 2.87 33 64.42 108.75-43.55 29.37s-26.82-36.39-39.65-43.66c-10.66-6-41.22-10.25-56.17-12l-67.54-76.91-12 10.56 37.15 42.31c-.13.18-.25.37-.38.57-35.78 58.17 23 105.69 68.49 131.78H84.14C93 85 294.6 129.61 294.6 129.61z"}}]})(props);
};
module.exports.GiChessPawn = function GiChessPawn (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M312.07 194.46A56.07 56.07 0 1 1 256 138.39a56.07 56.07 0 0 1 56.07 56.07zM406 418.01H106v60h300v-60zM282.33 261.52a71.81 71.81 0 0 1-52.15.2c-.73 58.91-62.35 114.06-96.75 140.28H378.9c-34.09-26.33-95.44-81.78-96.57-140.48z"}}]})(props);
};
module.exports.GiChessQueen = function GiChessQueen (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M477.518 181.966a25 25 0 0 1-34.91 23l-62.29 150.26h-248.92l-62.24-150.19a25 25 0 1 1 9.73-7.29l87 71.2 20.92-126.4a25 25 0 1 1 14.7-1.85l54.31 117 54.42-117.3a25 25 0 1 1 14.58 2.08l20.93 126.42 87.26-71.3a25 25 0 1 1 44.51-15.63zm-71.66 241.25h-300v60h300v-60zm-27.75-52h-244.22v36h244.22v-36z"}}]})(props);
};
module.exports.GiChessRook = function GiChessRook (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M406 484.7H106v-60h300v60zm-56.67-330.83h-50.05V91.3h-82.39v62.57h-54.22V91.3h-54.23v113.67h295.12V91.3h-54.23v62.57zm23.35 67.23H139.32v187.6h233.36V221.1z"}}]})(props);
};
module.exports.GiChestArmor = function GiChestArmor (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M156.7 25.83L89 39.38c-.1 58.57-1.74 119.32-43.49 167.22C104.4 246.5 189 260.7 247 248.8v-99L108.3 88.22l7.4-16.44L256 134.2l140.3-62.42 7.4 16.44L265 149.8v99c58 11.9 142.6-2.3 201.5-42.2-41.8-47.9-43.4-108.65-43.5-167.22l-67.7-13.55c-12.9 13.88-20.6 28.15-32.9 40.53C308.9 79.78 289.5 89 256 89c-33.5 0-52.9-9.22-66.4-22.64-12.3-12.38-20-26.65-32.9-40.53zM53.88 232.9C75.96 281 96.07 336.6 102.7 392.8l65 22.8c4.2-52.7 28.2-104 63.7-146.1-55.1 6.3-122.7-5.8-177.52-36.6zm404.22 0c-54.8 30.8-122.4 42.9-177.5 36.6 35.5 42.1 59.5 93.4 63.7 146.1l65.2-22.9c6.6-56.8 26.6-111.8 48.6-159.8zM256 269c-40.5 43.1-67.7 97.9-70.7 152.7l61.7 21.6V336h18v107.3l61.7-21.6c-3.1-54.8-30.2-109.6-70.7-152.7zm151.7 143.4L297 451.1v18.8l110.2-44.1c.1-4.5.3-8.9.5-13.4zm-303.3.1c.3 4.5.4 8.9.5 13.4l110.1 44v-18.7l-110.6-38.7zM279 457.4l-23 8.1-23-8v19.6l23 9.2 23-9.2v-19.7z"}}]})(props);
};
module.exports.GiChest = function GiChest (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M58.553 89L42.27 211.8H79V89H58.553zM97 89v122.8h38V89H97zm56 0v122.8h56.666v-17.6h92.668v17.6H359V89H153zm224 0v122.8h38V89h-38zm56 0v122.8h36.73L453.446 89H433zM227.666 212.2v105.2h56.668V212.2h-56.668zM256 223.794a18.667 16.103 0 0 1 18.666 16.1 18.667 16.103 0 0 1-9.666 14.09v37.214h-18V254a18.667 16.103 0 0 1-9.666-14.106 18.667 16.103 0 0 1 18.666-16.1zM41 229.8v127.915l19.334 18.23V229.8H41zm37.334 0v158h355.332v-158H302.334v105.6h-92.668V229.8H78.334zm373.332 0v146.145L471 357.715V229.8h-19.334zM41 382.456V423h43.002L41 382.455zm430 0L427.998 423H471v-40.545zM92 405.8l18.24 17.2h291.52L420 405.8H92z"}}]})(props);
};
module.exports.GiChestnutLeaf = function GiChestnutLeaf (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M229.8 21.43s-5.9 14.34-15.6 19.23c-17.6 8.99-36.7 21.57-38.7 55.07-3.7 62.07 19 131.87 40.6 190.77-20.4-41.5-39.5-71.9-93-114.5-23.73-19.2-60.37-50.5-78.88-43.7-10.17 3.8-24.08-5-24.08-5 5.31 11.2 7.49 24 7.82 36.3 1.26 26.9 11.81 57.6 29.02 82.4 37.59 52.6 91.92 75 138.52 86-41.2-6.2-72.7-5-122.09 10.1-22.85 6.8-31.79 22.1-37.33 39.2-3.02 9.5-12.98 15.3-12.98 15.3 8.99 2.4 18.38 6.1 25.49 12.5 15.81 13.7 37.38 15.7 62.11 11.5 56.8-9.5 82.5-26.6 121.1-61.3 1.2 47.2-2.7 96.4-11.3 135.1l17.6 4c9-40.3 12.9-89.9 11.8-137.9 46 24.1 110.2 51.6 171.7 32.9 22.7-7.4 36.9-28.3 46.7-46.2 4.5-8.2 15.4-10.1 23.6-14.7 0 0-14.6-1.9-21.8-10.4-13.4-15.2-32.9-26-59.3-26.4-40.5-.8-71.2 7.9-98.3 19.7 31.4-21.9 65.9-52.1 107.1-86.5 35.7-36.2 35.2-48.8 34.1-75.8-.7-12.2-6.9-20.8-2.6-32.2 0 0-14.3 1.3-25.2 1.3-22.3 0-34.6-11.2-56.6 10-43.7 41.4-73 92-96.1 140.4 16.2-54.4 26.1-123.5 15.2-175.2-4.9-31.93-13.7-43.53-40.2-52.25-11.6-3.85-13.8-8.26-18.4-19.72z"}}]})(props);
};
module.exports.GiChewedHeart = function GiChewedHeart (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M371.148 21.422c-47.943.474-94.522 30.346-106.605 84.855 23.308 25.97 35.25 59.46 30.36 94.453l-18.51-2.585c6.01-43.03-18.18-83.975-60.573-106.483-30.015-13.248-62.242-15.24-91.802-8.28l-6.82 1.147c.035.21.058.394.093.603-.275.08-.552.152-.827.232.297.04.59.09.887.135 3.047 18.48 3.43 30.233 1.01 38.135-2.465 8.044-7.604 13.897-19.858 21.88l-10.947 7.13 10.287 8.056c21.587 16.905 26.17 33.387 22.36 44.382-3.81 10.995-17.38 20.564-42.932 20.02l-11.91-.254 2.59 11.627c3.902 17.518 2.97 29.854-.3 37.894s-8.532 12.52-16.617 15.308l.006.015-7.91 2.555C112.05 394.053 302.19 431.686 337.77 493.3c0-88.87 183.898-228.256 149.855-373.734-15.838-67.674-66.885-98.634-116.475-98.144zm-233.69 72.246c21.017 14.63 31.41 45.175 15.14 71.9 96.352-16.05 73.76 120.85 5.703 101.38-19.06 41.176-62.37 43.628-87.2 32.82 5.938-4.656 10.792-10.806 13.863-18.36 4.23-10.4 5.16-23.078 3.094-37.998 25.026-2.268 43.544-14.152 49.802-32.21 6.223-17.957-.74-38.94-19.358-57.192 8.663-7.18 14.733-15.126 17.727-24.897 3.145-10.27 3.022-21.51 1.227-35.442z"}}]})(props);
};
module.exports.GiChewedSkull = function GiChewedSkull (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M262.81 16.098c-10.335-.044-20.657.6-30.867 1.894l-2.68.246c1.754 19.05-1.177 32.7-7.144 39.69-5.967 6.99-15.964 10.454-36.102 6.328l-18.686-3.83 8.426 17.11c5.744 11.666 2.894 24.13-5.42 31.386s-22.805 10.594-44.797-1.443l-17.257-9.447 3.582 19.344c3.326 17.958-1.815 26.41-10.158 31.99-8.343 5.582-21.628 7.223-33.15 4.725l-.14.644-2.292-1.51c-8.416 30.07-10.557 65.306-4.252 106.08l15.184 94.135 70.295-13.24 3.46 18.366-15.384 2.897L179.96 488.79h25.39l-7.81-61.89 18.534-2.337 8.104 64.226h29.613v-65.325h18.69v65.324h29.61l8.105-64.228 18.534 2.338-7.81 61.89h25.486l44.352-126.808-18.133-3.416 3.46-18.365 70.185 13.22 18.236-94.22c12.634-81.883-9.59-141.71-48.71-181.966-39.135-40.268-95.95-60.884-152.966-61.136h-.02zm-14.51 20.14c45.57 29.486 39.706 97.78-19.587 70.834 34.772 67.943-24.572 97.148-69.838 55.2 3.894 37.6-40.093 48.023-69.316 11.056 7.962-1.166 15.703-3.855 22.538-8.428 10.563-7.066 17.958-19.23 19.1-34.785 20.852 6.868 39.385 3.4 51.43-7.113 10.958-9.566 16.144-24.103 14.368-38.635 16.913.726 30.568-4.03 39.34-14.306 7.624-8.933 11.127-20.532 11.965-33.822zm-61.9 167.98c32.884 0 59.54 26.656 59.54 59.54 0 32.885-26.656 59.543-59.54 59.543-32.883 0-59.543-26.657-59.543-59.542 0-32.886 26.66-59.54 59.543-59.54zm157.543 0c32.884 0 59.54 26.656 59.54 59.54 0 32.885-26.656 59.543-59.54 59.543-32.883 0-59.543-26.657-59.543-59.542 0-32.886 26.66-59.54 59.543-59.54zm-80.675 79.74l39.937 101.6-17.03 7.05-22.905-35.477-22.905 35.477-17.62-7.048 40.523-101.603z"}}]})(props);
};
module.exports.GiChickenLeg = function GiChickenLeg (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M395.938 20.78c-2.006-.015-4.02.047-6.063.19-20.603 1.434-43.834 11.255-68.156 33.374 4.478 1.835 8.86 4.388 13.092 7.718 34.186 26.906 13.31 54.375-13.156 48.094 35.578 39.36.977 69.643-36.97 49.625 9.69 25.352-20.15 40.428-47.155 17.845-19.576 41.963-23.738 70module.exports={C:{"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0.00226,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0.00226,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0.00226,"96":0,"97":0,"98":0,"99":0.07921,"100":0,"101":0,"102":0.00226,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0.00226,"110":0.1833,"111":0.21499,"112":0.00226,"113":0,"3.5":0,"3.6":0},D:{"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0.02942,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0.00226,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0.00226,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0.01584,"66":0.00226,"67":0,"68":0,"69":0,"70":0.00226,"71":0,"72":0,"73":0,"74":0.00226,"75":0,"76":0.00679,"77":0,"78":0,"79":0.00226,"80":0.00453,"81":0,"83":0,"84":0,"85":0,"86":0,"87":0.00226,"88":0,"89":0,"90":0,"91":0,"92":0.01132,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0.00453,"99":0.00453,"100":0.00226,"101":0,"102":0,"103":0.0181,"104":0.00679,"105":0.00226,"106":0,"107":0.00905,"108":0.00905,"109":0.20141,"110":0.74905,"111":0.99572,"112":0,"113":0,"114":0},F:{"9":0,"11":0,"12":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"60":0.00453,"62":0,"63":0.00226,"64":0,"65":0,"66":0.00453,"67":0.00679,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0.00226,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0.00453,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0.03621,"9.5-9.6":0,"10.0-10.1":0,"10.5":0,"10.6":0,"11.1":0,"11.5":0,"11.6":0,"12.1":0},B:{"12":0,"13":0,"14":0.02263,"15":0.01358,"16":0,"17":0,"18":0.03621,"79":0,"80":0,"81":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0.00226,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0.00453,"104":0,"105":0,"106":0,"107":0,"108":0.00453,"109":0.07468,"110":0.35077,"111":0.30777},E:{"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0.00226,"15":0,_:"0","3.1":0,"3.2":0,"5.1":0.00453,"6.1":0,"7.1":0,"9.1":0,"10.1":0,"11.1":0,"12.1":0,"13.1":0.01132,"14.1":0.00226,"15.1":0,"15.2-15.3":0,"15.4":0,"15.5":0,"15.6":0.00453,"16.0":0,"16.1":0.00226,"16.2":0.00453,"16.3":0.00905,"16.4":0,"16.5":0},G:{"8":0,"3.2":0,"4.0-4.1":0,"4.2-4.3":0,"5.0-5.1":0,"6.0-6.1":0,"7.0-7.1":0.01195,"8.1-8.4":0,"9.0-9.2":0.00171,"9.3":0.12124,"10.0-10.2":0,"10.3":0.29712,"11.0-11.2":0.00854,"11.3-11.4":0,"12.0-12.1":0.07513,"12.2-12.5":2.79362,"13.0-13.1":0.01366,"13.2":0.07513,"13.3":0.15027,"13.4-13.7":0.28175,"14.0-14.4":0.97333,"14.5-14.8":1.06554,"15.0-15.1":0.45422,"15.2-15.3":0.16393,"15.4":0.55326,"15.5":0.67621,"15.6":0.4713,"16.0":0.88624,"16.1":1.33363,"16.2":1.2807,"16.3":3.78744,"16.4":0.14685,"16.5":0},P:{"4":0.14477,"20":1.11677,"5.0-5.4":0.08272,"6.2-6.4":0,"7.2-7.4":0.18613,"8.2":0,"9.2":0.04136,"10.1":0,"11.1-11.2":0.01034,"12.0":0.01034,"13.0":0.04136,"14.0":0.11374,"15.0":0.02068,"16.0":0.0517,"17.0":0.04136,"18.0":0.06204,"19.0":0.25851},I:{"0":0,"3":0,"4":0,"2.1":0,"2.2":0,"2.3":0,"4.1":0.00092,"4.2-4.3":0.00692,"4.4":0,"4.4.3-4.4.4":0.09647},K:{_:"0 10 11 12 11.1 11.5 12.1"},A:{"6":0,"7":0,"8":0,"9":0,"10":0,"11":0.00226,"5.5":0},S:{"2.5":0.2089,_:"3.0-3.1"},J:{"7":0,"10":0.00774},N:{"10":0,"11":0},R:{_:"0"},M:{"0":0.03869},Q:{"13.1":0.00774},O:{"0":0.53385},H:{"0":1.11338},L:{"0":75.19171}};
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           {"version":3,"file":"firebase-storage-compat.js","sources":["../storage/src/implementation/error.ts","../storage/src/implementation/connection.ts","../storage-compat/src/index.ts","../util/src/crypt.ts","../util/src/defaults.ts","../util/src/global.ts","../util/src/errors.ts","../util/src/compat.ts","../component/src/component.ts","../storage/src/implementation/constants.ts","../storage/src/implementation/location.ts","../storage/src/implementation/failrequest.ts","../storage/src/implementation/type.ts","../util/src/environment.ts","../storage/src/implementation/url.ts","../storage/src/implementation/utils.ts","../storage/src/implementation/request.ts","../storage/src/implementation/backoff.ts","../storage/src/implementation/fs.ts","../storage/src/platform/browser/base64.ts","../storage/src/implementation/string.ts","../storage/src/implementation/blob.ts","../storage/src/implementation/json.ts","../storage/src/implementation/path.ts","../storage/src/implementation/metadata.ts","../storage/src/implementation/list.ts","../storage/src/implementation/requestinfo.ts","../storage/src/implementation/requests.ts","../storage/src/implementation/taskenums.ts","../storage/src/implementation/observer.ts","../storage/src/implementation/async.ts","../storage/src/platform/browser/connection.ts","../storage/src/task.ts","../storage/src/reference.ts","../storage/src/service.ts","../util/src/emulator.ts","../storage/src/api.ts","../storage/src/index.ts","../storage/src/constants.ts","../storage-compat/src/tasksnapshot.ts","../storage-compat/src/task.ts","../storage-compat/src/list.ts","../storage-compat/src/reference.ts","../storage-compat/src/service.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\n\nimport { CONFIG_STORAGE_BUCKET_KEY } from './constants';\n\n/**\n * An error returned by the Firebase Storage SDK.\n * @public\n */\nexport class StorageError extends FirebaseError {\n  private readonly _baseMessage: string;\n  /**\n   * Stores custom error data unique to the `StorageError`.\n   */\n  customData: { serverResponse: string | null } = { serverResponse: null };\n\n  /**\n   * @param code - A `StorageErrorCode` string to be prefixed with 'storage/' and\n   *  added to the end of the message.\n   * @param message  - Error message.\n   * @param status_ - Corresponding HTTP Status Code\n   */\n  constructor(code: StorageErrorCode, message: string, private status_ = 0) {\n    super(\n      prependCode(code),\n      `Firebase Storage: ${message} (${prependCode(code)})`\n    );\n    this._baseMessage = this.message;\n    // Without this, `instanceof StorageError`, in tests for example,\n    // returns false.\n    Object.setPrototypeOf(this, StorageError.prototype);\n  }\n\n  get status(): number {\n    return this.status_;\n  }\n\n  set status(status: number) {\n    this.status_ = status;\n  }\n\n  /**\n   * Compares a `StorageErrorCode` against this error's code, filtering out the prefix.\n   */\n  _codeEquals(code: StorageErrorCode): boolean {\n    return prependCode(code) === this.code;\n  }\n\n  /**\n   * Optional response message that was added by the server.\n   */\n  get serverResponse(): null | string {\n    return this.customData.serverResponse;\n  }\n\n  set serverResponse(serverResponse: string | null) {\n    this.customData.serverResponse = serverResponse;\n    if (this.customData.serverResponse) {\n      this.message = `${this._baseMessage}\\n${this.customData.serverResponse}`;\n    } else {\n      this.message = this._baseMessage;\n    }\n  }\n}\n\nexport const errors = {};\n\n/**\n * @public\n * Error codes that can be attached to `StorageError` objects.\n */\nexport enum StorageErrorCode {\n  // Shared between all platforms\n  UNKNOWN = 'unknown',\n  OBJECT_NOT_FOUND = 'object-not-found',\n  BUCKET_NOT_FOUND = 'bucket-not-found',\n  PROJECT_NOT_FOUND = 'project-not-found',\n  QUOTA_EXCEEDED = 'quota-exceeded',\n  UNAUTHENTICATED = 'unauthenticated',\n  UNAUTHORIZED = 'unauthorized',\n  UNAUTHORIZED_APP = 'unauthorized-app',\n  RETRY_LIMIT_EXCEEDED = 'retry-limit-exceeded',\n  INVALID_CHECKSUM = 'invalid-checksum',\n  CANCELED = 'canceled',\n  // JS specific\n  INVALID_EVENT_NAME = 'invalid-event-name',\n  INVALID_URL = 'invalid-url',\n  INVALID_DEFAULT_BUCKET = 'invalid-default-bucket',\n  NO_DEFAULT_BUCKET = 'no-default-bucket',\n  CANNOT_SLICE_BLOB = 'cannot-slice-blob',\n  SERVER_FILE_WRONG_SIZE = 'server-file-wrong-size',\n  NO_DOWNLOAD_URL = 'no-download-url',\n  INVALID_ARGUMENT = 'invalid-argument',\n  INVALID_ARGUMENT_COUNT = 'invalid-argument-count',\n  APP_DELETED = 'app-deleted',\n  INVALID_ROOT_OPERATION = 'invalid-root-operation',\n  INVALID_FORMAT = 'invalid-format',\n  INTERNAL_ERROR = 'internal-error',\n  UNSUPPORTED_ENVIRONMENT = 'unsupported-environment'\n}\n\nexport function prependCode(code: StorageErrorCode): string {\n  return 'storage/' + code;\n}\n\nexport function unknown(): StorageError {\n  const message =\n    'An unknown error occurred, please check the error payload for ' +\n    'server response.';\n  return new StorageError(StorageErrorCode.UNKNOWN, message);\n}\n\nexport function objectNotFound(path: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.OBJECT_NOT_FOUND,\n    \"Object '\" + path + \"' does not exist.\"\n  );\n}\n\nexport function bucketNotFound(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.BUCKET_NOT_FOUND,\n    \"Bucket '\" + bucket + \"' does not exist.\"\n  );\n}\n\nexport function projectNotFound(project: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.PROJECT_NOT_FOUND,\n    \"Project '\" + project + \"' does not exist.\"\n  );\n}\n\nexport function quotaExceeded(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.QUOTA_EXCEEDED,\n    \"Quota for bucket '\" +\n      bucket +\n      \"' exceeded, please view quota on \" +\n      'https://firebase.google.com/pricing/.'\n  );\n}\n\nexport function unauthenticated(): StorageError {\n  const message =\n    'User is not authenticated, please authenticate using Firebase ' +\n    'Authentication and try again.';\n  return new StorageError(StorageErrorCode.UNAUTHENTICATED, message);\n}\n\nexport function unauthorizedApp(): StorageError {\n  return new StorageError(\n    StorageErrorCode.UNAUTHORIZED_APP,\n    'This app does not have permission to access Firebase Storage on this project.'\n  );\n}\n\nexport function unauthorized(path: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.UNAUTHORIZED,\n    \"User does not have permission to access '\" + path + \"'.\"\n  );\n}\n\nexport function retryLimitExceeded(): StorageError {\n  return new StorageError(\n    StorageErrorCode.RETRY_LIMIT_EXCEEDED,\n    'Max retry time for operation exceeded, please try again.'\n  );\n}\n\nexport function invalidChecksum(\n  path: string,\n  checksum: string,\n  calculated: string\n): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_CHECKSUM,\n    \"Uploaded/downloaded object '\" +\n      path +\n      \"' has checksum '\" +\n      checksum +\n      \"' which does not match '\" +\n      calculated +\n      \"'. Please retry the upload/download.\"\n  );\n}\n\nexport function canceled(): StorageError {\n  return new StorageError(\n    StorageErrorCode.CANCELED,\n    'User canceled the upload/download.'\n  );\n}\n\nexport function invalidEventName(name: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_EVENT_NAME,\n    \"Invalid event n.97-24.53 95.094-.367 11.177 1.214 16.963 2.438 19.186 1.223 2.223 1.6 2.25 4.312 2.97 2.712.717 7.356.912 13 2.937 4.195 1.504 8.805 4.67 12.25 9.375 38.097 2.08 94.528 3.21 171.78-36.72 44.882-23.197 67.256-59.045 74.25-96.937 6.997-37.89-2.012-77.89-21.124-107.218-17.917-27.495-43.88-45.288-73.97-45.53zm64.187 69.44c25.656 51.76 6.995 94.552-63.844 126.218 35.36-38.065 64.82-79.05 63.845-126.22zm11.47 99C433.257 241.533 370.29 291.44 281 289.124c65.092-22.673 133.782-58.816 190.594-99.906zM200.06 302.562c-43.083 40.035-103.853 84.81-128.687 94.062-25.69 9.57-34.904.96-49.156 18.313-13.558 16.133 12.31 53.08 41.28 32.78-26.414 41.35 26.314 74.03 42.375 16.063 12.69-47.362 76.407-102.028 125.313-143.155l-.313-.688c-1.52-3.575-2.215-3.734-4.438-4.53-2.222-.798-6.236-1.084-11.468-2.47-4.804-1.27-10.963-4.467-14.907-10.375z"}}]})(props);
};
module.exports.GiChickenOven = function GiChickenOven (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M187.8 45.5s-12.6 6.61-25.3 16.33c-6.3 4.86-12.8 10.5-18 16.94-5.2 6.44-9.5 13.89-9.5 22.73 0 8.6 4.6 15.7 10 20.6 5.3 4.8 11.5 8.2 17.3 11.4 5.8 3.2 11.3 6.3 15 9.3 3.7 3 5.4 5.4 5.8 8.1 1.1 6.6-5.2 22.1-13.2 34.5-8.1 12.4-16.6 22.1-16.6 22.1l13.4 12s9.4-10.6 18.3-24.3c8.9-13.7 18.6-30.2 15.9-47.1-1.4-8.5-6.6-14.8-12.3-19.3-5.6-4.6-11.9-7.9-17.6-11.1-5.7-3.1-10.9-6.2-14-9-3.1-2.8-4-4.5-4-7.2 0-2.49 1.7-6.72 5.5-11.41 3.8-4.7 9.3-9.64 15-13.96 11.3-8.63 22.7-14.71 22.7-14.71zm90 32.43s-12.4 4.66-25.1 11.56c-6.3 3.45-12.8 7.42-18.1 12.11-5.4 4.7-10.6 10.4-10.6 18.9 0 8.2 5.7 14 11.1 17.5 5.4 3.4 11.4 5.8 17.3 8.1 5.8 2.2 11.4 4.5 15.1 6.6 3.7 2.2 4.7 3.9 4.7 4 .2.6-.2 3.7-2.5 7.8-2.2 4-6 8.8-9.9 13.1-7.9 8.7-16.4 15.6-16.4 15.6l11.2 14s9.4-7.5 18.5-17.4c4.5-5 9-10.5 12.4-16.6 3.3-6 6-12.8 4.3-20.5-1.8-7.8-7.7-12.3-13.3-15.6-5.6-3.2-11.8-5.5-17.6-7.8-5.7-2.3-11-4.5-14-6.5-2.3-1.4-2.8-2.1-2.9-2.3.2 0 1.1-2.4 4.4-5.4 3.7-3.2 9.2-6.7 14.9-9.8 11.3-6.16 22.9-10.53 22.9-10.53zm67.5 12.82c-3.7.69-7.8 4.37-10.9 10.65-3.1 6.3-4.6 14.5-4.1 20.2.1 1.1 4.1 8.2 9 13.3 5 5.1 9.9 8.9 9.9 8.9l4.5 3.4-10.6 51.3 14.3 4.4 22.1-42.2c-5.1-5.5-10.2-11.9-10.9-21-.5-7.6.6-15.7 3.4-23.4-6.3-1.7-7.8-5-10.1-8-2.5-3-4.9-6.4-7.3-9.37-2.4-3.01-4.9-5.62-6.8-6.96-1.8-1.33-2.3-1.21-2.5-1.21zm56.3 16.65c-3.7.7-7.8 4.3-10.9 10.6-3 6.3-4.6 14.5-4.1 20.3.1 1.1 4.1 8.2 9 13.3 5 5.1 9.9 8.9 9.9 8.9l4.5 3.4-10.7 51.4 14.3 4.5 25.8-49.3 3.7-1s9.4-2.8 19.2-7.4c4.9-2.3 9.8-5.1 13.3-7.9 3.6-2.9 5.5-5.6 5.8-6.9v-.1c1.5-5.2.4-13.5-3-20.6-3.5-7-9-12.3-13.8-13.8-.2-.1-.7-.2-2.8 1-2.1 1.2-5 3.6-8 6.4-3 2.9-6.1 6-9.8 8.7-3.6 2.7-8.7 5.8-15.3 4.1-6.6-1.6-8.1-5.1-10.5-8.1-2.5-3-4.9-6.4-7.3-9.4-2.4-3-4.9-5.6-6.8-6.9-1.8-1.4-2.3-1.2-2.5-1.2zM92.36 119.9s-12.5 5.4-25.21 13.5c-6.36 4.1-12.83 8.7-18.13 14.2-5.3 5.5-10.04 12-10.04 20.5 0 8.2 5.22 14.7 10.59 18.7 5.38 4 11.48 6.8 17.3 9.5 5.82 2.6 11.35 5.2 15.06 7.7 3.7 2.5 4.96 4.4 5.21 5.7.35 1.8-.3 6-2.69 11-2.38 4.9-6.16 10.6-10.15 15.7-7.97 10.2-16.5 18.2-16.5 18.2l12.34 13.2s9.37-8.8 18.35-20.4c4.49-5.7 8.94-12.2 12.21-19 3.3-6.8 5.7-14.2 4.1-22.1-1.5-8-7.18-13.4-12.81-17.2-5.64-3.8-11.88-6.6-17.61-9.2-5.73-2.6-10.95-5.2-14.02-7.5-3.06-2.3-3.39-3.2-3.39-4.3 0-.9 1.26-4.1 4.96-8 3.7-3.8 9.23-7.9 14.87-11.5 11.29-7.2 22.79-12.3 22.79-12.3zm238.54 93.6c-2.3 1.6-7.7 5.5-15.2 11.2 12 2.5 24.3 5.8 36.7 9.8 1.6-1.3 3-2.4 4.5-3.6-.5-4.2-1-7.5-1.3-9.7zm56.4 16.8c-4.5 3.2-19.6 14.2-39.2 31.3-22.8 19.8-48.2 45.6-58.3 66.1-7.6 15.4-16.3 34.2-20.6 52-4.3 17.8-4.1 33.7 3.3 44.8 4.2 6.3 10.7 8.3 20.4 8.1 9.7-.1 21.3-3.2 30.9-6.2 33.7-11 69-35.1 85-69.8 7.2-15.6 8.6-47.5 7.2-74.5-1.1-22-3.3-37.7-4.2-44zm-111.9 8.1c-1.1 0-2.3 0-3.4.1-38.3 2-82.1 9.5-119.7 25-37.7 15.4-68.95 38.5-84.12 71.2-5.49 11.8-5.15 27.7-.16 41.1 4.99 13.4 14.28 23.3 24.06 25.9 42.92 11.2 101.22 16 158.32 17-3.5-13.2-2.3-27.6.9-41.4-31.1 11.8-76.5 14.6-133.8-3.5l-8.5-2.7 2.6-8.5c7.4-25 30-57.7 66.8-74.6l7.6 16.4c-26.9 12.3-45.6 36.2-53.9 54.9 59.5 16.7 102.7 8 126.3-5.3 4.6-12.5 10.2-24.2 15.2-34.3 12.5-25.2 38.7-50.8 62.1-71.1-20.7-6-40.6-10-57-10.2zm158.9 49.3c1.1 26.4.3 55.9-9.1 76.5-9.4 20.3-23.9 37-40.8 50.3 7.9-.7 15.4-1.4 22.1-2.2 12.4-1.3 22.6-2.8 29.8-4.2 3.6-.8 6.5-1.5 8.4-2 .7-.3 1.1-.5 1.4-.7 12.1-15.1 23.8-29.4 31.6-44.2 7.3-14.2 11.3-28.6 9.4-46-4.1-2.4-24-13.7-52.8-27.5zM53.14 386.9c-5.4 2.4-10.12 4.8-14.04 7.3-10.89 6.9-14.66 13-14.66 17.3 0 4.3 3.77 10.4 14.66 17.3s27.79 13.6 48.95 19.3c42.35 11.2 101.85 18.4 167.45 18.4s125.1-7.2 167.4-18.4c21.2-5.7 38-12.4 48.9-19.3 10.9-6.9 14.7-13 14.7-17.3 0-3.7-2.9-8.8-10.7-14.6-5.5 7.2-11.2 14.2-16.8 21.2l-.3.5-.5.4c-3.2 3-5.3 3.3-8.2 4.2-2.8.9-6.2 1.7-10.2 2.5-8 1.6-18.6 3.1-31.3 4.5-16.1 1.8-35.6 3.4-57.1 4.6-7.4 3.5-14.8 6.4-22.1 8.8h-.1c-10.1 3.2-23 6.8-36 7-12 .3-25.4-3.1-33.9-13.7-60.6-.6-123.8-5.3-171.76-17.8-15.92-4.2-27.55-17-34.4-32.2z"}}]})(props);
};
module.exports.GiChicken = function GiChicken (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M365.852 31.858c-10.152 2.474-24.915 7.073-37.437 13.602-9.2 4.797-17.277 10.575-21.928 16.19-4.65 5.618-6.05 9.96-4.416 15.587l3.556 12.254-12.736-.76c-3.048-.183-4.944-.117-7.364-.262-2.42-.146-5.405-.706-8.27-1.87-3.86-1.568-9.082-4.65-16.085-8.91-.366 4.63-.58 10.108-.407 16.006.38 12.915 2.02 27.945 4.82 41.17 1.328 6.27 3.007 12.134 4.805 17.13 2.992-4.705 6.264-9.202 9.84-13.368 17.022-19.818 40.47-41.586 69.867-43.697 14.423-1.037 29.333 5.324 42.554 12.41 3.997-7.635 10.257-13.963 16.617-19.67 6.403-5.748 13.146-11.018 18.95-15.97-9.552-6.72-16.81-10.074-23.02-10.855-7.936-.998-16.028 1.45-28.835 8.828l-15.21 8.762 4.7-46.577zm-12.796 80.995a16.57 16.57 0 0 0-1.672.03c-20.817 1.494-41.72 19.098-57.5 37.47-13.842 16.117-23.36 41.13-28.65 61.556 6.866 1.127 14.21 2.21 21.564 2.43 10.95.33 20.46-1.593 25.334-5.83l7.04-6.114 5.862 7.25c4.956 6.128 10.802 14.087 14.32 23.476 1.78 4.75 2.88 10.128 2.698 15.607 12.487-2.64 23.93-7.162 28.884-12.86l5.256-6.043 6.614 4.52c10.006 6.838 19.827 14.582 26.634 25.236 1.033-3.752 1.935-7.666 2.416-11.75 1.503-12.738-.18-25.93-6.636-35.494-10.232-11.257-22.116-22.055-24.93-37.03-1.066-5.675.69-10.02 2.78-14.29 2.092-4.27 4.972-8.467 8.35-12.593 3.803-4.644 8.228-9.1 12.948-13.05-4.015-2.658-8.39-5.55-13.877-8.665-12.77-7.256-28.594-13.592-37.434-13.86zM48.52 128.626c-6.353-.037-9.976.466-9.976 1.576 2.82 12.857 7.998 26.53 15.432 39.48 26.005-3.718 53.01-5.705 80.652-5.488 26.75 8.66 54.68 16.02 80.83 25.338-25.477-4.52-50.737-6.842-75.512-7.3a489.987 489.987 0 0 0-11.82-.073c-28.5.16-56.26 2.772-82.938 7.17 4.785 32.48 20.097 79.06 50.397 120.476 32.95 45.036 82.958 84.022 156.976 94.457 58.185 8.202 107.473-4.926 132.47-31.346 12.5-13.21 19.395-29.548 19.23-49.768-.157-18.958-6.877-41.526-22.327-67.106-1.133-.884-2.3-1.766-3.52-2.654-13.164 10.368-31.666 13.752-47.895 15.322l-18.392 1.78 9.94-15.58c2.974-4.66 2.76-9.265.433-15.474-1.486-3.962-4.016-8.048-6.75-11.992-9.13 4.418-19.634 5.185-29.495 4.887-12.977-.392-25.546-2.913-33.66-4.262l-9.268-1.538 1.936-9.193c2.894-13.746 7.735-30.663 15.19-46.902-46.584-23.24-175.11-41.595-211.933-41.812zm303.762.088c8.852 0 16.186 7.384 16.186 16.213 0 8.83-7.334 16.213-16.186 16.213-8.85 0-16.187-7.384-16.187-16.213 0-8.83 7.336-16.213 16.187-16.213zm73.906 13.47l-1.707.936c-5.958 3.275-13.704 10.08-19.133 16.71-2.715 3.316-4.887 6.612-6.11 9.108-.885 1.807-1.032 3.154-1.13 3.35 1.295 5.8 10.486 16.914 20.966 28.522l.387.427.326.473a54.88 54.88 0 0 1 4.754 8.342c11.47.563 23.966-.753 38.652-3.727l-41.35-30.937s37.437.748 51.126-1.635c4.696-.818-25.494-22.228-46.78-31.57zM160.52 231.076l17.516 4.15c-1.628 6.866-6.334 11.36-11.355 15.008-5.02 3.65-10.874 6.607-17 9.354-5.37 2.408-10.923 4.598-16.195 6.698 17.247 7.16 39.738 12.514 57.944 7.756l8.135-2.127 2.672 7.975c2.102 6.27.8 12.92-1.97 18.097-2.766 5.176-6.815 9.438-11.452 13.343-4.408 3.713-9.428 7.075-14.636 10.11 1.512.4 2.75.78 4.413 1.185 16.154 3.923 39.21 7.99 62.21 9.678 22.997 1.688 46.086.824 61.544-4.053 7.728-2.44 13.347-5.8 16.605-9.553 3.26-3.753 4.8-7.815 4.16-14.64l17.922-1.678c1.02 10.888-2.2 20.873-8.49 28.12-6.29 7.245-15.014 11.835-24.78 14.917-19.536 6.163-44.068 6.615-68.28 4.837-24.213-1.778-47.956-5.964-65.14-10.137-8.59-2.087-15.446-4.112-20.384-6.105-2.47-.997-4.277-1.582-6.817-3.805-1.27-1.112-3.838-3.195-3.59-8.084.122-2.444 1.414-4.847 2.696-6.168 1.28-1.32 2.438-1.895 3.368-2.295 9.76-4.196 20.562-10.17 27.602-16.098a41.493 41.493 0 0 0 3.95-3.828c-28.726 2.026-57.113-10.163-73.773-20.45l-13.646-8.425 14.302-7.258c9.833-4.99 23.145-9.453 34.26-14.44 5.56-2.492 10.508-5.107 13.787-7.49 3.277-2.38 4.37-4.38 4.42-4.597zM132.378 373.31c-9.94 10.178-24.66 20.105-40.18 28.05-6.34-7.936-13.154-15.46-20.445-22.242L59.495 392.3c5.485 5.1 10.75 10.778 15.762 16.814-5.725 2.31-11.364 4.275-16.715 5.793l4.914 17.315c6.655-1.89 13.604-4.25 20.605-7.035-.004 16.89-1.79 35.74-6.532 48.816l16.92 6.14c3.645-10.05 5.755-21.453 6.826-32.9 4.775 8.44 9.016 16.875 12.606 24.934l16.443-7.326c-6.96-15.626-16.04-32.46-26.976-48.42 16.785-8.633 32.574-19.633 43.97-32.488a244.225 244.225 0 0 1-14.94-10.632zm301.435 35.127c-15.158.19-32.163 7.857-49.21 18.494a196.634 196.634 0 0 0-20.456 14.66c-6.71-5.158-13.73-10.692-20.86-16.23a1086.232 1086.232 0 0 0-7.88-6.062c-7.882 1.91-16.138 3.324-24.705 4.232 7.053 4.96 14.317 10.433 21.545 16.047 6.184 4.802 12.332 9.672 18.37 14.354-4.958 5.056-9.45 10.33-13.243 15.735l14.734 10.34c3.507-4.998 7.984-10.123 13.076-15.117 5.09 3.68 10.056 7.083 14.82 9.965l9.317-15.4a143.322 143.322 0 0 1-4.667-2.96c19.407-2.33 39.054-.35 52.653 2.676l3.91-17.57c-10.58-2.356-23.95-4.223-38.416-4.275l-.19.002c13.615-7.218 26.607-11.223 33.21-10.857l1-17.97a44.232 44.232 0 0 0-3.007-.063z"}}]})(props);
};
module.exports.GiChiliPepper = function GiChiliPepper (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M446.738 28.814c-25.117 13.687-48.889 42.68-61.957 71.809-7.818-2.893-16.676-4.618-25.513-4.545-14.73.121-29.385 5.227-39.008 18.168.886.005 1.774.018 2.666.05 12.22.443 24.958 3.41 37.304 8.102 22.98 8.734 45.207 23.286 58.29 41.83 12.723-30.603-.83-45.203-17.569-55.43 11.733-25.618 34.789-53.49 54.4-64.177zM319.824 132.261a58.819 58.819 0 0 0-6.894.35c-11.725 1.322-19.854 5.705-24.686 14.477-45.314 82.267-40.39 117.237-53.092 156.177-6.35 19.47-17.347 39.092-40.322 63.21-22.975 24.116-57.954 53.12-113.379 93.007-12.743 9.171-20.766 16.8-24.03 21.39-.686.967-.496.828-.773 1.417 2.1.465 6.218 1.262 13.534.709 9.923-.751 23.7-3.263 40.53-7.672 85.471-22.392 164.479-75.553 220.118-132.317 27.82-28.381 49.794-57.658 63.861-84.048 14.068-26.39 19.84-49.872 17.239-65.627-3.273-19.817-29.295-43.162-58.096-54.11-10.8-4.105-21.814-6.517-31.592-6.908a69.925 69.925 0 0 0-2.418-.055zm1.977 17.813c1.725.06 3.385.555 4.967 1.533-22.945 39.64-46.91 81.1-60.47 138.438-22.95-11.989 25.686-141.007 55.503-139.971z"}}]})(props);
};
module.exports.GiChimney = function GiChimney (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M130.9 176.8c-20.9 19.6-34.65 25.8-60.02 24.9-9.64 16.9-9.17 28.1-4.31 38.6 2.93 6.4 8.08 12.6 14.57 18.8H309.6c13.5-5.4 21.6-17.7 24.3-29.5-18.5 2.8-35 1.4-49-4.6-14.7-6.3-26.2-17.7-34.3-32.5-24.6.5-50-20.1-60.8-38.3 53.3 30 100.1 15.3 131.4 6.2-18.3 18.3-29.1 23.8-51.2 29.3 5.9 8.8 13.1 14.9 22 18.7 11.6 5 26.4 6.2 45.3 2.3l.1-.3.4.2c32.4 19 73.8 22.1 100.9 7.3 26.5-15.1 44.7-30.4 55.3-45.2V75.77c-22.6 14.04-48.9 21.81-73.1 18.99-29.2 20.14-67.3 30.44-103.8 31.04-37.3.6-73.8-17.1-99.5-39.02 33.8 13.82 65.2 21.62 99.2 21.02 27.4-.4 56.2-7.2 79.8-19.39-14.6-5.83-33.4-13.4-56.1-32.32 67.3 19.87 106.3 31.32 153.5-2.05 1.2-9.7-.7-22.02-1.8-31.17L18 23.19v66.75c14.13 16.06 84.3 17.66 126.5 8.63C109.7 113 59.91 122.1 29.79 112.9c-20.186 8-11.42 30.1-4.08 43.5 15.79 28.8 72.89 38.5 105.19 20.4zM73 277.1v62h238v-62zm48 80v30h30v-30zm48 0v30h94v-30zm-48 48v30h78v-30zm96 0v30h46v-30zm-96 48v30h30v-30zm48 0v30h94v-30z"}}]})(props);
};
module.exports.GiChipsBag = function GiChipsBag (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M132.684 31.388a1.443 1.443 0 0 0-.29.004c-.396.048-.768.25-1.398.609-1.26.719-3.215 2.597-5.039 5.484-3.648 5.776-6.593 15.148-7.516 22.34-2.004 15.623 3.42 23.692 13.293 31.436 5 3.92 11.236 7.328 17.914 10.515-3.23-13.668-3.189-27.344-3.732-38.859-.419-8.882-1.232-16.509-3.107-21.623-1.853-5.052-3.884-7.627-8.987-9.62-.472-.156-.833-.262-1.138-.286zm111.212 11.478c-27.446.122-54.797 1.187-81.492 2.78.891 5.354 1.23 10.856 1.492 16.423.048 1.01.092 2.025.137 3.037 21.693 20.288 34.01 21.811 44.826 20.485 5.516-.677 10.93-2.497 17.13-3.977.993-.237 2.029-.455 3.081-.658 8.481-8.258 19.868-14.662 33.342-20.033A61.785 61.785 0 0 1 287.7 56.56c8.175.303 15.944 2.17 22.854 5.03 6.499 2.69 12.318 6.169 17.218 10.23 2.24-.62 4.518-.928 6.819-.967 7.174-.12 14.565 2.29 21.66 5.385 11.352 4.952 22.62 12.632 31.791 20.908 2.124 1.917 4.14 3.82 6.033 5.737l16.018-3.11 2.63-1.925c13.21-9.668 22.782-20.853 30.01-31.409-56.662-17.009-121.396-23.16-186.43-23.564-4.136-.026-8.271-.028-12.406-.01zm-142.01 7.254a4102.267 4102.267 0 0 0-36.077 3.254c1.134 11.198 6.268 21.673 18.056 32.58l3.17 2.934 22.328 4.808c-6.756-9.505-10.64-21.648-8.777-36.162.309-2.406.74-4.894 1.3-7.414zm183.048 24.371c-5.166.056-10.503 1.019-15.856 3.153C255.233 83.162 245 89.696 239.15 96.478c-5.85 6.78-7.914 13.268-6.27 22.378.093.51.196 1.012.302 1.51l33.588 7.235 69.66-13.526c-4.783-5.828-9.006-12.019-12.248-18.79-2.489-5.199-10.313-12.84-20.512-17.061-5.1-2.111-10.69-3.475-16.533-3.702-.73-.028-1.465-.039-2.203-.03zm57.095 15.85c3.411 5.378 7.23 10.978 11.621 16.22a150.804 150.804 0 0 0 3.252 3.54l15.147-2.94c-7.09-5.78-15.437-11.126-22.996-14.424a45.357 45.357 0 0 0-7.024-2.396zm-174.496.594c.94 5.71 2.199 11.12 3.799 16.109l43.184 9.303a43.858 43.858 0 0 1 1.423-13.678 70.877 70.877 0 0 1-4.888.787c-11.8 1.447-26.322-.936-43.518-12.521zM91.93 108.356l-8.383 76.563 94.193 2.305c21.335-19.254 48.606-30.866 78.479-30.866 31.857 0 60.758 13.206 82.652 34.805l77.983 1.908-5.041-75.295-145.231 28.198zm164.289 66.002c-58.224 0-106.217 52.74-106.217 119.13 0 66.39 47.993 119.128 106.217 119.128 58.223 0 106.217-52.739 106.217-119.129 0-66.39-47.994-119.129-106.217-119.129zM75.785 202.733l-6.281 62.846C63.95 321.138 77.74 377.93 99.787 435.145l1.66 4.31-2.531 3.86c-7.597 11.588-19.783 21.862-33.562 31.42 14.767 1.264 29.76 2.284 44.917 3.102l22.924-29.006 14.121 11.16-14.927 18.89c14.169.58 28.459.997 42.832 1.278l1.113-25.775 17.984.777-1.093 25.283c16.038.191 32.158.21 48.296.127v-25.629h18v25.5c16.873-.173 33.736-.457 50.543-.818l-3.898-24.117 17.77-2.873 4.296 26.58c16.438-.401 32.687-.872 48.893-1.346l-13.9-23.219 15.445-9.246 19.074 31.867c16.498-.494 32.835-.987 48.902-1.44-12.73-11.767-25.39-24.23-32.433-39.46l-1.111-2.402.367-2.623s12.397-89.64 12.533-132.92c.073-23.34-2.226-55.719-5.145-87.25l-66.455-1.625c16.34 23.275 26.034 52.45 26.034 83.937 0 75.138-55.176 137.13-124.217 137.13-69.042 0-124.217-61.992-124.217-137.13 0-33.654 11.075-64.665 29.502-88.656zm237.53 41.409c6.184-.143 12.236 2.243 17.081 5.77 6.891 5.014 12.332 12.414 15.83 21.1 6.998 17.373 5.063 41.493-15.263 57.376-17.671 13.808-38.32 16.338-57.145 10.445a79.905 79.905 0 0 1-6.324-2.295c-12.764 3.93-27.601 9.065-42.97 9.707-16.562.692-34.526-5.338-46.34-23.398-5.325-8.14-10.014-18.55-11.545-29.149-.766-5.3-.78-10.759 1.148-16.115 1.929-5.356 6.402-10.43 12.367-12.79l.145-.056.146-.052a32.522 32.522 0 0 1 10.29-1.885c6.457-.127 12.625 1.658 17.83 4.586 7.93 4.46 14.327 11 20.703 17.789.692.737 1.384 1.481 2.076 2.222 29.671 1.337 40.027-5.507 47.39-13.54 3.755-4.098 6.69-8.995 10.442-14.147 3.752-5.152 8.697-10.777 16.314-13.93a21.561 21.561 0 0 1 7.824-1.638zm1.013 17.925a4.529 4.529 0 0 0-1.955.346c-3.299 1.365-5.61 3.723-8.648 7.895-3.039 4.171-6.427 9.934-11.721 15.71-8.033 8.765-20.623 16.386-41.225 18.745 7.154 6.034 14.434 10.94 21.575 14.23l13.15 4.242c11.839 2.249 22.923-.082 34.375-9.03 14.157-11.063 14.339-24.833 9.652-36.468-2.343-5.817-6.195-10.7-9.726-13.271-2.318-1.687-4.071-2.343-5.477-2.399zm-122.54 18.5c-1.556.022-3.21.362-5.126 1.028-1.288.523-1.468.776-1.94 2.086-.49 1.365-.757 4.062-.269 7.443.977 6.761 4.824 15.8 8.793 21.867 8.623 13.182 17.991 15.796 30.527 15.272 6.35-.266 13.304-1.726 20.454-3.641-11.335-8.295-20.188-18.721-28.08-27.125-6.088-6.482-11.659-11.753-16.407-14.424-2.374-1.335-4.366-2.162-6.426-2.422a10.956 10.956 0 0 0-1.527-.084z"}}]})(props);
};
module.exports.GiChisel = function GiChisel (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M426.2 30.65L405 51.82l55.2 55.08 21.2-21.1-55.2-55.15zM173.6 55.12c-13.3 19.1-31.3 28.5-50 31.6-12.3 2-24.91 1.5-37.41.4 10.5 10.6 19.91 22.18 24.21 36.18 36.7.2 69.2-9.9 98.6-36.28-8.9-13.4-21.3-23.1-35.4-31.9zm218.7 9.47L231.6 225.3c0 10.1-.1 20.4-1.5 30-1.1 7.8-3.1 15.4-7 21.9l11.7 11.7c6.5-3.9 14.1-5.9 21.9-7 9.6-1.4 19.9-1.5 30-1.5l160.7-160.7-55.1-55.11zM188.6 268.2l-21.2 21.2 55.2 55.2 21.2-21.2-55.2-55.2zm-24.8 43c-28.8 11.1-48.7 30.5-59.4 41.2l-79.14 79.2c-.71.7-1.72 2.6-1.98 6.2-.26 3.7.28 8.5 1.52 13.5 2.48 9.9 8.22 20.5 11.79 24.1 3.55 3.6 14.15 9.3 24.08 11.8 4.97 1.2 9.83 1.8 13.45 1.5 3.61-.2 5.59-1.3 6.3-2l79.18-79.2c10.7-10.6 30.1-30.5 41.2-59.3l-37-37zM314 375.6c-17.2 13-25.1 26.3-27 37.2-2.1 11.1 1.5 19.7 8.2 25.5l40.2 13.7c-3.9-9.7-6.8-19.9-5.8-30.8.8-9.2 4.8-18.5 12.6-26.2 3.2-3.2 7-6 11.3-8.7L314 375.6zm85.4 40.5c-17.7 1.8-36.1 5-52 9.7.2 7.8 3.6 17.2 7.9 27.1 22.7-9.5 54.8-17.6 87.9-19.6-15.9-8.6-28.4-13.7-43.8-17.2z"}}]})(props);
};
module.exports.GiChocolateBar = function GiChocolateBar (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M296.385 64.965s-17.449 15.537-26.69 12.29c-3.338-1.172-6.104-4.45-8.353-8.49L244.398 85.71l84.582 84.584 60.258-60.258-14.955-14.955c-3.33 1.341-6.57 2.1-9.422 1.842-10.105-.913-23.527-19.315-23.527-19.315S325.559 92.59 316.4 90.602c-10.594-2.3-20.015-25.637-20.015-25.637zm-64.713 33.47l-60.254 60.256L256 243.273l60.254-60.253zm170.293 24.327l-60.258 60.258 84.584 84.582 60.256-60.256zM158.69 171.418l-44.802 44.803 100.488 68.675L243.273 256zm170.29 24.328L268.726 256l84.582 84.582 60.255-60.254zM78.491 213.828L48.848 278.02l85.732.11 48.123 93.856 72.02-17.418 49.988 79.266 29.115-45.504zM256 268.727l-26.504 26.503 100.488 68.676 10.598-10.597zM34.107 296l-8.654 8.654 181.893 181.893 67.047-67.047-28-44.4-73.239 17.712-49.58-96.697L34.777 296z"}}]})(props);
};
module.exports.GiChoice = function GiChoice (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M400 25c-48.2 0-87 38.84-87 87 0 48.2 38.8 87 87 87s87-38.8 87-87c0-48.16-38.8-87-87-87zm40.5 34.01l15 9.98-70.1 105.11-55.8-55.7 12.8-12.8 40.2 40.3 57.9-86.89zM304.7 156.1L186.4 238H32v36h154.4l118.3 81.9c5.1-11 12.1-21 20.5-29.5L223.6 256l101.6-70.4c-8.4-8.5-15.4-18.5-20.5-29.5zM400 313c-48.2 0-87 38.8-87 87s38.8 87 87 87 87-38.8 87-87-38.8-87-87-87zm-41.6 32.6l41.6 41.6 41.6-41.6 12.8 12.8-41.6 41.6 41.6 41.6-12.8 12.8-41.6-41.6-41.6 41.6-12.8-12.8 41.6-41.6-41.6-41.6 12.8-12.8z"}}]})(props);
};
module.exports.GiChoppedSkull = function GiChoppedSkull (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M214.475 29.258L161.77 81.96c16.936 20.538 28.36 42.014 27.927 65.403-.452 24.518-14.472 48.98-43.79 73.528l5.99 17.694c71.606-19.315 130.42-50.42 170.478-101.428l-107.9-107.898zm-57.424 77.54L21.24 211.07v51.764l149.748-115.11c.008-.236.02-.472.026-.706.24-13-4.75-26.334-13.96-40.22zm276.18 3.19l-36.34 84.352 70.038-48.074-33.7-36.278zm-97.543 40.48c-42.955 53.685-105.04 86.063-177.787 105.852l14.08 41.59c18.005.184 38.99-3.06 60.754-9.574.94-1.584 1.904-3.157 2.924-4.705 23.146-35.122 66.755-62.113 114.967-66.79 8.404-8.93 16.06-18.51 22.73-28.705l-37.668-37.666zm29.745 84.34c-47.143 0-92.654 26.458-114.168 59.106-10.757 16.324-15.532 33.768-12.805 50.416 2.726 16.648 12.827 33.23 34.772 48.188l6.118 4.168c13.21 6.097 27.513 9.598 40.26 10.794l-38.04 5.555-20.562 43.145c11.34 9.924 24.012 17.9 37.492 23.927l10.53-45.236 18.202 4.24-11.09 47.646c13.566 4.21 27.673 6.614 41.858 7.203v-52.015h18.688v51.74c13.787-.973 27.45-3.665 40.56-8.07l-10.443-46.578 18.236-4.09 9.77 43.57c11.56-5.517 22.482-12.496 32.422-20.94l-21.39-44.884-35.71-5.213c10.606-.995 22.29-3.588 33.524-7.94l12.13-5.782c24.48-15.652 35.938-32.698 39.337-49.32 3.44-16.818-1.263-34.156-12.35-50.5-22.174-32.69-70.172-59.13-117.34-59.13zm-50.62 84.174c19.09 0 34.567 15.475 34.567 34.565 0 19.09-15.48 34.566-34.567 34.566-19.09 0-34.565-15.476-34.565-34.566 0-19.09 15.474-34.565 34.565-34.565zm105.547 0c19.09 0 34.564 15.476 34.564 34.565 0 19.09-15.476 34.566-34.565 34.566-19.09 0-34.565-15.476-34.565-34.566 0-19.09 15.474-34.565 34.564-34.565zm-233.737 3.747l-108.115.26 24.996 43.334 83.12-43.595zm23.623 15.715l-56.36 83.56 44.692 15.724 11.668-99.285zm107.7 9.703c-5.715 0-10.147 4.433-10.147 10.147 0 5.715 4.432 10.146 10.145 10.146 5.714 0 10.147-4.43 10.147-10.145s-4.43-10.147-10.147-10.147zm99.28 0c-5.715 0-10.146 4.432-10.146 10.147 0 5.714 4.433 10.146 10.147 10.146 5.713 0 10.146-4.43 10.146-10.145 0-5.714-4.432-10.147-10.146-10.147zm-49.835 14.297l23.046 53.694c-11.686 7.06-33.125 7.013-44.42 1.95l21.375-55.645z"}}]})(props);
};
module.exports.GiChopsticks = function GiChopsticks (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M253.8 19.46h-1.1c-1.8.1-3.5.34-5.1.85-4.2 1.3-7.4 3.84-9.6 9.49l-14.5 39.6 33.8 12.74 16.4-38.93c2.2-5.65 1.6-9.64-.6-13.3-2.2-3.8-6.3-7.04-11.2-8.87-2.6-1-5.4-1.53-8.1-1.59zM217.4 86.2 82.21 455.4l15.84 5.9L250.4 98.63zm189.8 11.6c-4.3.2-8.1 1.85-11.8 6.7l-24.5 34.6 29.3 20.8 26.1-33.4c3.7-4.8 4.1-8.9 3-12.9-1.2-4.3-4.2-8.4-8.5-11.4-3.7-2.67-8-4.21-11.9-4.4h-1.7zm-46.7 55.9L132.1 476l13.7 9.7 243.3-311.6z"}}]})(props);
};
module.exports.GiChurch = function GiChurch (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M163.5 22.754l-68.178 170.16h136.356L163.5 22.754zm-73.328 186.16v280.332H131.5v-72c20.034-22.093 41.16-25.61 64 0v72h40V208.914H90.172zm33.328 16.332h16v32h-16v-32zm32 0h16v32h-16v-32zm32 0h16v32h-16v-32zm64 47.715v216.286h48V324.264c-2.595-2.982-13.49-15.47-26.64-29.56-7.4-7.93-15.062-15.85-21.22-21.622-.055-.052-.084-.07-.14-.12zm-177.328 1.267c-5.95 5.658-13.084 13.03-20.033 20.476-13.15 14.09-24.045 26.58-26.64 29.56v164.983h46.672v-215.02zm89.328 7.35c30.933 0 56.186 24.12 56.186 53.67 0 29.547-25.253 53.67-56.186 53.67s-56.186-24.123-56.186-53.67c0-29.55 25.253-53.67 56.186-53.67zm-9 16.614c-4.782 1.046-9.23 2.898-13.172 5.415l13.172 12.957v-18.37zm18 0v19.847l15.14-13.088c-4.407-3.203-9.544-5.536-15.14-6.76zm-42.61 16.605c-2.68 4.026-4.588 8.57-5.53 13.45h19.2l-13.67-13.45zm68.485 2.025l-13.217 11.426h17.48c-.785-4.078-2.24-7.923-4.263-11.426zM315.5 330.246v30h156.27l-30-30H315.5zm-190.135 16c.993 3.174 2.404 6.17 4.176 8.932l10.33-8.932h-14.505zm59.31 0l11.278 11.096c2.486-3.335 4.422-7.07 5.682-11.096h-16.96zM154.5 354.75l-13.662 11.813c4.064 2.68 8.68 4.65 13.662 5.738v-17.55zm18 1.965V372.3c4.084-.892 7.924-2.373 11.414-4.357L172.5 356.715zm143 21.53v110h169v-110h-169zm25 23h18v32h-18v-32zm32 0h18v32h-18v-32zm32 0h18v32h-18v-32zm32 0h18v32h-18v-32z"}}]})(props);
};
module.exports.GiCigale = function GiCigale (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M45.32 99.5c-7.3 0-12.6 1.7-15.7 4.2-4.7 4-7.5 11.4-4.7 26.3 6.5 34.2 30.5 54.7 66.4 69.1 5.9 2.3 12.08 4.5 18.38 6.4 3.3 0 6.6 0 10.2.1 5.4.1 11.3.5 17.5 1 21.7 1.9 46.9 6.5 70.7 15.8 1.1-3 2.6-5.8 4.6-8.3 0-1.3 0-2.6.1-4-16.4-21.6-47.1-47.4-77.5-68.2-31.4-21.5-63.98-38-76.68-40.8-3.6-.8-7-1.3-10-1.5-1.1-.1-2.2-.1-3.3-.1zm421.38 0c-1.1 0-2.2 0-3.3.1-3 .2-6.3.7-10 1.5-12.7 2.8-45.2 19.3-76.7 40.8-30.4 20.8-61.1 46.6-77.5 68.2.1 1.4.1 2.7.1 4 2 2.5 3.5 5.3 4.6 8.3 23.8-9.3 49-13.9 70.7-15.8 6.2-.5 12-.9 17.5-1 3.6-.1 7-.1 10.2-.1 6.4-1.9 12.6-4.1 18.4-6.4 35.9-14.4 59.9-34.9 66.4-69.1 2.8-14.9 0-22.3-4.7-26.3-3.1-2.5-8.4-4.2-15.7-4.2zm-271.1 32.2c0 11.6 5.5 21.8 12.5 31.1 3.6 4.8 7.6 9.5 11.9 14 2.5-5.1 5.9-10.2 10.5-15.1-3-3.3-5.7-6.5-8-9.6-5.8-7.9-8.9-14.8-8.9-20.4zm102.8 0c0 5.6-3.1 12.5-8.9 20.4-2.3 3.1-5 6.3-8 9.6 4.6 4.9 8 10 10.5 15.1 4.3-4.5 8.3-9.2 11.9-14 7-9.3 12.5-19.5 12.5-31.1zM256 162.5c-.3.1-.6.3-1.3.9-2 1.6-5.2 4.7-9.4 9-12.3 12.3-14.2 23.2-14.5 36.1h50.4c-.3-12.9-2.2-23.8-14.5-36.1-4.2-4.3-7.4-7.4-9.4-9-.7-.6-1-.8-1.3-.9zm-142.5 61.2c-12.9.1-22.78 1.4-26.38 2.4-4.6 1.4-4.8 2.4-5 3.2-.2.8-.1 3.6 2.4 7.8 5 8.5 17.98 20.5 34.08 29.6 16.1 9.2 35.3 15.7 52.6 16.1 11.3.3 21.7-1.8 30.6-7.5 2-8 5-15.7 9-23-1.8-3.5-3.2-7.2-3.9-11.1-23.2-9.8-49.1-14.8-71.1-16.7-5.8-.5-11.3-.7-16.6-.8zm279.2 0c-5.2.1-10.8.3-16.6.8-22 1.9-47.8 6.9-71 16.7-.7 3.9-2.1 7.6-3.9 11.1 4 7.3 7 15 9 23 8.9 5.7 19.3 7.8 30.6 7.5 17.3-.4 36.5-6.9 52.6-16.1 16.1-9.1 29.1-21.1 34-29.6 2.5-4.2 2.7-7 2.5-7.8-.3-.8-.4-1.8-5.1-3.2-3.7-1.1-13.5-2.3-26.4-2.4zM226 226.5c-3.2 5.1-2.8 11.7 1.3 18.5 4.8 8 14.5 14.9 28.7 14.9s23.9-6.9 28.7-14.9c4.1-6.8 4.5-13.4 1.3-18.5zm-2.3 40.8c-9.3 21.4-8.8 47.9-1.9 72 7.3 25.5 22 47.4 34.2 56.2 12.2-8.8 26.9-30.7 34.2-56.2 6.9-24.1 7.4-50.6-1.9-72-8.4 6.5-19.5 10.6-32.3 10.6-12.8 0-23.9-4.1-32.3-10.6zm-25.2 35.2c-7.8 2.5-17 5.5-27.7 9.4l-6 2.2v6.3c0 7.9-.9 24.9-3.8 41.3-2.8 16.4-8.6 32.5-14.2 38l12.8 12.8c11.5-11.6 16-29.8 19.2-47.7 2.6-14.8 3.4-28.1 3.7-37.8 6.3-2.2 11.9-4.1 17.2-5.8-.8-6.2-1.2-12.4-1.2-18.7zm115 0c0 6.3-.4 12.6-1.2 18.7 5.3 1.8 10.8 3.6 17.1 5.8.3 9.7 1.2 23.1 3.8 37.8 3.1 17.9 7.7 36.1 19.2 47.7l12.8-12.8c-5.6-5.5-11.4-21.6-14.3-38-2.9-16.5-3.8-33.4-3.8-41.3v-6.3l-6-2.2c-10.7-3.8-19.8-6.8-27.6-9.4z"}}]})(props);
};
module.exports.GiCigar = function GiCigar (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M356.022 27.541c-43.9.028-111.558 28.053-110.32 71.936 1.261 44.656 116.215 66.754 116.215 66.754s-57.956 31.231-54.701 57.48c6.09 49.118 101.218 36.19 125.531 79.3 18.501 32.808 16.192 99.727 2.216 112.971 34.537-17.716 63.839-83.723 52.243-128.476-9.39-36.24-82.42-33.313-87.506-70.402-6.125-44.662 87.029-65.718 78.658-110.014-9.032-47.796-73.694-79.58-122.336-79.549zM30.42 83.834c-3.89.095-5.436.99-6.276 1.83-.84.84-1.735 2.385-1.83 6.276 2.113 24.907 20.582 54.074 31.67 71.31l16.52-66.074C57.55 91.46 44.728 83.638 30.419 83.834zm56.373 22.399L67.54 183.235c12.125 17.145 26.832 36.244 44.072 57.095l26.99-98.965c-17.471-12.944-34.274-24.722-51.81-35.132zm67.248 46.941l-28.346 103.934c4.426 5.18 9.05 10.495 13.774 15.875l11.783-11.784a82.612 82.612 0 0 1-3.334-8.377c-4.674-14.021-4.768-28.777 4.92-38.464 15.746-10.961 32.396-8.198 46.842-1.586l11.783-11.784c-20.611-18.104-39.793-34.043-57.422-47.814zm73.043 57.648l-11.285 11.286c6.027 4.215 11.965 9.194 17.648 14.877s10.664 11.622 14.88 17.65l11.284-11.285zm-61.518 16.264c-2.809 2.81-4.086 9.498-.57 20.045 3.516 10.547 11.56 23.472 23.197 35.11 11.637 11.636 24.563 19.683 35.11 23.199 10.547 3.515 17.236 2.236 20.045-.573 2.809-2.809 4.088-9.497.572-20.045-3.516-10.547-11.562-23.472-23.2-35.109-11.636-11.637-24.562-19.682-35.109-23.197-6.035-1.687-15.118-4.156-20.045.57zm106.332 29.432l-14.236 14.236a82.562 82.562 0 0 1 3.332 8.375c4.674 14.022 4.77 28.78-4.918 38.467-9.688 9.688-24.445 9.592-38.467 4.918a82.562 82.562 0 0 1-8.375-3.332l-14.238 14.238c18.655 19.456 32.69 33.568 50.783 51.66l38.787-116.365a2334.082 2334.082 0 0 0-12.668-12.197zm-111.31 20.8l-11.285 11.286 32.527 32.527 11.285-11.285c-6.027-4.216-11.967-9.196-17.65-14.879-5.683-5.683-10.662-11.621-14.877-17.648zm138.287 5.399l-38.865 116.594 53.652 53.652 38.89-116.672c-17.612-17.557-36.8-36.92-53.677-53.574zm67.906 67.803l-28.592 85.779 57.186-57.186zm32.922 48.195l-61.207 61.207 12.727 12.729 61.209-61.21zm11.81 33.443l-39.574 39.575 12.729 12.728 39.574-39.574z"}}]})(props);
};
module.exports.GiCigarette = function GiCigarette (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M224 32c9.036 24.71 106.984 58.72 156.096 64-37.096 7.89-53.042 10.52-57.545 32-13.076 62.384 191.477 60.478 115.73 152.223 69.11-15.788 57.922-116.197 15.887-129.84-27.237-8.84-63.75-11.67-47.75-38.383C425.962 88.104 503.57 59.74 448 32zM28.096 292v64h87v-64zm105 0v64h274v-64zm292 0v64h16v-64zm34 0v64h17v-64z"}}]})(props);
};
module.exports.GiCircleCage = function GiCircleCage (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M256.05 20.283c-130.19 0-235.93 105.74-235.93 235.928 0 130.19 105.74 235.93 235.93 235.93 130.188 0 235.927-105.74 235.927-235.93 0-130.188-105.74-235.927-235.928-235.927zm0 18.696c120.084 0 217.23 97.146 217.23 217.23 0 33.477-7.556 65.166-21.048 93.47-.143.3-.28.604-.425.904-.673 1.395-1.363 2.78-2.065 4.158-.07.137-.135.276-.205.412-.157.307-.324.61-.482.914-.587 1.132-1.178 2.263-1.784 3.383-.475.882-.968 1.756-1.457 2.632-16.388 29.34-39.376 54.475-66.973 73.4-.794.544-1.59 1.086-2.39 1.618-.522.35-1.05.692-1.577 1.037-.933.61-1.866 1.215-2.807 1.808-.308.195-.62.385-.93.578-2.525 1.576-5.072 3.1-7.646 4.565l.008.006c-29.154 16.603-62.537 26.643-98.154 28.138v-.007c-6.226.266-12.462.265-18.688 0v.004c-115.716-4.912-207.84-100.082-207.84-217.02 0-120.084 97.148-217.23 217.233-217.23zm-.066 18.186c-3.11 0-6.222.075-9.33.22l.002 51.344c-8.04-.473-16.048-1.56-23.955-3.255-.595-12.692-11.074-22.8-23.913-22.8-6.91 0-13.134 2.93-17.504 7.614-5.884-3.153-11.613-6.704-17.146-10.65-5.946 3.1-11.772 6.52-17.446 10.266 8.928 7.01 18.375 13.04 28.2 18.092.714 12.58 11.14 22.564 23.897 22.564 6.85 0 13.023-2.882 17.387-7.494 10.04 2.302 20.242 3.73 30.482 4.266v48.436c-24.646-.303-49.197-1.807-72.945-4.5-2.235-11.778-12.58-20.688-25.01-20.688-9.724 0-18.173 5.454-22.462 13.47-14.295-2.777-28.034-6.06-41.074-9.816-3.295 5.515-6.298 11.155-9.012 16.897 15.228 4.59 31.32 8.52 48.034 11.79 3.002 10.72 12.838 18.587 24.515 18.587 8.88 0 16.694-4.547 21.25-11.438 56.1 6.688 116.216 6.68 172.304-.025 4.554 6.905 12.377 11.465 21.267 11.465 11.696 0 21.545-7.89 24.53-18.635 16.618-3.26 32.623-7.173 47.77-11.736-2.713-5.74-5.716-11.38-9.01-16.896-12.972 3.736-26.633 7.002-40.845 9.768-4.295-7.993-12.734-13.428-22.444-13.428-12.42 0-22.757 8.898-25.002 20.664-23.82 2.71-48.45 4.22-73.174 4.523v-48.436c10.304-.54 20.57-1.978 30.67-4.305 4.366 4.633 10.553 7.53 17.422 7.53 12.797 0 23.25-10.043 23.91-22.677 9.735-5.026 19.1-11.016 27.95-17.965-5.672-3.745-11.496-7.165-17.44-10.268-5.484 3.912-11.16 7.433-16.99 10.563-4.365-4.64-10.557-7.54-17.43-7.54-12.825 0-23.297 10.085-23.915 22.757-7.977 1.72-16.062 2.823-24.176 3.3l-.002-51.34c-3.117-.148-6.238-.224-9.358-.224zm.006 156.727c-23.483 0-42.326 18.84-42.326 42.324 0 23.488 18.84 42.328 42.326 42.328 23.483 0 42.324-18.84 42.324-42.328 0-23.484-18.837-42.324-42.324-42.324zm-123.408 12.734c-12.642 0-23.3 8.46-26.646 20.02h-48.58c-.29 6.228-.292 12.465 0 18.69h49.738c4.252 9.868 14.063 16.778 25.488 16.778 11.427 0 21.235-6.91 25.486-16.777h37.59c-.45-2.977-.685-6.023-.685-9.12 0-3.256.264-6.45.76-9.57h-36.506c-3.346-11.562-14.005-20.02-26.645-20.02zm247.064 0c-12.64 0-23.3 8.458-26.646 20.02h-36.754c.496 3.12.76 6.314.76 9.57 0 3.098-.236 6.143-.686 9.12h37.838c4.25 9.867 14.06 16.778 25.488 16.778 11.426 0 21.236-6.91 25.487-16.78h49.48c.29-6.225.29-12.462-.002-18.69h-48.32c-3.345-11.56-14.003-20.018-26.644-20.018zm-16.12 78.205c-11.026 0-20.412 7.008-23.954 16.813-25.412-2.935-51.62-4.488-77.885-4.686-1.877.175-3.775.276-5.697.276-1.92 0-3.82-.1-5.695-.275-26.182.2-52.31 1.74-77.647 4.657-3.55-9.788-12.93-16.78-23.943-16.78-13.715 0-24.894 10.846-25.437 24.43-16.388 3.234-32.176 7.105-47.127 11.612 2.712 5.737 5.713 11.372 9.005 16.884 14.103-4.064 29.046-7.557 44.6-10.473 4.66 5.2 11.427 8.474 18.96 8.474 10.258 0 19.094-6.07 23.127-14.81 24.33-2.828 49.526-4.404 74.822-4.714v48.444c-9.78.512-19.523 1.826-29.125 3.95-4.387-5.517-11.15-9.058-18.745-9.058-13.222 0-23.943 10.722-23.943 23.945 0 .173.01.343.013.513-9.815 5.053-19.254 11.082-28.173 18.086 5.673 3.745 11.496 7.162 17.44 10.265 5.92-4.227 12.06-8.002 18.38-11.317 4.273 3.967 9.993 6.395 16.283 6.395 12.19 0 22.245-9.11 23.744-20.893 7.96-1.716 16.027-2.808 24.124-3.285l.002 51.36c6.226.29 12.462.292 18.688 0l-.002-51.36c8.176.48 16.322 1.585 24.36 3.33 1.518 11.76 11.564 20.848 23.737 20.848 6.252 0 11.94-2.398 16.205-6.322 6.263 3.295 12.352 7.042 18.222 11.233 5.944-3.103 11.768-6.522 17.44-10.268-8.85-6.946-18.21-12.934-27.942-17.96.006-.208.016-.415.016-.624 0-13.222-10.718-23.944-23.94-23.944-7.615 0-14.394 3.56-18.78 9.1-9.664-2.148-19.473-3.48-29.318-3.994v-48.444c25.382.31 50.664 1.895 75.07 4.74 4.04 8.726 12.867 14.782 23.113 14.782 7.515 0 14.267-3.256 18.928-8.434 15.472 2.907 30.34 6.385 44.375 10.428 3.292-5.512 6.29-11.148 9.002-16.887-14.872-4.48-30.573-8.332-46.867-11.556-.52-13.605-11.707-24.478-25.438-24.478z"}}]})(props);
};
module.exports.GiCircleClaws = function GiCircleClaws (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M229.832 24.166C169.087 23.868 108.817 50.45 68.12 101.72c-70.4 88.68-55.578 217.634 33.1 288.032 1.39 1.104 2.817 2.195 4.26 3.27.286.303.575.618.86.916-.118-.177-.23-.355-.348-.532 5.055 3.744 10.36 7.29 15.504 10.475-15.073-15.153-27.356-32.234-36.783-50.52-26.065-64.267-15.236-129.285 32.96-161.24 58.434-38.76 151.118-15.176 215.06 51.675-3.942-5.902-8.413-12.113-13.016-17.834-63.682-79.235-166.368-109.6-229.362-67.817-1.072.71-2.122 1.442-3.158 2.185 5.43-9.825 11.74-19.333 18.953-28.418 65.31-82.274 181.148-100.695 268.36-46.756-5.63-5.66-11.95-11.454-18.358-16.54-37.412-29.7-81.992-44.23-126.32-44.448zm160.617 82.277c45.104 42.614 67.29 102.166 63.886 161.223-5.603 29.51-20.302 57.597-44.16 80.174-58.436 55.31-151.12 57.978-215.063 9.238 3.944 4.784 8.413 9.73 13.016 14.145 49.375 47.45 122.196 58.87 181.786 33.818-65.28 61.195-164.122 72.983-242.467 27.83 5.804 5.48 12.3 11.075 18.863 15.96 90.822 67.61 219.257 48.797 286.867-42.03 67.61-90.822 48.795-219.255-42.028-286.866-6.56-4.887-13.782-9.5-20.703-13.49z"}}]})(props);
};
module.exports.GiCircleForest = function GiCircleForest (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M256 16C123.6 16 16 123.6 16 256s107.6 240 240 240 240-107.6 240-240S388.4 16 256 16zm0 18c122.7 0 222 99.3 222 222 0 46.7-14.4 89.9-38.9 125.7-16.6-19.3-26.2-36.8-38.8-60.2l48.4 8.7c-23.2-22-44.2-50.3-57.3-74.6l33.1 1.5c-28.3-19.2-44.2-36.7-58.7-60.4-2.6 4.8-4.9 9.2-7.1 13.6-12.3-13.8-23.5-28.4-31.7-43.6 7.6 1.5 19.3 9 34.6 3.6-16.8-15.9-33.4-37-42.9-54.7 5.3 3.1 17.5 4.3 26.3 1.6-20.6-13.9-28-27.77-38.6-44.97-9.3 17.2-22.6 34.77-38.6 49.27 6.5.8 18.2-3.5 25.3-8.6-3.9 21.3-19.6 44-38.2 58.6 10.5-1.7 19.8.4 31.9-5.8-13.9 21.4-30.4 39.2-50.7 57.9 18.1 2.3 42 4.3 65 5.1l-.3 27.6c9.3 2.1 19.7 3.1 28.3 1.4l27-2.2c-10.1 28.6-32.6 53.6-58.2 73.7l50.2-8c-16.4 25.3-36 49.3-58.8 71.9-9.1-11.4-17.3-23.1-23.7-35 14.1 3.8 27.1 4 39.5 1.9-23.2-22-42.9-45.6-56-69.9l44.4 5.1c-28.3-19.2-45.5-46.9-60-70.6-10 18.6-24.1 40.6-40.3 58.9-19.3-19.5-36.1-40.5-47.4-61.5l33.1 1.5c-28.3-19.2-42.9-38.2-57.4-61.9-12.8 23.7-23.99 43.4-46.02 63.3 14.6 2.1 24.62-2.5 35.02-6.6-10 28.6-34.29 56.1-59.89 76.2 20.12 2.9 37.33-4.1 53.49-11.1-12.33 25.4-27.24 47.7-47.98 69.4C41.95 323.5 34 290.7 34 256c0-122.7 99.3-222 222-222zm-55.3 37.67c-8.4 13.54-16.8 18.84-33 29.83l19-.9c-7.5 14-19.6 30.3-32.8 42.8l27.7-5c-8.7 16.2-15 27.5-28.7 41.6 7 2.9 20.4 5.2 36.1 6.5l-1.1 27.9 17.4-1.9-.7-25.1c16.2.7 33.2.3 47.3-1.5-16-14.8-29.4-30.7-40.4-47.6l28.8 4.6c-14.7-11.6-27.6-28-33.4-44.37l18.1 3.57c-12.6-11.39-17-16.89-24.3-30.43zM348.9 228.4c-5.5 9.2-11.9 17.9-21.4 27l-5.4-26.2c9.7.1 18.9-.2 26.8-.8zM154 283.8l33.3 6c-2.6 2.7-5.3 5.3-8 7.8l38.3-5c-6 16.9-16.3 32.3-29.1 46.2-14-17.3-23-33.7-34.5-55zm55.6 73.7c-19.1 29.5-34.2 56.4-62.1 82.2 23.2 2.9 52.5 5.1 81.1 6l-.3 30.6c-70.1-8.7-130.05-50.1-164.13-108.4 16.54 1.2 33.75 1.5 50.43 1l-1.1 39.5 34.9 2.1-7.1-42.9c22-3.5 51.8.1 68.3-10.1zm214.9 43.1c-7.9 9.2-16.6 17.8-25.9 25.6l-4.3-21.6c11-1.1 21.3-2.4 30.2-4zm-124.3 5.7c21.4 1.4 44.8 1.4 67 .3l-.5 41.9c-30.5 17.6-65.6 28.1-103 29.4l-6.6-31.8c31.9-.1 59.8-2.3 72.9-7.7-10-10.2-20.2-21-29.8-32.1z"}}]})(props);
};
module.exports.GiCircleSparks = function GiCircleSparks (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M20.78 26.78c64.677 55.957 77.348 94.384 60.564 122.876 7.63-3.893 15.673-6.72 24.094-8.375-20.88 26.902-34.827 59.457-39.157 94.94-14.255-1.084-27.752-2.986-39.874-5.782 14.74 7.424 27.45 15.042 38.563 23.125-.068 2.083-.126 4.18-.126 6.28 0 68.626 35.813 128.96 89.75 163.344-4.345 10.808-11.01 21.467-20.438 32.813 11.536-7.713 26.68-14.666 43.313-20.313 24.644 11.384 52.065 17.75 80.968 17.75 16.69 0 32.885-2.11 48.343-6.093.406 14.503-.08 31.072-1.436 50.125 36.338-88.305 101.418-88.803 181-30.25-64.756-68.336-59.635-134.57-4.75-218.845-10.708 5.996-20.526 11.01-29.563 15.094.023-1.206.033-2.416.033-3.626 0-43.22-14.223-83.164-38.22-115.406 18.41-29.47 40.28-49.624 65.5-65.125-53.525 15.19-87.8 7.226-130.312-22.75 16.446 15.918 26.668 33.556 32.47 53.874-33.47-27.61-76.354-44.218-123.063-44.218-23.376 0-45.805 4.134-66.562 11.75 1.722-13.855 6.552-27.61 14.438-41.75C156.097 67.09 98.216 75.61 20.78 26.78zm104.095 48.782C137.17 75.62 152 81.5 162.313 91.22c13.75 12.957 14.257 27.825 1.156 33.218-13.103 5.392-34.876-.73-48.626-13.688s-14.257-27.827-1.156-33.22c3.275-1.347 7.09-1.987 11.187-1.968zm133.563 9.344c50.846 0 96.557 21.633 128.5 56.188 1.667 19.017.924 40.15-1.282 63.97 5.51-15.935 11.532-30.1 18.063-42.783 18.732 27.863 29.655 61.414 29.655 97.564 0 3.784-.14 7.526-.375 11.25-80.95 27.872-84.574-38.09-98.344-141.625-23.972 143.895-73.68 188.616-175.375 185.5 91.03 29.217 138.164 30.064 146.345 113.342-15.008 4.183-30.833 6.438-47.188 6.438-17.69 0-34.758-2.634-50.843-7.5 15.95-3.575 32.116-5.82 46.906-6.375-51.752-8.56-83.084-24.313-96.906-62.97 3.475 17.54 4.497 32.484 2.25 46.47-43.702-29.84-73.13-78.987-76.063-135.25 22.45 21.294 36.885 46.538 49 80.188-11.563-57.488 17.535-92.766 79.064-127.97C175.184 232.57 127.964 238.29 85 237.19c4.827-37.463 21.455-71.18 46.063-97.313 34.22 2.712 73.92 23.22 119.03 67.22-36.212-42.28-55.61-76.564-58.53-108.97 20.597-8.515 43.173-13.22 66.875-13.22zm66.906 197.813c30.63 0 68.568 26.42 84.72 59 16.15 32.58 4.408 59-26.22 59-30.63 0-68.568-26.42-84.72-59-16.15-32.58-4.41-59 26.22-59z"}}]})(props);
};
module.exports.GiCircle = function GiCircle (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M256 23.05C127.5 23.05 23.05 127.5 23.05 256S127.5 488.9 256 488.9 488.9 384.5 488.9 256 384.5 23.05 256 23.05zm0 17.9c118.9 0 215.1 96.15 215.1 215.05S374.9 471.1 256 471.1c-118.9 0-215.05-96.2-215.05-215.1C40.95 137.1 137.1 40.95 256 40.95z"}}]})(props);
};
module.exports.GiCirclingFish = function GiCirclingFish (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M443.9 30.89c-15.7 2.5-30.9 5.3-44 9.58-13.5 4.4-24.9 10.12-33.7 18.09 17.2 3.33 34.3 8.43 50.1 15.3.1-.58.3-1.16.4-1.73 1.9-7.79 6-14.79 10.8-21.53 4.9-6.76 10.7-13.35 16.4-19.71zM317.8 71.93c-19.2.15-37.3 3.03-52 8.63-20.9 7.95-34.6 20.54-38.8 38.94-.9 3.8.2 13.1 5 23.5s12.9 22.1 24 32.5c22.1 20.8 55.5 36.7 100.3 29.9 20.5-3.1 37.4 3.2 47.2 16 9.8 12.9 13.2 30.5 13.4 50.3.5 32.7-8.1 72.3-18.9 109.2 77.8-53.4 109.2-156.9 77.4-231.8-17.5-41.1-75.9-69.75-132.7-75.89-7-.77-14.1-1.17-21-1.27h-3.9v-.01zM61.39 84.51c-1.86 22.09-.41 44.59 2.78 66.19 10.85-12 23.14-23 36.73-32.6-13.59-7.7-26.79-18.81-39.51-33.59zm240.01 2.15a9.875 10.38 69.37 0 1 .1 0 9.875 10.38 69.37 0 1 9.3 5.94 9.875 10.38 69.37 0 1-5.8 13.1 9.875 10.38 69.37 0 1-13.4-5.1 9.875 10.38 69.37 0 1 5.8-13.11 9.875 10.38 69.37 0 1 4-.83zm36 41.44c27.8 5.3 58.8 9.2 83.5 26.3 24.7 17.1 40.9 47.8 38.9 99.8l-18-.6c1.9-48.3-11.4-70.7-31.1-84.4-19.8-13.7-48.3-18.1-76.7-23.5l3.4-17.6zm-160.6 1.8c-14.6 2.6-29.3 3-43.8.2-5.1 17-9.8 34.7-13.3 51.9 20.4-14.7 40-32.6 57.1-52.1zm-62.8 1.2C36.23 184.5 4.78 288 36.58 362.9c17.52 41.2 75.92 69.8 132.62 75.9 28.4 3.1 56.1.6 77-7.3 20.9-8 34.6-20.6 38.8-39 .9-3.8-.2-13.1-5-23.5s-12.9-22.1-24-32.5c-22.1-20.8-55.5-36.7-100.4-29.9-20.4 3.1-37.3-3.2-47.1-16-9.8-12.9-13.2-30.5-13.4-50.3-.5-32.7 8.1-72.3 18.9-109.2zm163.8 15.1a9.875 10.38 69.37 0 1 9.3 6 9.875 10.38 69.37 0 1-5.7 13.1 9.875 10.38 69.37 0 1-13.4-5.2 9.875 10.38 69.37 0 1 5.7-13 9.875 10.38 69.37 0 1 4.1-.9zm87 76.4c-1.8.1-3.8.3-5.8.6-15.3 2.3-29.6 2.2-42.8.3 8.4 19 26 34.7 45.5 49-.8-6.8-1.6-13.9-1.7-21.2-.1-9.2 1.1-19.1 4.8-28.7zm-214.5 16.9c.8 6.8 1.6 13.9 1.7 21.2.1 9.2-1.1 19.1-4.8 28.7 1.8-.1 3.8-.3 5.8-.6 15.3-2.3 29.6-2.2 42.8-.3-8.4-19-26-34.7-45.5-49zm-98.12 18.3l17.98.6c-1.85 48.3 11.4 70.7 31.14 84.4 19.8 13.7 48.3 18.1 76.7 23.5l-3.4 17.6c-27.8-5.3-58.8-9.2-83.5-26.3-24.7-17.1-40.92-47.8-38.92-99.8zM392.3 330c-20.4 14.7-40 32.6-57.1 52.1 14.6-2.6 29.3-3 43.8-.2 5.1-17 9.8-34.7 13.3-51.9zm-157.6 15.9a9.875 10.38 69.37 0 1 9.4 5.9 9.875 10.38 69.37 0 1-5.8 13.1 9.875 10.38 69.37 0 1-13.4-5.1 9.875 10.38 69.37 0 1 5.8-13.1 9.875 10.38 69.37 0 1 4-.8zm213.1 15.4c-10.8 12-23.1 23-36.7 32.6 13.6 7.8 26.8 18.8 39.5 33.6 1.9-22.1.4-44.5-2.8-66.2zm-236.9 44.2a9.875 10.38 69.37 0 1 .1 0 9.875 10.38 69.37 0 1 9.3 5.9 9.875 10.38 69.37 0 1-5.8 13.1 9.875 10.38 69.37 0 1-13.4-5.1 9.875 10.38 69.37 0 1 5.8-13.1 9.875 10.38 69.37 0 1 4-.8zM95.7 438.2c-.1.5-.3 1.1-.4 1.7-1.9 7.8-5.95 14.8-10.8 21.5-4.87 6.8-10.62 13.3-16.32 19.7 15.62-2.5 30.82-5.3 43.92-9.6 13.5-4.4 24.9-10.1 33.7-18-17.2-3.4-34.3-8.5-50.1-15.3z"}}]})(props);
};
module.exports.GiCircuitry = function GiCircuitry (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M413.72 19.395v98.64l-46.116 46.117-34.198-34.2-6.607 6.61-141.52 141.516 113.513 113.51-52.775 52.773.002 50.31h18.687v-42.568l47.3-47.3 21.4 21.4 148.122-148.124-60.165-60.164 67.447-67.45V19.395h-18.687v123.33l-61.975 61.975-27.332-27.333 51.59-51.59V19.395H413.72zM19.36 30.303V48.99h186.607l44.254 44.254c-2.56 4.393-4.032 9.496-4.032 14.947 0 16.422 13.312 29.736 29.732 29.736s29.732-13.314 29.732-29.735c0-16.42-13.312-29.73-29.732-29.73-4.143 0-8.088.85-11.672 2.382l-50.54-50.54H19.36zm0 55.478v18.69l131.126.003 44.254 44.254c-2.56 4.392-4.035 9.496-4.035 14.947 0 16.42 13.312 29.732 29.732 29.732s29.733-13.312 29.733-29.732-13.312-29.733-29.732-29.733c-4.144 0-8.088.85-11.672 2.382l-50.54-50.54H19.362zm83.386 55.482l-83.385.002v18.69l75.646-.003 44.254 44.26c-2.56 4.39-4.033 9.496-4.033 14.946 0 16.42 13.312 29.733 29.732 29.733s29.73-13.313 29.73-29.734c0-16.42-13.31-29.734-29.73-29.734-4.145 0-8.09.85-11.675 2.383l-50.54-50.543zm230.66 15.12L455.1 278.08 333.406 399.77 211.71 278.08l121.696-121.695zm-1.254 27.388l-94.574 94.574 95.012 95.015 13.215-13.214-81.797-81.8 81.36-81.362-13.216-13.214zm-312.79 21.558v51.207l160.13 160.13v78.005h18.69V384.146L19.362 205.328zm346.51 8.397L352.66 226.94l51.48 51.482-51.77 51.77 13.218 13.214 64.982-64.984-64.695-64.697zm-29.93 33.16c-17.45 0-31.592 14.147-31.592 31.594 0 17.445 14.143 31.59 31.59 31.59 17.45 0 31.593-14.145 31.593-31.59 0-17.45-14.143-31.595-31.592-31.595zM19.36 295.35v51.207l94.886 94.88v53.233h18.688v-85.75L19.362 295.35zm427.378 73.154c-16.42 0-29.732 13.312-29.732 29.732s13.312 29.735 29.732 29.735c3.994 0 7.802-.794 11.28-2.222l36.62 36.615v-26.427l-22.402-22.4c2.688-4.47 4.237-9.704 4.237-15.3 0-16.42-13.314-29.732-29.735-29.732zM19.36 386.19V437.4l31.294 31.29-.002 25.982H69.34l.006-58.496L19.36 386.19zm371.902 37.796c-16.42 0-29.733 13.312-29.733 29.733 0 16.42 13.31 29.73 29.732 29.73 3.513 0 6.882-.612 10.01-1.73l12.955 12.95h26.43l-24.58-24.578c3.104-4.697 4.917-10.322 4.917-16.373 0-16.422-13.312-29.734-29.732-29.734z"}}]})(props);
};
module.exports.GiCircularSaw = function GiCircularSaw (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M256 16v72H88l48 48L16 256h72v168l48-48 120 120v-72h168l-48-48 120-120h-72V88l-48 48L256 16zm0 120c66.274 0 120 53.726 120 120s-53.726 120-120 120-120-53.726-120-120 53.726-120 120-120zm1.406 72.03A48 48 0 0 0 208 256a48 48 0 0 0 96 0 48 48 0 0 0-46.594-47.97z"}}]})(props);
};
module.exports.GiCircularSawblade = function GiCircularSawblade (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M226.25 21.22c-7.37-.076-14.458.815-21.594 2.936 29.88 18.046 40.87 41.507 35.03 63.063-45.987-37.932-112.6-41.75-146.592-5.845 34.904.688 55.595 15.218 61.312 36.813-58.69-9.694-118.192 20.31-129.656 68.312 30.896-17.035 56.737-14.552 72.438 1.75-55.758 20.907-92.336 76.467-78.25 123.813 18.253-30.226 41.895-41.334 63.656-35.032-38.078 45.996-42.39 112.556-6.438 146.595.694-35.202 15.48-56.406 37.375-61.906-9.707 58.698 19.74 118.19 67.75 129.655-17.033-30.896-14.553-56.737 1.75-72.438 20.867 55.836 76.43 92.94 123.814 78.844-30.186-18.228-41.28-41.916-35.03-63.655 45.984 37.86 112.595 41.724 146.56 5.844-34.904-.69-56.188-15.188-61.905-36.783 58.698 9.71 118.19-20.332 129.655-68.343-30.69 16.922-56.674 14.852-72.406-1.156 55.868-20.85 92.945-77.005 78.842-124.407-18.036 29.867-41.514 41.448-63.062 35.626 37.86-45.985 41.132-112.625 5.25-146.594-.688 34.905-15.22 55.627-36.813 61.344 9.71-58.7-20.3-118.19-68.312-129.656 16.923 30.69 14.82 56.674-1.188 72.406-17.744-47.38-60.633-80.79-102.187-81.187zm28.875 82.124c40.494-.113 81.018 15.362 111.97 46.312 48.312 48.312 58.91 119.93 31.374 178.406 10.386-48.018-9.547-107.827-55.75-154.03-46.205-46.205-106.014-66.138-154.033-55.75 21.016-9.896 43.722-14.875 66.438-14.938zm.813 55.812c25.955.08 51.88 10.1 71.718 29.938 31.206 31.206 38.067 77.45 20.28 115.22 6.71-31.015-6.188-69.658-36.03-99.502-29.842-29.843-68.453-42.71-99.47-36 12.985-6.113 26.97-9.322 41-9.625.84-.018 1.664-.033 2.5-.03zm-142.813 34.688c-10.387 48.018 9.11 108.233 55.313 154.437 46.203 46.205 106.45 65.732 154.468 55.345-58.476 27.536-130.5 17.343-178.812-30.97-48.314-48.31-58.505-120.335-30.97-178.81zm157.688 10.844l3.812 3.812 33.594 33.594 3.81 3.812-1.405 5.22L298.345 297l-1.408 5.22-5.218 1.405-45.876 12.28-5.22 1.408-3.81-3.813-33.595-33.594-3.814-3.812 1.406-5.22L213.125 225l1.375-5.22 5.22-1.405 45.874-12.28 5.22-1.407zm-107.188 12.937c-6.71 31.016 5.875 69.908 35.72 99.75 29.843 29.842 68.764 42.46 99.78 35.75-37.77 17.786-84.296 11.206-115.5-20-31.204-31.206-37.784-77.73-20-115.5zm101.594 7.906l-35.47 9.5-9.47 35.5 25.907 25.908 35.5-9.47 9.5-35.468-25.968-25.97z"}}]})(props);
};
module.exports.GiCityCar = function GiCityCar (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M188.287 169.428c-28.644-.076-60.908 2.228-98.457 8.01-4.432.62-47.132 24.977-58.644 41.788-11.512 16.812-15.45 48.813-15.45 48.813-3.108 13.105-1.22 34.766-.353 36.872 1.17 4.56 7.78 8.387 19.133 11.154C35.84 295.008 53.29 278.6 74.39 278.574c22.092 0 40 17.91 40 40-.014 1.764-.145 3.525-.392 5.272.59.008 1.26.024 1.82.03l239.266 1.99c-.453-2.405-.685-4.845-.693-7.292 0-22.09 17.91-40 40-40 22.092 0 40 17.91 40 40 0 2.668-.266 5.33-.796 7.944l62.186.517c1.318-22.812 6.86-46.77-7.024-66.72-5.456-7.84-31.93-22.038-99.03-32.66-34.668-17.41-68.503-37.15-105.35-48.462-28.41-5.635-59.26-9.668-96.09-9.765zm-17.197 11.984c5.998.044 11.5.29 16.014.81l7.287 48.352c-41.43-5.093-83.647-9.663-105.964-27.5.35-5.5 7.96-13.462 16.506-16.506 4.84-1.724 40.167-5.346 66.158-5.156zm34.625.348c25.012.264 62.032 2.69 87.502 13.94 12.202 5.65 35.174 18.874 50.537 30.55l-6.35 10.535c-41.706-1.88-97.288-4.203-120.1-6.78l-11.59-48.245zM74.39 294.574a24 24 0 0 0-24 24 24 24 0 0 0 24 24 24 24 0 0 0 24-24 24 24 0 0 0-24-24zm320 0a24 24 0 0 0-24 24 24 24 0 0 0 24 24 24 24 0 0 0 24-24 24 24 0 0 0-24-24z"}}]})(props);
};
module.exports.GiClamp = function GiClamp (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M112 25c-13 0-27.05 6.78-37.64 17.36C63.78 52.95 57 67 57 80v192c0 13 6.78 27.1 17.36 37.6C84.95 320.2 99 327 112 327h311v-30H128c-11 0-20.9-5.2-28.36-12.6C92.22 276.9 87 267 87 256V96.1c0-11.03 5.21-21.01 12.63-28.45C107 60.22 117 55 128 55h295V37.56L397.9 25H112zm217 48v14h62V73h-62zm-18.5 32l-10 30h119l-10-30h-99zm-10 112l10 30h99l10-30h-119zm28.5 48v14h62v-14h-62zm0 80v30h62v-30h-62zm-73 32c-2.6 0-5.9 1.8-9.3 7.3-3.3 5.6-5.7 14.1-5.7 23.7s2.4 18.1 5.7 23.7c3.4 5.5 6.7 7.3 9.3 7.3 2.6 0 5.9-1.8 9.3-7.3 3.3-5.6 5.7-14.1 5.7-23.7s-2.4-18.1-5.7-23.7c-3.4-5.5-6.7-7.3-9.3-7.3zm208 0c-2.6 0-5.9 1.8-9.3 7.3-3.3 5.6-5.7 14.1-5.7 23.7s2.4 18.1 5.7 23.7c3.4 5.5 6.7 7.3 9.3 7.3 2.6 0 5.9-1.8 9.3-7.3 3.3-5.6 5.7-14.1 5.7-23.7s-2.4-18.1-5.7-23.7c-3.4-5.5-6.7-7.3-9.3-7.3zm-175.8 20c.5 3.5.8 7.2.8 11 0 3.1-.2 6.1-.5 9h143c-.3-2.9-.5-5.9-.5-9 0-3.8.3-7.5.8-11H288.2zm56.8 38v36h30v-36h-30z"}}]})(props);
};
module.exports.GiClapperboard = function GiClapperboard (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M419.682 26.2l-8.66 2.452L32.915 135.81 55.27 214.7l386.77-109.608L419.683 26.2zm-12.41 22.224l9.074 32.014-41.086-22.942 32.013-9.072zM350.77 64.438l56.8 31.714-37.084 10.51-56.8-31.715 37.084-10.51zm-61.577 17.45l56.803 31.716-37.084 10.51-56.8-31.718 37.08-10.51zm-61.574 17.45l56.802 31.715-37.084 10.51-56.803-31.715 37.084-10.51zm-61.577 17.45l56.803 31.716-37.084 10.51-56.8-31.717 37.08-10.51zm-61.574 17.45l56.8 31.715-37.083 10.51-56.802-31.715 37.084-10.51zm-45.86 26.227l41.085 22.94-32.01 9.072-9.074-32.012zM55 215v274h402V215H55zm18 18h33.273L73 266.273V233zm58.727 0h38.546l-46 46H85.727l46-46zm64 0h38.546l-46 46h-38.546l46-46zm64 0h38.546l-46 46h-38.546l46-46zm64 0h38.546l-46 46h-38.546l46-46zm64 0h38.546l-46 46h-38.546l46-46zM439 245.727V279h-33.273L439 245.727zM73 297h366v174H73V297zm248.635 46.57l-192.44.703.067 18 192.44-.703-.067-18zM130.7 391.33l-.134 17.998 92.707.703.137-18-92.71-.7zm127.155.7l-.2 18 63.913.702.2-17.998-63.913-.703z"}}]})(props);
};
module.exports.GiClarinet = function GiClarinet (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M37.1 28.45c-.27 29.1 9.07 46.67 25.07 67.1l9.66-9.6 14.73 14.75-11.46 11.4 9.81 12.6 31.19-31.25-12.2-10.1-7.83 7.8-14.74-14.7 6.37-6.4zm92.2 78.25L98.11 138l14.09 14.1 31.3-31.2zm25.7 25.7-31 31 10 10c10-4 22-1 30 7 15 14 37 37 37 37l29-11zm12 20c3 2 3 7 0 10s-7 3-10 0-3-8 0-10c3.2-2.8 7.3-2.6 10 0zm22 21c3 3 3 8 0 11-3 2-8 2-11 0-3-3-3-8 0-11 3.4-2.8 8.1-2.8 11 0zM141.3 184c-2.9 0-5.5.5-7.9 1.3l76.8 76.7 53.2-17.2s28.4 27.6 44 42.7c6 5.9 14.9 7.7 22.8 4.8-27.1-26.8-55.3-54-82.8-80.9l-53 17.1s-24.2-24.2-38.2-38.1c-4-4.1-9.3-6.3-14.9-6.4zm68.7 10.4c3 3 3 8 0 11s-8 3-11 0c-2-3-2-8 0-11 3.4-2.8 8.1-2.8 11 0zm34.2 31.3 9.5 9.3-40.2 12.6-9.3-9.3zm14.8 31.7-30 11 9 9 73 79 38-37-18-16-1 1c-11 3-22 0-31-7-15-16-40-40-40-40zm3 13c3 3 3 8 0 11s-8 3-11 0-3-8 0-11c4.3-2.7 7.1-2 11 0zm22 22c3 3 3 8 0 11s-7 3-10 0-3-8 0-11c3.3-1.9 7.1-1.9 10 0zm23 23c3 3 3 8 0 11-3 2-8 2-11 0-3-3-3-8 0-11 3.4-2.8 8.1-2.8 11 0zm52.7 15.5-37.3 37.3 14.1 14.1 37.3-37.2zm26.2 26.3-37.3 37.3c19.2 19.2 14.6 55.7 14.6 55.7s11.6-17.5 35.7-41.5l.5-.6c24.5-24.5 42.2-36.2 42.2-36.2s-36.5 4.5-55.7-14.7zm85.5 14.5c-9.4 0-35.6 19.4-62.3 46.1-30.4 30.4-50.7 59.5-45.2 64.9 5.4 5.5 34.5-14.8 64.9-45.2 30.4-30.4 50.7-59.5 45.2-64.9-.6-.6-1.4-.9-2.6-.9z"}}]})(props);
};
module.exports.GiClassicalKnowledge = function GiClassicalKnowledge (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M104 37.25V215.1c3.6 9.9 10 14.1 20.9 17 11.4 2.9 27.1 3.1 43.9 3.1 16.8 0 34.6-.1 51.4 3.6 9.5 2.1 18.7 5.7 26.8 11.2V55.43c-7.2-9.9-15.9-13.69-27.3-15.09-12.2-1.49-27.3.55-42.9 2.83-15.7 2.28-31.9 4.81-47.7 2.88-8.7-1.07-17.3-3.87-25.1-8.8zm304 0c-7.8 4.93-16.4 7.73-25.1 8.8-15.8 1.93-32-.6-47.7-2.88-15.6-2.28-30.7-4.32-42.9-2.83-11.4 1.4-20.1 5.19-27.3 15.09V250c8.1-5.5 17.3-9.1 26.8-11.2 16.8-3.7 34.6-3.6 51.4-3.6 16.8 0 32.5-.2 43.9-3.1 10.9-2.9 17.3-7.1 20.9-17V37.25zM130.8 80.03h89.4v18h-89.4v-18zm161 0h89.4v18h-89.4v-18zm-161 44.47h89.4v18h-89.4v-18zm161 0h89.4v18h-89.4v-18zm-161 46.8h89.4v18h-89.4v-18zm161 0h89.4v18h-89.4v-18zM96 249c-17.3 0-29.19 7.3-37.77 18.9C49.66 279.4 45 295.7 45 312s4.66 32.6 13.23 44.1C66.81 367.7 78.7 375 96 375c22 0 35.7-7.1 44.4-14 8.6-6.9 11.5-13 11.5-13l2.5-5h203.2l2.5 5s2.9 6.1 11.5 13c8.7 6.9 22.4 14 44.4 14 17.3 0 29.2-7.3 37.8-18.9 8.5-11.5 13.2-27.8 13.2-44.1s-4.7-32.6-13.2-44.1c-8.6-11.6-20.5-18.9-37.8-18.9-22 0-35.7 7.1-44.4 14-8.6 6.9-11.5 13-11.5 13l-2.5 5H154.4l-2.5-5s-2.9-6.1-11.5-13c-8.7-6.9-22.4-14-44.4-14zm4.6 21.9c.9 0 1.9 0 2.9.1 13.5 1.2 28.2 8.9 44.1 24h216.8c15.9-15.1 30.6-22.8 44.1-24 14.2-1.2 26.6 5.8 33.1 16.2 13.1 20.9 7 53.9-20.6 72.3l-10-15c20.4-13.6 22.3-36.6 15.4-47.7-3.5-5.6-8.1-8.6-16.4-7.8-8.2.7-20.6 6.3-35.6 21.4l-2.7 2.6H140.3l-2.7-2.6c-15-15.1-27.4-20.7-35.6-21.4-8.26-.8-12.9 2.2-16.37 7.8-6.92 11.1-4.99 34.1 15.37 47.7l-9.99 15c-27.65-18.4-33.72-51.4-20.64-72.3 5.72-9.1 15.9-15.6 27.92-16.3h2.31zM169 361v126h30V361h-30zm48 0v126h30V361h-30zm48 0v126h30V361h-30zm48 0v126h30V361h-30z"}}]})(props);
};
module.exports.GiClawHammer = function GiClawHammer (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M215.97 27.813c-2.218.04-4.35.177-6.407.375l-.532.062c-2.774.266-5.796 1.01-9.124 1.844-4.418 1.11-8.096 2.607-11.125 4.406l77.782 59.313 7.375 5.656-5.593 7.405-13.72 18.156 67.595 51.626 14.217-18.812 9.47-12.53 6.5 14.342 19.656 43.47 60.593-80.095-47.187-7.124-15.533-2.312 9.47-12.563 14.28-18.843-67.593-51.624L310.78 50.78l-5.03 6.657-7.188-4.25c-28.635-16.917-58.02-25.157-80.343-25.374-.757-.008-1.512-.014-2.25 0zM453 127.124l-71.47 94.438 34.564 26.187c44.24-20.22 64.01-52.594 71.312-94.625l-34.406-26zm-193.688 25.03c-27.17 33.09-55.308 64.706-82.812 96.22l47.406 39.875c23.11-35.343 46.336-71.61 71.938-108.22l-36.53-27.874zM164.25 262.47c-11.355 13.115-22.564 26.254-33.5 39.5l48.375 52.717c11.707-16.6 23.107-33.515 34.438-50.687l-49.313-41.53zm-45.438 54.124c-7.884 9.808-15.59 19.71-23.093 29.72l33.468 73.842c13.586-16.22 26.434-32.893 38.843-49.937l-49.218-53.626zm-35.75 47.03c-12.108 16.978-23.57 34.335-34.124 52.282L98.53 454.47c5.882-6.166 11.622-12.4 17.22-18.72l-32.688-72.125zm-43.437 68.688c-5.185 9.492-10.105 19.145-14.75 29l37.375 28.313c7.976-7.11 15.672-14.348 23.125-21.72l-45.75-35.592z"}}]})(props);
};
module.exports.GiClawSlashes = function GiClawSlashes (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M182.338 22.55c152.455 20.22 254.7 176.264 228.928 258.163-34.76-89.215-143.516-189.588-300.207-196.15C255.855 103.772 355.365 245.5 342.92 329.856c-9.85.97-20.79.927-32.852-.24-41.436-84.32-146.004-172.382-292.437-178.513 142.546 18.907 241.2 156.557 232.36 241.316-15.664-.633-33.447-3.34-53.48-8.46 18.37 8.188 35.514 14.817 51.502 20.067-10.614 44.085-55.285 69.374-144.93 46.47C250 515.968 319.647 483.338 328.736 419.743c56.24 1.254 85.915-24.86 92.856-63.008 164.112-19.88 36.806-322.627-239.254-334.185zm132.808 318.083c7.97 2.704 15.666 5.077 23.07 7.11-3.122 7.893-7.546 14.993-13.35 21.095-2.393-9.222-5.635-18.663-9.72-28.205z"}}]})(props);
};
module.exports.GiClawString = function GiClawString (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M274.447 19.12c-17.958.18-36.188 2.602-54.342 7.466-9.843 2.637-19.214 6.007-28.287 9.8l5.29 19.74c2.59-1.316 5.35-2.385 8.26-3.165 2.847-.762 5.707-1.216 8.546-1.382 19.872-1.16 38.653 11.795 43.994 31.73.475 1.77.816 3.546 1.057 5.32 87.235-15.12 173.745 20.262 226.34 87.056C457.39 80.406 369.778 18.164 274.447 19.12zm-57.27 51.056c-.696-.017-1.398-.003-2.103.04-1.612.102-3.242.364-4.87.8-13.016 3.488-20.6 16.627-17.11 29.656.5 1.862 1.2 3.61 2.066 5.232H195.213c13.762 0 27.248 1.195 40.37 3.46 4.52-5.764 6.334-13.51 4.27-21.22-2.865-10.687-12.22-17.714-22.675-17.968zm-21.968 54.418c-10.19-.002-20.113.828-29.858 2.142v20.46c2.836-.596 5.772-.915 8.78-.915 23.58 0 42.895 19.326 42.895 42.91 0 1.825-.127 3.62-.35 5.384 88.18 7.97 162.592 64.54 196.11 142.674-2.736-117.953-99.018-212.654-217.576-212.654zm-21.08 40.38c-13.476 0-24.202 10.73-24.202 24.217 0 4.034.963 7.817 2.668 11.144 2.23.514 4.457 1.06 6.672 1.652 8.99 2.41 17.71 5.322 26.158 8.672 7.707-4.027 12.91-12.076 12.91-21.467 0-13.487-10.73-24.215-24.205-24.215zm-49.503 49.383l-5.268 19.72c.133.008.266.01.4.017 2.84.166 5.7.62 8.55 1.383 22.777 6.103 36.43 29.767 30.327 52.548-.473 1.764-1.062 3.466-1.737 5.116 83.235 30.547 140.54 104.665 152.614 188.944 28.2-114.796-40.39-231.314-155.084-262.045-9.838-2.637-19.902-4.422-29.803-5.683zm-8.13 38.334c-10.454.256-19.81 7.283-22.675 17.97-1.054 3.934-1.09 7.877-.28 11.563 3.34 1.69 6.667 3.472 9.972 5.38 6.885 3.976 13.484 8.254 19.804 12.795 8.148-2.102 14.907-8.413 17.264-17.21 3.49-13.03-4.094-26.17-17.11-29.657-1.628-.435-3.26-.697-4.87-.798-.706-.044-1.407-.058-2.104-.04zm-49.255 38.374l-10.19 17.66c2.67.892 5.285 2.055 7.81 3.512 20.422 11.79 27.486 38.182 15.693 58.608-.858 1.486-1.803 2.892-2.807 4.234 42.503 30.033 72.314 72.438 87.86 119.184h36.75c.635-75.88-37.814-149.84-108.19-190.473-8.707-5.03-17.735-9.063-26.926-12.726zm-23.795 34.07c-.584-.004-1.166.016-1.746.055-7.734.532-15.04 4.804-19.255 12.105-6.744 11.68-2.82 26.338 8.852 33.076 11.67 6.74 26.326 2.81 33.07-8.872 6.744-11.68 2.82-26.336-8.85-33.074-3.83-2.21-7.983-3.274-12.07-3.29z"}}]})(props);
};
module.exports.GiClaw = function GiClaw (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M256 16C106 76 46 226 46 226c0 45 60 90 90 90 90 0 180-195 135-285l-15-15zm45 15c30 60 0 135 0 135 120 30 120 180 75 330 75-75 90-150 90-210 0-90-15-225-165-255z"}}]})(props);
};
module.exports.GiClaws = function GiClaws (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M134.3 25c-3.4 4.84-16.5 23.75-33.3 50.76-19.11 30.74-40.34 68.54-48.59 94.44-5.1 16-8.12 43.7-9.54 66.8-.16 2.5-.26 4.7-.38 7 3.37-1.1 6.84-1.6 10.37-1.7 6.1-.2 12.37.8 18.5 2.4 12.25 3.2 24.54 9.1 35.74 15.5 2.3 1.3 4.5 2.6 6.7 3.9 1.1-1.2 2.3-2.3 3.5-3.6 17.3-17.8 36.7-40.5 44.6-56.3h.1c7.8-15.7 25-52.2 39.2-90.1 12.5-33.31 22.1-68.58 22.3-89.1h-89.2zm154.2 0c.2 20.52 9.8 55.79 22.3 89.1 14.2 37.9 31.4 74.4 39.2 90.1h.1c7.9 15.8 27.3 38.5 44.6 56.3 1.2 1.3 2.4 2.4 3.5 3.6 2.2-1.3 4.4-2.6 6.7-3.9 11.2-6.4 23.5-12.3 35.7-15.5 6.1-1.6 12.4-2.6 18.5-2.4 3.5.1 7.1.7 10.5 1.7-.2-2.3-.3-4.5-.4-7-1.5-23.1-4.5-50.8-9.6-66.8-8.3-25.9-29.5-63.7-48.6-94.44-16.8-27.01-29.9-45.92-33.3-50.76h-89.2zM53.66 260.4c-3.79.1-6.97.8-9.4 2.2-5.7 3.3-10.44 10.8-13.52 21.7-3.07 10.9-4.36 24.6-4.53 37.8-.09 6.3.04 12 .28 17.2 32.82-26.6 60.25-44.6 85.41-55-4.1-2.7-8.6-5.6-13.74-8.5-10.34-5.9-21.56-11.1-31.38-13.7-4.3-1.1-8.21-1.7-11.67-1.7h-1.45zm403.14 0c-3.4 0-7.3.6-11.6 1.7-9.8 2.6-21 7.8-31.4 13.7-5.1 2.9-9.7 5.8-13.8 8.4 25.2 10.5 52.7 28.5 85.5 55.2.3-5.3.4-11 .3-17.3-.2-13.2-1.4-26.9-4.5-37.8-3.1-10.9-7.9-18.4-13.6-21.7-2.4-1.4-5.6-2.1-9.4-2.2h-1.5zm-303.4 31c-35.5 4.3-75.8 27.2-136.11 79.2 1.3 11.5 8.39 22.3 16.35 34.3 38.19-37.8 99.06-75.4 156.06-91.6-10.9-10.9-21.3-19.7-36.3-21.9zm205.2 0c-15 2.2-25.4 11-36.3 21.9 57 16.2 117.9 53.8 156 91.6 8-12 15.1-22.8 16.4-34.3-60.3-52-100.6-74.9-136.1-79.2zm-164.3 39.3c-22.7 6.6-46.7 17.1-69.4 29.8 28.6 12.4 52.3 34.6 69.3 59.2 16.3 23.4 27.3 48.8 30.6 71.6 10.8-25.1 15.2-59 9.6-90.2-4-22.3-12.8-43-26.3-58.1-4.1-4.6-8.7-8.7-13.8-12.3zm123.4 0c-5.1 3.6-9.7 7.7-13.8 12.3-13.5 15.1-22.3 35.8-26.3 58.1-5.6 31.2-1.2 65.1 9.6 90.2 3.3-22.8 14.3-48.2 30.6-71.6 17-24.6 40.7-46.8 69.4-59.2-22.8-12.7-46.8-23.2-69.5-29.8zm-212.8 41.6c-19.8 12.5-37.97 26.2-52.75 39.9 9.16 18.9 29.92 42 57.25 58.6 28.1 17 62 27.5 95.6 23.8-25.6-13.6-47.8-33.8-65.2-56.4-16.1-20.8-28-43.7-34.9-65.9zm302.2 0c-6.9 22.2-18.8 45.1-34.9 65.9-17.4 22.6-39.6 42.8-65.2 56.4 33.6 3.7 67.5-6.8 95.6-23.8 27.3-16.6 48.1-39.6 57.3-58.6-14.8-13.6-33-27.4-52.8-39.9z"}}]})(props);
};
module.exports.GiClayBrick = function GiClayBrick (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M329.3 99.64l-39.7 10.46c-30.2 26.1-62.7 50.9-96.7 75.1l-6.7 21-34.1 7.3c-22.6 15.3-45.6 30.4-68.82 45.5l120.32 18.4 213.9-167.1c-27.7-3.8-56.9-7.5-88.2-10.66zm103.4 21.56l-61.4 47.9-43 53.1-45 15.7-65 50.7 20.8 115.1c65.6-54.6 127.6-109.4 187-163.1l-5.6-31.2 42.1-1.9c8.3-7.4 16.5-14.9 24.6-22.3zM61.58 277.6c-21.15 39.9-32.01 70.6-36.83 95.8 9.21 1.1 18.3 2.2 27.28 3.5l16.76-30.6 5.52 34c53.29 8.6 103.09 20.5 152.19 32.1l-26.9-117.6-66-10.1z"}}]})(props);
};
module.exports.GiClaymoreExplosive = function GiClaymoreExplosive (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M215 29.85l-13 60.3h.1c36 2.3 71.8 2.3 107.8 0h.1l-13-60.3zM98.92 38.66l-32.8 32.8C85.85 75.54 105.3 79 124.5 81.85l22.9-34.29c-18.7-2.7-35.2-5.77-48.48-8.9zm314.48.32c-14.8 4.57-30.7 8.1-47.3 10.77l21.4 32.1c19.2-2.85 38.7-6.3 58.4-10.39zm-219.2.21l-28.8 5.75-20.6 38.91 40.2 4zm123.6 0l9.2 48.66 40.2-4-20.6-38.91zM56.19 87.75L41.58 277.7c138.12 29.5 290.72 29.5 428.82 0L455.8 87.75c-137.6 29.35-262 29.35-399.61 0zM83.91 119l8.99.9c160 16 166.2 16 326.2 0l9-.9 13.7 141.6-8.5 1.2c-113 16.1-241.6 16.1-354.57 0l-8.52-1.2L83.04 128zm16.19 19.7L89.8 245c106.2 14.3 226.2 14.3 332.4 0l-10.3-106.3c-147.4 14.7-164.4 14.7-311.8 0zM80.29 303.5l-9 116-46.49 62 14.4 10.8 40.37-53.8 24.93 37.4 15-10-30.22-45.3 8.85-114.3c-5.97-.9-11.91-1.8-17.84-2.8zm351.41 0c-5.9 1-11.9 1.9-17.8 2.8l8.8 114.3-30.2 45.3 15 10 24.9-37.4 40.4 53.8 14.4-10.8-46.5-62zM129 310.4c-.7 11.7.6 23.6 8.4 32.9 14.7 17.5 37.8 22.8 62.1 23.2 24.4.4 51-3.9 75.9-7.5 24.8-3.6 47.9-6.4 63.3-4.1 7.7 1.2 13.1 3.5 16.5 6.6 3.3 3.1 5.5 7.2 5.9 15 .3 5.1-.8 6.9-3.2 9-2.5 2.1-7.4 4.2-14.3 5.3-13.9 2.3-34.8 1.1-56.1-.4-21.2-1.4-42.8-3-60.6-.1-8.9 1.4-17 3.9-23.6 9.2-6.5 5.4-10.6 13.9-10.6 23.4 0 7.4 3.2 14.3 8 19 4.8 4.7 10.8 7.5 17.3 9.6 12.9 4.2 28.5 5.5 43.7 6.8 15.2 1.4 30 2.8 39.9 5.7 11.7 3.2 12.3 8.7 12.4 20.2h18c0-7.2-1.8-20.9-8-28.5-4.1-5-10.8-7-17.3-8.9-12.8-3.9-28.3-5.1-43.4-6.4-15.2-1.3-30-2.8-39.8-6-4.9-1.6-8.4-3.6-10.3-5.4-1.8-1.8-2.5-3.1-2.5-6.1 0-5.1 1.2-7.1 4-9.4 2.8-2.2 8-4.3 15.1-5.5 14.2-2.3 35.3-1 56.5.4 21.3 1.4 42.7 3 60.2.2 8.7-1.5 16.7-4 23.1-9.4 6.3-5.5 10-14.2 9.5-23.7-.6-11.2-4.7-20.8-11.8-27.3-7-6.4-16.1-9.6-26-11.1-19.7-2.9-43.5.4-68.5 4.1-25 3.6-51 7.6-73 7.3-21.9-.4-38.8-5.1-48.6-16.8-2.2-2.7-3.7-10.3-3.8-19.2-6.1-.7-12.3-1.3-18.4-2.1z"}}]})(props);
};
module.exports.GiCleaver = function GiCleaver (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M230.3 46.15c-6.4-.1-12.6.7-18.9 2.5 26.1 15.8 35.7 36.4 30.6 55.15-40.2-33.05-98.5-36.45-128.4-4.95 30.7.4 48.8 13.25 53.8 32.15-51.5-8.5-103.61 17.7-113.67 59.7 27.04-14.8 49.77-12.7 63.47 1.6-48.86 18.3-80.89 66.9-68.55 108.4 16.02-26.6 36.67-36.3 55.75-30.8-26.03 31.5-34.03 73.9-21.31 105.1h19.01c5.1-17 15.7-27.5 29.5-31-1.7 10.4-2 20.9-1.1 31H207l18.4-91.9c-6.5-7.2-10.4-16.7-10.4-27.1 0-22.5 18.5-41 41-41s41 18.5 41 41c0 10.4-3.9 19.9-10.4 27.1L305 375h98.9c26.9-9.8 47.9-29.3 53.8-54.4-26.9 14.8-49.5 12.9-63.4-1 48.9-18.3 81.4-67.4 69.1-108.9-15.9 26-36.4 36.2-55.2 31.1 33.1-40.2 35.9-98.5 4.5-128.3-.5 30.6-13.3 48.7-32.2 53.8 8.5-51.4-17.7-103.45-59.7-113.45 14.7 26.8 12.9 49.55-1.1 63.25-15.5-41.35-53-70.65-89.4-70.95zM247.4 265L203 487h106l-44.4-222h-17.2zM54.79 393l-26.86 94H184.6l18.8-94H54.79zm253.81 0l18.8 94h156.7l-26.9-94H308.6z"}}]})(props);
};
module.exports.GiCleopatra = function GiCleopatra (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M247.6 17l-14.4 94.6 14.9 59.7c2.9 2.8 5.6 5.5 7 6.7.6.4.7.4.9.6.2-.2.3-.2.9-.6 1.4-1.2 4.1-3.9 7-6.7l14.9-59.7L264.4 17h-16.8zm-18.7 10.61c-36.1 6.78-71.8 26.1-101.4 49.45-5.7 4.49-11.1 9.14-16.3 13.88 34.4 3.96 70 6.44 105.9 7.49l11.8-70.82zm54.1.03l11.9 70.76c35.9-1.02 71.5-3.49 105.8-7.44-5.2-4.75-10.7-9.4-16.4-13.9-29.6-23.32-65.1-42.61-101.3-49.42zM94.81 107.1c-9.8 10.4-18.14 20.7-24.63 30.2 52.52 5.3 103.12 8.4 153.22 9.4l-7.6-30.3c-41.2-1.3-81.9-4.3-120.99-9.3zm322.19 0c-39 5-79.7 8-120.8 9.2l-7.6 30.4c50.1-1 100.6-4.1 153.1-9.4-6.5-9.4-14.8-19.8-24.7-30.2zM60.08 154.3c-1.43 2.9-2.58 5.6-3.44 8.1-7.98 40.7-7.5 86.3-5.27 132.1 11.55 11.4 22.95 22 34.03 30.3 11 8.2 21.6 14.1 31.5 16.7 1.9-39.3 2-86.5 2-149.5v-13.3l12.3 4.9c77.7 31.1 171.7 31.1 249.4 0l12.3-4.9V192c0 63 .1 110.3 2 149.5 10-2.6 20.6-8.4 31.7-16.7 10.9-8.2 22.1-18.6 33.5-29.8 2.5-50.6 3.3-99.3-4.8-132.4-.9-2.5-2-5.3-3.5-8.3-57.6 6.1-112.9 9.5-167.7 10.4l-4 15.9-1.7 1.8c-4 4-7.1 7.1-10.3 9.6-3.2 2.6-7.1 5-12.1 5s-8.9-2.4-12.1-5c-3.2-2.5-6.3-5.6-10.3-9.6l-1.7-1.8-4-15.9c-54.9-.9-110.2-4.3-167.82-10.4zm76.82 50.6c0 22.4 0 42.9-.2 61.8 8.7-12.8 18.2-2import _typeof from "@babel/runtime/helpers/esm/typeof";
import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import { deepmerge } from '@mui/utils';
import { private_safeColorChannel as safeColorChannel, private_safeAlpha as safeAlpha, private_safeDarken as safeDarken, private_safeLighten as safeLighten, private_safeEmphasize as safeEmphasize, unstable_createGetCssVar as systemCreateGetCssVar, unstable_defaultSxConfig as defaultSxConfig, unstable_styleFunctionSx as styleFunctionSx, unstable_prepareCssVars as prepareCssVars } from '@mui/system';
import defaultShouldSkipGeneratingVar from './shouldSkipGeneratingVar';
import createThemeWithoutVars from './createTheme';
import getOverlayAlpha from './getOverlayAlpha';
var defaultDarkOverlays = _toConsumableArray(Array(25)).map(function (_, index) {
  if (index === 0) {
    return undefined;
  }
  var overlay = getOverlayAlpha(index);
  return "linear-gradient(rgba(255 255 255 / ".concat(overlay, "), rgba(255 255 255 / ").concat(overlay, "))");
});
function assignNode(obj, keys) {
  keys.forEach(function (k) {
    if (!obj[k]) {
      obj[k] = {};
    }
  });
}
function setColor(obj, key, defaultValue) {
  if (!obj[key] && defaultValue) {
    obj[key] = defaultValue;
  }
}
function setColorChannel(obj, key) {
  if (!("".concat(key, "Channel") in obj)) {
    // custom channel token is not provided, generate one.
    // if channel token can't be generated, show a warning.
    obj["".concat(key, "Channel")] = safeColorChannel(obj[key], "MUI: Can't create `palette.".concat(key, "Channel` because `palette.").concat(key, "` is not one of these formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().") + '\n' + "To suppress this warning, you need to explicitly provide the `palette.".concat(key, "Channel` as a string (in rgb format, e.g. \"12 12 12\") or undefined if you want to remove the channel token."));
  }
}
var silent = function silent(fn) {
  try {
    return fn();
  } catch (error) {
    // ignore error
  }
  return undefined;
};
export var createGetCssVar = function createGetCssVar() {
  var cssVarPrefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'mui';
  return systemCreateGetCssVar(cssVarPrefix);
};
export default function extendTheme() {
  var _colorSchemesInput$li, _colorSchemesInput$da, _colorSchemesInput$li2, _colorSchemesInput$li3, _colorSchemesInput$da2, _colorSchemesInput$da3;
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var _options$colorSchemes = options.colorSchemes,
    colorSchemesInput = _options$colorSchemes === void 0 ? {} : _options$colorSchemes,
    _options$cssVarPrefix 